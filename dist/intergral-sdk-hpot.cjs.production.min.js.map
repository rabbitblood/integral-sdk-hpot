{"version":3,"file":"intergral-sdk-hpot.cjs.production.min.js","sources":["../src/constants/internalConstants.ts","../src/constants/chainIds.ts","../src/constants/constants.ts","../src/constants/addresses.ts","../src/utils/computePoolAddress.ts","../src/utils/liquidityMath.ts","../src/utils/fullMath.ts","../src/utils/sqrtPriceMath.ts","../src/utils/swapMath.ts","../src/utils/mostSignificantBit.ts","../src/utils/tickMath.ts","../src/entities/tickDataProvider.ts","../src/utils/isSorted.ts","../src/utils/tickList.ts","../src/utils/calldata.ts","../src/utils/encodeRouteToPath.ts","../src/utils/sqrt.ts","../src/utils/encodeSqrtRatioX96.ts","../src/utils/maxLiquidityForAmounts.ts","../src/utils/nearestUsableTick.ts","../src/utils/priceTickConversions.ts","../src/enums/tradeType.ts","../src/entities/tick.ts","../src/entities/tickListDataProvider.ts","../src/entities/pool.ts","../src/entities/position.ts","../src/entities/route.ts","../src/utils/sortedInsert.ts","../src/entities/trade.ts","../src/enums/rounding.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/entities/AbstractCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/Token.ts","../src/entities/Percent.ts","../src/entities/NativeCurrency.ts","../src/entities/wnative.ts","../src/entities/Native.ts","../src/entities/ExtendedNative.ts","../src/functions/maxAmountSpend.ts","../src/functions/retry.ts","../src/functions/mint.ts","../src/enums/bound.ts","../src/enums/field.ts","../src/abis/algebraPositionManager.ts","../src/abis/algebraSwapRouter.ts","../src/abis/selfPermit.ts","../src/classes/selfPermit.ts","../src/classes/nonfungiblePositionManager.ts","../src/classes/swapRouter.ts","../src/utils/getTickToPrice.ts","../src/functions/tryParseAmount.ts","../src/functions/unwrappedToken.ts"],"sourcesContent":["import JSBI from 'jsbi';\r\n\r\n// constants used internally but not expected to be used externally\r\nexport const NEGATIVE_ONE = JSBI.BigInt(-1);\r\nexport const ZERO = JSBI.BigInt(0);\r\nexport const ONE = JSBI.BigInt(1);\r\n\r\n// used in liquidity amount math\r\nexport const Q96 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(96));\r\nexport const Q192 = JSBI.exponentiate(Q96, JSBI.BigInt(2));\r\n\r\nexport const MaxUint256 = JSBI.BigInt(\r\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\r\n);\r\n","export const ChainId = {\r\n    Holesky: 17000,\r\n    BerachainTestnet: 80084\r\n}\r\n","export const ADDRESS_ZERO = '0x0000000000000000000000000000000000000000';\r\n\r\nexport const INITIAL_POOL_FEE = 100\r\n\r\nexport const DEFAULT_TICK_SPACING = 60","import { ChainId } from \"./chainIds\"\r\n\r\nexport const POOL_DEPLOYER_ADDRESSES = {\r\n    [ChainId.Holesky]: '0x4777378A908A90862AdDedabF9388958Cbd020f1',\r\n    [ChainId.BerachainTestnet]: '0x805488DaA81c1b9e7C5cE3f1DCeA28F21448EC6A',\r\n}\r\n\r\nexport const POOL_INIT_CODE_HASH = {\r\n    [ChainId.Holesky]: '0x4b9e4a8044ce5695e06fce9421a63b6f5c3db8a561eebb30ea4c775469e36eaf',\r\n    [ChainId.BerachainTestnet]: '0x3093a65c28d1e6def42997fdea76d033dfd42b432c107e19412cf91a1eac0f91',\r\n}\r\n","import { defaultAbiCoder } from '@ethersproject/abi';\r\nimport { getAddress, getCreate2Address } from '@ethersproject/address';\r\nimport { keccak256 } from '@ethersproject/solidity';\r\nimport { keccak256 as keccak256BytesOnly } from '@ethersproject/keccak256';\r\nimport { BytesLike, zeroPad, concat } from \"@ethersproject/bytes\";\r\nimport { toUtf8Bytes } from \"@ethersproject/strings\"\r\nimport { Token } from '../entities';\r\nimport { POOL_DEPLOYER_ADDRESSES, POOL_INIT_CODE_HASH } from \"../constants\";\r\n\r\n/**\r\n * Computes a pool address\r\n * @param poolDeployer The Algebra Pool Deployer address\r\n * @param tokenA The first token of the pair, irrespective of sort order\r\n * @param tokenB The second token of the pair, irrespective of sort order\r\n * @param initCodeHashManualOverride The initial code hash override\r\n * @returns The pool address\r\n */\r\nexport function computePoolAddress({\r\n  tokenA,\r\n  tokenB,\r\n  initCodeHashManualOverride,\r\n  poolDeployer\r\n}: {\r\n  tokenA: Token;\r\n  tokenB: Token;\r\n  initCodeHashManualOverride?: string;\r\n  poolDeployer?: string;\r\n}): string {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB)\r\n    ? [tokenA, tokenB]\r\n    : [tokenB, tokenA];\r\n  return getCreate2Address(\r\n    poolDeployer ?? POOL_DEPLOYER_ADDRESSES[tokenA.chainId],\r\n    keccak256(\r\n      ['bytes'],\r\n      [\r\n        defaultAbiCoder.encode(\r\n          ['address', 'address'],\r\n          [token0.address, token1.address],\r\n        ),\r\n      ],\r\n    ),\r\n    initCodeHashManualOverride ?? POOL_INIT_CODE_HASH[tokenA.chainId],\r\n  );\r\n}\r\n\r\nexport function computeCustomPoolAddress({\r\n  tokenA,\r\n  tokenB,\r\n  customPoolDeployer,\r\n  initCodeHashManualOverride,\r\n  mainPoolDeployer\r\n}: {\r\n  tokenA: Token;\r\n  tokenB: Token;\r\n  customPoolDeployer: string;\r\n  initCodeHashManualOverride?: string;\r\n  mainPoolDeployer?: string;\r\n}): string {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB)\r\n    ? [tokenA, tokenB]\r\n    : [tokenB, tokenA];\r\n  return getCreate2Address(\r\n    mainPoolDeployer ?? POOL_DEPLOYER_ADDRESSES[tokenA.chainId],\r\n    keccak256(\r\n      ['bytes'],\r\n      [\r\n        defaultAbiCoder.encode(\r\n          ['address', 'address', 'address'],\r\n          [customPoolDeployer, token0.address, token1.address],\r\n        ),\r\n      ],\r\n    ),\r\n    initCodeHashManualOverride ?? POOL_INIT_CODE_HASH[tokenA.chainId],\r\n  );\r\n}\r\n\r\nexport function computePoolAddressZkSync({\r\n  poolDeployer,\r\n  tokenA,\r\n  tokenB,\r\n  initCodeHashManualOverride,\r\n}: {\r\n  tokenA: Token\r\n  tokenB: Token\r\n  initCodeHashManualOverride?: string\r\n  poolDeployer?: string\r\n}): string {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n  return getCreate2AddressZk(\r\n    poolDeployer ?? POOL_DEPLOYER_ADDRESSES[tokenA.chainId],\r\n    keccak256(['bytes'], [defaultAbiCoder.encode(['address', 'address'], [token0.address, token1.address])]),\r\n    initCodeHashManualOverride ?? POOL_INIT_CODE_HASH[tokenA.chainId]\r\n  )\r\n}\r\n\r\nfunction getCreate2AddressZk(from: string, salt: BytesLike, initCodeHash: BytesLike): string {\r\n\r\n  const prefix = keccak256BytesOnly(toUtf8Bytes('zksyncCreate2'))\r\n\r\n  const addressBytes = keccak256BytesOnly(concat([prefix, zeroPad(from, 32), salt, initCodeHash, '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'])).slice(26)\r\n\r\n  return getAddress(addressBytes)\r\n\r\n}","import JSBI from 'jsbi';\r\nimport { NEGATIVE_ONE, ZERO } from '../constants/internalConstants';\r\n\r\nexport abstract class LiquidityMath {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n\r\n  public static addDelta(x: JSBI, y: JSBI): JSBI {\r\n    if (JSBI.lessThan(y, ZERO)) {\r\n      return JSBI.subtract(x, JSBI.multiply(y, NEGATIVE_ONE));\r\n    } else {\r\n      return JSBI.add(x, y);\r\n    }\r\n  }\r\n}\r\n","import JSBI from 'jsbi';\r\nimport { ONE, ZERO } from '../constants/internalConstants';\r\n\r\nexport abstract class FullMath {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n\r\n  public static mulDivRoundingUp(a: JSBI, b: JSBI, denominator: JSBI): JSBI {\r\n    const product = JSBI.multiply(a, b);\r\n    let result = JSBI.divide(product, denominator);\r\n    if (JSBI.notEqual(JSBI.remainder(product, denominator), ZERO))\r\n      result = JSBI.add(result, ONE);\r\n    return result;\r\n  }\r\n}\r\n","import { MaxUint256 } from '../constants/internalConstants';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { ONE, Q96, ZERO } from '../constants/internalConstants';\r\nimport { FullMath } from './fullMath';\r\n\r\nconst MaxUint160 = JSBI.subtract(\r\n  JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(160)),\r\n  ONE,\r\n);\r\n\r\nfunction multiplyIn256(x: JSBI, y: JSBI): JSBI {\r\n  const product = JSBI.multiply(x, y);\r\n  return JSBI.bitwiseAnd(product, MaxUint256);\r\n}\r\n\r\nfunction addIn256(x: JSBI, y: JSBI): JSBI {\r\n  const sum = JSBI.add(x, y);\r\n  return JSBI.bitwiseAnd(sum, MaxUint256);\r\n}\r\n\r\nexport abstract class SqrtPriceMath {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n\r\n  public static getAmount0Delta(\r\n    sqrtRatioAX96: JSBI,\r\n    sqrtRatioBX96: JSBI,\r\n    liquidity: JSBI,\r\n    roundUp: boolean,\r\n  ): JSBI {\r\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n      [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n    }\r\n\r\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96));\r\n    const numerator2 = JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n    return roundUp\r\n      ? FullMath.mulDivRoundingUp(\r\n        FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\r\n        ONE,\r\n        sqrtRatioAX96,\r\n      )\r\n      : JSBI.divide(\r\n        JSBI.divide(JSBI.multiply(numerator1, numerator2), sqrtRatioBX96),\r\n        sqrtRatioAX96,\r\n      );\r\n  }\r\n\r\n  public static getAmount1Delta(\r\n    sqrtRatioAX96: JSBI,\r\n    sqrtRatioBX96: JSBI,\r\n    liquidity: JSBI,\r\n    roundUp: boolean,\r\n  ): JSBI {\r\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n      [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n    }\r\n\r\n    return roundUp\r\n      ? FullMath.mulDivRoundingUp(\r\n        liquidity,\r\n        JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96),\r\n        Q96,\r\n      )\r\n      : JSBI.divide(\r\n        JSBI.multiply(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)),\r\n        Q96,\r\n      );\r\n  }\r\n\r\n  public static getNextSqrtPriceFromInput(\r\n    sqrtPX96: JSBI,\r\n    liquidity: JSBI,\r\n    amountIn: JSBI,\r\n    zeroForOne: boolean,\r\n  ): JSBI {\r\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO));\r\n    invariant(JSBI.greaterThan(liquidity, ZERO));\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromAmount0RoundingUp(\r\n        sqrtPX96,\r\n        liquidity,\r\n        amountIn,\r\n        true,\r\n      )\r\n      : this.getNextSqrtPriceFromAmount1RoundingDown(\r\n        sqrtPX96,\r\n        liquidity,\r\n        amountIn,\r\n        true,\r\n      );\r\n  }\r\n\r\n  public static getNextSqrtPriceFromOutput(\r\n    sqrtPX96: JSBI,\r\n    liquidity: JSBI,\r\n    amountOut: JSBI,\r\n    zeroForOne: boolean,\r\n  ): JSBI {\r\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO));\r\n    invariant(JSBI.greaterThan(liquidity, ZERO));\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromAmount1RoundingDown(\r\n        sqrtPX96,\r\n        liquidity,\r\n        amountOut,\r\n        false,\r\n      )\r\n      : this.getNextSqrtPriceFromAmount0RoundingUp(\r\n        sqrtPX96,\r\n        liquidity,\r\n        amountOut,\r\n        false,\r\n      );\r\n  }\r\n\r\n  private static getNextSqrtPriceFromAmount0RoundingUp(\r\n    sqrtPX96: JSBI,\r\n    liquidity: JSBI,\r\n    amount: JSBI,\r\n    add: boolean,\r\n  ): JSBI {\r\n    if (JSBI.equal(amount, ZERO)) return sqrtPX96;\r\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96));\r\n\r\n    if (add) {\r\n      const product = multiplyIn256(amount, sqrtPX96);\r\n      if (JSBI.equal(JSBI.divide(product, amount), sqrtPX96)) {\r\n        const denominator = addIn256(numerator1, product);\r\n        if (JSBI.greaterThanOrEqual(denominator, numerator1)) {\r\n          return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator);\r\n        }\r\n      }\r\n\r\n      return FullMath.mulDivRoundingUp(\r\n        numerator1,\r\n        ONE,\r\n        JSBI.add(JSBI.divide(numerator1, sqrtPX96), amount),\r\n      );\r\n    } else {\r\n      const product = multiplyIn256(amount, sqrtPX96);\r\n\r\n      invariant(JSBI.equal(JSBI.divide(product, amount), sqrtPX96));\r\n      invariant(JSBI.greaterThan(numerator1, product));\r\n      const denominator = JSBI.subtract(numerator1, product);\r\n      return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator);\r\n    }\r\n  }\r\n\r\n  private static getNextSqrtPriceFromAmount1RoundingDown(\r\n    sqrtPX96: JSBI,\r\n    liquidity: JSBI,\r\n    amount: JSBI,\r\n    add: boolean,\r\n  ): JSBI {\r\n    if (add) {\r\n      const quotient = JSBI.lessThanOrEqual(amount, MaxUint160)\r\n        ? JSBI.divide(JSBI.leftShift(amount, JSBI.BigInt(96)), liquidity)\r\n        : JSBI.divide(JSBI.multiply(amount, Q96), liquidity);\r\n\r\n      return JSBI.add(sqrtPX96, quotient);\r\n    } else {\r\n      const quotient = FullMath.mulDivRoundingUp(amount, Q96, liquidity);\r\n\r\n      invariant(JSBI.greaterThan(sqrtPX96, quotient));\r\n      return JSBI.subtract(sqrtPX96, quotient);\r\n    }\r\n  }\r\n}\r\n","import JSBI from 'jsbi';\r\nimport { NEGATIVE_ONE, ZERO } from '../constants/internalConstants';\r\nimport { FullMath } from './fullMath';\r\nimport { SqrtPriceMath } from './sqrtPriceMath';\r\n\r\nconst MAX_FEE = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(6));\r\n\r\nexport abstract class SwapMath {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n\r\n  public static computeSwapStep(\r\n    sqrtRatioCurrentX96: JSBI,\r\n    sqrtRatioTargetX96: JSBI,\r\n    liquidity: JSBI,\r\n    amountRemaining: JSBI,\r\n    feePips: number,\r\n  ): [JSBI, JSBI, JSBI, JSBI] {\r\n    const returnValues: Partial<{\r\n      sqrtRatioNextX96: JSBI;\r\n      amountIn: JSBI;\r\n      amountOut: JSBI;\r\n      feeAmount: JSBI;\r\n    }> = {};\r\n\r\n    const zeroForOne = JSBI.greaterThanOrEqual(\r\n      sqrtRatioCurrentX96,\r\n      sqrtRatioTargetX96,\r\n    );\r\n    const exactIn = JSBI.greaterThanOrEqual(amountRemaining, ZERO);\r\n\r\n    if (exactIn) {\r\n      const amountRemainingLessFee = JSBI.divide(\r\n        JSBI.multiply(\r\n          amountRemaining,\r\n          JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips)),\r\n        ),\r\n        MAX_FEE,\r\n      );\r\n      returnValues.amountIn = zeroForOne\r\n        ? SqrtPriceMath.getAmount0Delta(\r\n          sqrtRatioTargetX96,\r\n          sqrtRatioCurrentX96,\r\n          liquidity,\r\n          true,\r\n        )\r\n        : SqrtPriceMath.getAmount1Delta(\r\n          sqrtRatioCurrentX96,\r\n          sqrtRatioTargetX96,\r\n          liquidity,\r\n          true,\r\n        );\r\n      if (\r\n        JSBI.greaterThanOrEqual(amountRemainingLessFee, returnValues.amountIn!)\r\n      ) {\r\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96;\r\n      } else {\r\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\r\n          sqrtRatioCurrentX96,\r\n          liquidity,\r\n          amountRemainingLessFee,\r\n          zeroForOne,\r\n        );\r\n      }\r\n    } else {\r\n      returnValues.amountOut = zeroForOne\r\n        ? SqrtPriceMath.getAmount1Delta(\r\n          sqrtRatioTargetX96,\r\n          sqrtRatioCurrentX96,\r\n          liquidity,\r\n          false,\r\n        )\r\n        : SqrtPriceMath.getAmount0Delta(\r\n          sqrtRatioCurrentX96,\r\n          sqrtRatioTargetX96,\r\n          liquidity,\r\n          false,\r\n        );\r\n      if (\r\n        JSBI.greaterThanOrEqual(\r\n          JSBI.multiply(amountRemaining, NEGATIVE_ONE),\r\n          returnValues.amountOut,\r\n        )\r\n      ) {\r\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96;\r\n      } else {\r\n        returnValues.sqrtRatioNextX96 =\r\n          SqrtPriceMath.getNextSqrtPriceFromOutput(\r\n            sqrtRatioCurrentX96,\r\n            liquidity,\r\n            JSBI.multiply(amountRemaining, NEGATIVE_ONE),\r\n            zeroForOne,\r\n          );\r\n      }\r\n    }\r\n\r\n    const max = JSBI.equal(sqrtRatioTargetX96, returnValues.sqrtRatioNextX96);\r\n\r\n    if (zeroForOne) {\r\n      returnValues.amountIn =\r\n        max && exactIn\r\n          ? returnValues.amountIn\r\n          : SqrtPriceMath.getAmount0Delta(\r\n            returnValues.sqrtRatioNextX96,\r\n            sqrtRatioCurrentX96,\r\n            liquidity,\r\n            true,\r\n          );\r\n      returnValues.amountOut =\r\n        max && !exactIn\r\n          ? returnValues.amountOut\r\n          : SqrtPriceMath.getAmount1Delta(\r\n            returnValues.sqrtRatioNextX96,\r\n            sqrtRatioCurrentX96,\r\n            liquidity,\r\n            false,\r\n          );\r\n    } else {\r\n      returnValues.amountIn =\r\n        max && exactIn\r\n          ? returnValues.amountIn\r\n          : SqrtPriceMath.getAmount1Delta(\r\n            sqrtRatioCurrentX96,\r\n            returnValues.sqrtRatioNextX96,\r\n            liquidity,\r\n            true,\r\n          );\r\n      returnValues.amountOut =\r\n        max && !exactIn\r\n          ? returnValues.amountOut\r\n          : SqrtPriceMath.getAmount0Delta(\r\n            sqrtRatioCurrentX96,\r\n            returnValues.sqrtRatioNextX96,\r\n            liquidity,\r\n            false,\r\n          );\r\n    }\r\n\r\n    if (\r\n      !exactIn &&\r\n      JSBI.greaterThan(\r\n        returnValues.amountOut!,\r\n        JSBI.multiply(amountRemaining, NEGATIVE_ONE),\r\n      )\r\n    ) {\r\n      returnValues.amountOut = JSBI.multiply(amountRemaining, NEGATIVE_ONE);\r\n    }\r\n\r\n    if (\r\n      exactIn &&\r\n      JSBI.notEqual(returnValues.sqrtRatioNextX96, sqrtRatioTargetX96)\r\n    ) {\r\n      // we didn't reach the target, so take the remainder of the maximum input as fee\r\n      returnValues.feeAmount = JSBI.subtract(\r\n        amountRemaining,\r\n        returnValues.amountIn!,\r\n      );\r\n    } else {\r\n      returnValues.feeAmount = FullMath.mulDivRoundingUp(\r\n        returnValues.amountIn!,\r\n        JSBI.BigInt(feePips),\r\n        JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips)),\r\n      );\r\n    }\r\n\r\n    return [\r\n      returnValues.sqrtRatioNextX96!,\r\n      returnValues.amountIn!,\r\n      returnValues.amountOut!,\r\n      returnValues.feeAmount!,\r\n    ];\r\n  }\r\n}\r\n","import { MaxUint256 } from '../constants/internalConstants';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { ZERO } from '../constants/internalConstants';\r\n\r\nconst TWO = JSBI.BigInt(2);\r\nconst POWERS_OF_2 = [128, 64, 32, 16, 8, 4, 2, 1].map(\r\n  (pow: number): [number, JSBI] => [\r\n    pow,\r\n    JSBI.exponentiate(TWO, JSBI.BigInt(pow)),\r\n  ],\r\n);\r\n\r\nexport function mostSignificantBit(x: JSBI): number {\r\n  invariant(JSBI.greaterThan(x, ZERO), 'ZERO');\r\n  invariant(JSBI.lessThanOrEqual(x, MaxUint256), 'MAX');\r\n\r\n  let msb = 0;\r\n  for (const [power, min] of POWERS_OF_2) {\r\n    if (JSBI.greaterThanOrEqual(x, min)) {\r\n      x = JSBI.signedRightShift(x, JSBI.BigInt(power));\r\n      msb += power;\r\n    }\r\n  }\r\n  return msb;\r\n}\r\n","import { MaxUint256 } from '../constants/internalConstants';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { ONE, ZERO } from '../constants/internalConstants';\r\nimport { mostSignificantBit } from './mostSignificantBit';\r\n\r\nfunction mulShift(val: JSBI, mulBy: string): JSBI {\r\n  return JSBI.signedRightShift(\r\n    JSBI.multiply(val, JSBI.BigInt(mulBy)),\r\n    JSBI.BigInt(128),\r\n  );\r\n}\r\n\r\nconst Q32 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(32));\r\n\r\nexport abstract class TickMath {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n\r\n  /**\r\n   * The minimum tick that can be used on any pool.\r\n   */\r\n  public static MIN_TICK = -887272;\r\n  /**\r\n   * The maximum tick that can be used on any pool.\r\n   */\r\n  public static MAX_TICK: number = -TickMath.MIN_TICK;\r\n\r\n  /**\r\n   * The sqrt ratio corresponding to the minimum tick that could be used on any pool.\r\n   */\r\n  public static MIN_SQRT_RATIO: JSBI = JSBI.BigInt('4295128739');\r\n  /**\r\n   * The sqrt ratio corresponding to the maximum tick that could be used on any pool.\r\n   */\r\n  public static MAX_SQRT_RATIO: JSBI = JSBI.BigInt(\r\n    '1461446703485210103287273052203988822378723970342',\r\n  );\r\n\r\n  /**\r\n   * Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick\r\n   * @param tick the tick for which to compute the sqrt ratio\r\n   */\r\n  public static getSqrtRatioAtTick(tick: number): JSBI {\r\n    invariant(\r\n      tick >= TickMath.MIN_TICK &&\r\n      tick <= TickMath.MAX_TICK &&\r\n      Number.isInteger(tick),\r\n      'TICK',\r\n    );\r\n    const absTick: number = tick < 0 ? tick * -1 : tick;\r\n\r\n    let ratio: JSBI =\r\n      (absTick & 0x1) != 0\r\n        ? JSBI.BigInt('0xfffcb933bd6fad37aa2d162d1a594001')\r\n        : JSBI.BigInt('0x100000000000000000000000000000000');\r\n    if ((absTick & 0x2) != 0)\r\n      ratio = mulShift(ratio, '0xfff97272373d413259a46990580e213a');\r\n    if ((absTick & 0x4) != 0)\r\n      ratio = mulShift(ratio, '0xfff2e50f5f656932ef12357cf3c7fdcc');\r\n    if ((absTick & 0x8) != 0)\r\n      ratio = mulShift(ratio, '0xffe5caca7e10e4e61c3624eaa0941cd0');\r\n    if ((absTick & 0x10) != 0)\r\n      ratio = mulShift(ratio, '0xffcb9843d60f6159c9db58835c926644');\r\n    if ((absTick & 0x20) != 0)\r\n      ratio = mulShift(ratio, '0xff973b41fa98c081472e6896dfb254c0');\r\n    if ((absTick & 0x40) != 0)\r\n      ratio = mulShift(ratio, '0xff2ea16466c96a3843ec78b326b52861');\r\n    if ((absTick & 0x80) != 0)\r\n      ratio = mulShift(ratio, '0xfe5dee046a99a2a811c461f1969c3053');\r\n    if ((absTick & 0x100) != 0)\r\n      ratio = mulShift(ratio, '0xfcbe86c7900a88aedcffc83b479aa3a4');\r\n    if ((absTick & 0x200) != 0)\r\n      ratio = mulShift(ratio, '0xf987a7253ac413176f2b074cf7815e54');\r\n    if ((absTick & 0x400) != 0)\r\n      ratio = mulShift(ratio, '0xf3392b0822b70005940c7a398e4b70f3');\r\n    if ((absTick & 0x800) != 0)\r\n      ratio = mulShift(ratio, '0xe7159475a2c29b7443b29c7fa6e889d9');\r\n    if ((absTick & 0x1000) != 0)\r\n      ratio = mulShift(ratio, '0xd097f3bdfd2022b8845ad8f792aa5825');\r\n    if ((absTick & 0x2000) != 0)\r\n      ratio = mulShift(ratio, '0xa9f746462d870fdf8a65dc1f90e061e5');\r\n    if ((absTick & 0x4000) != 0)\r\n      ratio = mulShift(ratio, '0x70d869a156d2a1b890bb3df62baf32f7');\r\n    if ((absTick & 0x8000) != 0)\r\n      ratio = mulShift(ratio, '0x31be135f97d08fd981231505542fcfa6');\r\n    if ((absTick & 0x10000) != 0)\r\n      ratio = mulShift(ratio, '0x9aa508b5b7a84e1c677de54f3e99bc9');\r\n    if ((absTick & 0x20000) != 0)\r\n      ratio = mulShift(ratio, '0x5d6af8dedb81196699c329225ee604');\r\n    if ((absTick & 0x40000) != 0)\r\n      ratio = mulShift(ratio, '0x2216e584f5fa1ea926041bedfe98');\r\n    if ((absTick & 0x80000) != 0)\r\n      ratio = mulShift(ratio, '0x48a170391f7dc42444e8fa2');\r\n\r\n    if (tick > 0) ratio = JSBI.divide(MaxUint256, ratio);\r\n\r\n    // back to Q96\r\n    return JSBI.greaterThan(JSBI.remainder(ratio, Q32), ZERO)\r\n      ? JSBI.add(JSBI.divide(ratio, Q32), ONE)\r\n      : JSBI.divide(ratio, Q32);\r\n  }\r\n\r\n  /**\r\n   * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX96\r\n   * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX96\r\n   * @param sqrtRatioX96 the sqrt ratio as a Q64.96 for which to compute the tick\r\n   */\r\n  public static getTickAtSqrtRatio(sqrtRatioX96: JSBI): number {\r\n    invariant(\r\n      JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO) &&\r\n      JSBI.lessThan(sqrtRatioX96, TickMath.MAX_SQRT_RATIO),\r\n      'SQRT_RATIO',\r\n    );\r\n\r\n    const sqrtRatioX128 = JSBI.leftShift(sqrtRatioX96, JSBI.BigInt(32));\r\n\r\n    const msb = mostSignificantBit(sqrtRatioX128);\r\n\r\n    let r: JSBI;\r\n    if (JSBI.greaterThanOrEqual(JSBI.BigInt(msb), JSBI.BigInt(128))) {\r\n      r = JSBI.signedRightShift(sqrtRatioX128, JSBI.BigInt(msb - 127));\r\n    } else {\r\n      r = JSBI.leftShift(sqrtRatioX128, JSBI.BigInt(127 - msb));\r\n    }\r\n\r\n    let log_2: JSBI = JSBI.leftShift(\r\n      JSBI.subtract(JSBI.BigInt(msb), JSBI.BigInt(128)),\r\n      JSBI.BigInt(64),\r\n    );\r\n\r\n    for (let i = 0; i < 14; i++) {\r\n      r = JSBI.signedRightShift(JSBI.multiply(r, r), JSBI.BigInt(127));\r\n      const f = JSBI.signedRightShift(r, JSBI.BigInt(128));\r\n      log_2 = JSBI.bitwiseOr(log_2, JSBI.leftShift(f, JSBI.BigInt(63 - i)));\r\n      r = JSBI.signedRightShift(r, f);\r\n    }\r\n\r\n    const log_sqrt10001 = JSBI.multiply(\r\n      log_2,\r\n      JSBI.BigInt('255738958999603826347141'),\r\n    );\r\n\r\n    const tickLow = JSBI.toNumber(\r\n      JSBI.signedRightShift(\r\n        JSBI.subtract(\r\n          log_sqrt10001,\r\n          JSBI.BigInt('3402992956809132418596140100660247210'),\r\n        ),\r\n        JSBI.BigInt(128),\r\n      ),\r\n    );\r\n    const tickHigh = JSBI.toNumber(\r\n      JSBI.signedRightShift(\r\n        JSBI.add(\r\n          log_sqrt10001,\r\n          JSBI.BigInt('291339464771989622907027621153398088495'),\r\n        ),\r\n        JSBI.BigInt(128),\r\n      ),\r\n    );\r\n\r\n    return tickLow === tickHigh\r\n      ? tickLow\r\n      : JSBI.lessThanOrEqual(\r\n        TickMath.getSqrtRatioAtTick(tickHigh),\r\n        sqrtRatioX96,\r\n      )\r\n        ? tickHigh\r\n        : tickLow;\r\n  }\r\n}\r\n","import { BigintIsh } from '../types/BigIntish';\r\n\r\n/**\r\n * Provides information about ticks\r\n */\r\nexport interface TickDataProvider {\r\n  /**\r\n   * Return information corresponding to a specific tick\r\n   * @param tick the tick to load\r\n   */\r\n  getTick(tick: number): Promise<{ liquidityNet: BigintIsh }>;\r\n\r\n  /**\r\n   * Return the next tick that is initialized within a single word\r\n   * @param tick The current tick\r\n   * @param lte Whether the next tick should be lte the current tick\r\n   * @param tickSpacing The tick spacing of the pool\r\n   */\r\n  nextInitializedTickWithinOneWord(\r\n    tick: number,\r\n    lte: boolean,\r\n    tickSpacing: number,\r\n  ): Promise<[number, boolean]>;\r\n}\r\n\r\n/**\r\n * This tick data provider does not know how to fetch any tick data. It throws whenever it is required. Useful if you\r\n * do not need to load tick data for your use case.\r\n */\r\nexport class NoTickDataProvider implements TickDataProvider {\r\n  private static ERROR_MESSAGE = 'No tick data provider was given';\r\n\r\n  async getTick(_tick: number): Promise<{ liquidityNet: BigintIsh }> {\r\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE);\r\n  }\r\n\r\n  async nextInitializedTickWithinOneWord(\r\n    _tick: number,\r\n    _lte: boolean,\r\n    _tickSpacing: number,\r\n  ): Promise<[number, boolean]> {\r\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE);\r\n  }\r\n}\r\n","/**\r\n * Determines if a tick list is sorted\r\n * @param list The tick list\r\n * @param comparator The comparator\r\n * @returns true if sorted\r\n */\r\nexport function isSorted<T>(\r\n  list: Array<T>,\r\n  comparator: (a: T, b: T) => number,\r\n): boolean {\r\n  for (let i = 0; i < list.length - 1; i++) {\r\n    if (comparator(list[i], list[i + 1]) > 0) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { ZERO } from '../constants/internalConstants';\r\nimport { isSorted } from './isSorted';\r\nimport { Tick } from '../entities/tick';\r\n\r\nfunction tickComparator(a: Tick, b: Tick) {\r\n  return a.index - b.index;\r\n}\r\n\r\n/**\r\n * Utility methods for interacting with sorted lists of ticks\r\n */\r\nexport abstract class TickList {\r\n  /**\r\n   * Cannot be constructed\r\n   */\r\n\r\n  public static validateList(ticks: Tick[], tickSpacing: number) {\r\n    invariant(tickSpacing > 0, 'TICK_SPACING_NONZERO');\r\n    // ensure ticks are spaced appropriately\r\n    invariant(\r\n      ticks.every(({ index }) => index % tickSpacing === 0),\r\n      'TICK_SPACING',\r\n    );\r\n\r\n    // ensure tick liquidity deltas sum to 0\r\n    invariant(\r\n      JSBI.equal(\r\n        ticks.reduce(\r\n          (accumulator, { liquidityNet }) =>\r\n            JSBI.add(accumulator, liquidityNet),\r\n          ZERO,\r\n        ),\r\n        ZERO,\r\n      ),\r\n      'ZERO_NET',\r\n    );\r\n\r\n    invariant(isSorted(ticks, tickComparator), 'SORTED');\r\n  }\r\n\r\n  public static isBelowSmallest(ticks: readonly Tick[], tick: number): boolean {\r\n    invariant(ticks.length > 0, 'LENGTH');\r\n    return tick < ticks[0].index;\r\n  }\r\n\r\n  public static isAtOrAboveLargest(\r\n    ticks: readonly Tick[],\r\n    tick: number,\r\n  ): boolean {\r\n    invariant(ticks.length > 0, 'LENGTH');\r\n    return tick >= ticks[ticks.length - 1].index;\r\n  }\r\n\r\n  public static getTick(ticks: readonly Tick[], index: number): Tick {\r\n    const tick = ticks[this.binarySearch(ticks, index)];\r\n    invariant(tick.index === index, 'NOT_CONTAINED');\r\n    return tick;\r\n  }\r\n\r\n  public static nextInitializedTick(\r\n    ticks: readonly Tick[],\r\n    tick: number,\r\n    lte: boolean,\r\n  ): Tick {\r\n    if (lte) {\r\n      invariant(!TickList.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST');\r\n      if (TickList.isAtOrAboveLargest(ticks, tick)) {\r\n        return ticks[ticks.length - 1];\r\n      }\r\n      const index = this.binarySearch(ticks, tick);\r\n      return ticks[index];\r\n    } else {\r\n      invariant(!this.isAtOrAboveLargest(ticks, tick), 'AT_OR_ABOVE_LARGEST');\r\n      if (this.isBelowSmallest(ticks, tick)) {\r\n        return ticks[0];\r\n      }\r\n      const index = this.binarySearch(ticks, tick);\r\n      return ticks[index + 1];\r\n    }\r\n  }\r\n\r\n  public static nextInitializedTickWithinOneWord(\r\n    ticks: readonly Tick[],\r\n    tick: number,\r\n    lte: boolean,\r\n    tickSpacing: number,\r\n  ): [number, boolean] {\r\n    const compressed = Math.floor(tick / tickSpacing); // matches rounding in the code\r\n\r\n    if (lte) {\r\n      const wordPos = compressed >> 8;\r\n      const minimum = (wordPos << 8) * tickSpacing;\r\n\r\n      if (TickList.isBelowSmallest(ticks, tick)) {\r\n        return [minimum, false];\r\n      }\r\n\r\n      const index = TickList.nextInitializedTick(ticks, tick, lte).index;\r\n      const nextInitializedTick = Math.max(minimum, index);\r\n      return [nextInitializedTick, nextInitializedTick === index];\r\n    } else {\r\n      const wordPos = (compressed + 1) >> 8;\r\n      const maximum = ((wordPos + 1) << 8) * tickSpacing - 1;\r\n\r\n      if (this.isAtOrAboveLargest(ticks, tick)) {\r\n        return [maximum, false];\r\n      }\r\n\r\n      const index = this.nextInitializedTick(ticks, tick, lte).index;\r\n      const nextInitializedTick = Math.min(maximum, index);\r\n      return [nextInitializedTick, nextInitializedTick === index];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds the largest tick in the list of ticks that is less than or equal to tick\r\n   * @param ticks list of ticks\r\n   * @param tick tick to find the largest tick that is less than or equal to tick\r\n   * @private\r\n   */\r\n  private static binarySearch(ticks: readonly Tick[], tick: number): number {\r\n    invariant(!this.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST');\r\n\r\n    let l = 0;\r\n    let r = ticks.length - 1;\r\n    let i;\r\n    while (true) {\r\n      i = Math.floor((l + r) / 2);\r\n\r\n      if (\r\n        ticks[i].index <= tick &&\r\n        (i === ticks.length - 1 || ticks[i + 1].index > tick)\r\n      ) {\r\n        return i;\r\n      }\r\n\r\n      if (ticks[i].index < tick) {\r\n        l = i + 1;\r\n      } else {\r\n        r = i - 1;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { BigintIsh } from '../types/BigIntish';\r\nimport JSBI from 'jsbi';\r\n\r\n/**\r\n * Generated method parameters for executing a call.\r\n */\r\nexport interface MethodParameters {\r\n  /**\r\n   * The hex encoded calldata to perform the given operation\r\n   */\r\n  calldata: string | string[];\r\n  /**\r\n   * The amount of ether (wei) to send in hex.\r\n   */\r\n  value: string;\r\n}\r\n\r\n/**\r\n * Converts a big int to a hex string\r\n * @param bigintIsh\r\n * @returns The hex encoded calldata\r\n */\r\nexport function toHex(bigintIsh: BigintIsh) {\r\n  const bigInt = JSBI.BigInt(bigintIsh);\r\n  let hex = bigInt.toString(16);\r\n  if (hex.length % 2 !== 0) {\r\n    hex = `0${hex}`;\r\n  }\r\n  return `0x${hex}`;\r\n}\r\n","import { pack } from '@ethersproject/solidity';\r\nimport { Pool } from '../entities/pool';\r\nimport { Route } from '../entities/route';\r\nimport { Currency, Token } from '../entities';\r\n\r\n/**\r\n * Converts a route to a hex encoded path\r\n * @param route the v3 path to convert to an encoded path\r\n * @param exactOutput whether the route should be encoded in reverse, for making exact output swaps\r\n */\r\nexport function encodeRouteToPath(\r\n  route: Route<Currency, Currency>,\r\n  exactOutput: boolean\r\n): string {\r\n  const firstInputToken: Token = route.input.wrapped;\r\n\r\n  const { path, types } = route.pools.reduce(\r\n    (\r\n      {\r\n        inputToken,\r\n        path,\r\n        types,\r\n      }: { inputToken: Token; path: (string | number)[]; types: string[] },\r\n      pool: Pool,\r\n      index\r\n    ): { inputToken: Token; path: (string | number)[]; types: string[] } => {\r\n      const outputToken: Token = pool.token0.equals(inputToken)\r\n        ? pool.token1\r\n        : pool.token0;\r\n      if (index === 0) {\r\n        return {\r\n          inputToken: outputToken,\r\n          types: ['address', 'address', 'address'],\r\n          path: [inputToken.address, pool.deployer, outputToken.address],\r\n        };\r\n      } else {\r\n        return {\r\n          inputToken: outputToken,\r\n          types: [...types, 'address', 'address'],\r\n          path: [...path, pool.deployer, outputToken.address],\r\n        };\r\n      }\r\n    },\r\n    { inputToken: firstInputToken, path: [], types: [] }\r\n  );\r\n\r\n  return exactOutput\r\n    ? pack(types.reverse(), path.reverse())\r\n    : pack(types, path);\r\n}\r\n","import JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER);\r\n\r\nconst ZERO = JSBI.BigInt(0);\r\nconst ONE = JSBI.BigInt(1);\r\nconst TWO = JSBI.BigInt(2);\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE');\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));\r\n  }\r\n\r\n  let z: JSBI;\r\n  let x: JSBI;\r\n  z = value;\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE);\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x;\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);\r\n  }\r\n  return z;\r\n}\r\n","import JSBI from 'jsbi';\r\nimport { BigintIsh } from '../types/BigIntish';\r\nimport { sqrt } from './sqrt';\r\n\r\n/**\r\n * Returns the sqrt ratio as a Q64.96 corresponding to a given ratio of amount1 and amount0\r\n * @param amount1 The numerator amount i.e., the amount of token1\r\n * @param amount0 The denominator amount i.e., the amount of token0\r\n * @returns The sqrt ratio\r\n */\r\n\r\nexport function encodeSqrtRatioX96(\r\n  amount1: BigintIsh,\r\n  amount0: BigintIsh,\r\n): JSBI {\r\n  const numerator = JSBI.leftShift(JSBI.BigInt(amount1), JSBI.BigInt(192));\r\n  const denominator = JSBI.BigInt(amount0);\r\n  const ratioX192 = JSBI.divide(numerator, denominator);\r\n  return sqrt(ratioX192);\r\n}\r\n","import { BigintIsh } from '../types/BigIntish';\r\nimport JSBI from 'jsbi';\r\nimport { Q96 } from '../constants/internalConstants';\r\n\r\n/**\r\n * Returns an imprecise maximum amount of liquidity received for a given amount of token 0.\r\n * This function is available to accommodate LiquidityAmounts#getLiquidityForAmount0 in the v3 periphery,\r\n * which could be more precise by at least 32 bits by dividing by Q64 instead of Q96 in the intermediate step,\r\n * and shifting the subtracted ratio left by 32 bits. This imprecise calculation will likely be replaced in a future\r\n * v3 router contract.\r\n * @param sqrtRatioAX96 The price at the lower boundary\r\n * @param sqrtRatioBX96 The price at the upper boundary\r\n * @param amount0 The token0 amount\r\n * @returns liquidity for amount0, imprecise\r\n */\r\nfunction maxLiquidityForAmount0Imprecise(\r\n  sqrtRatioAX96: JSBI,\r\n  sqrtRatioBX96: JSBI,\r\n  amount0: BigintIsh,\r\n): JSBI {\r\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n  }\r\n  const intermediate = JSBI.divide(\r\n    JSBI.multiply(sqrtRatioAX96, sqrtRatioBX96),\r\n    Q96,\r\n  );\r\n  return JSBI.divide(\r\n    JSBI.multiply(JSBI.BigInt(amount0), intermediate),\r\n    JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96),\r\n  );\r\n}\r\n\r\n/**\r\n * Returns a precise maximum amount of liquidity received for a given amount of token 0 by dividing by Q64 instead of Q96 in the intermediate step,\r\n * and shifting the subtracted ratio left by 32 bits.\r\n * @param sqrtRatioAX96 The price at the lower boundary\r\n * @param sqrtRatioBX96 The price at the upper boundary\r\n * @param amount0 The token0 amount\r\n * @returns liquidity for amount0, precise\r\n */\r\nfunction maxLiquidityForAmount0Precise(\r\n  sqrtRatioAX96: JSBI,\r\n  sqrtRatioBX96: JSBI,\r\n  amount0: BigintIsh,\r\n): JSBI {\r\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n  }\r\n\r\n  const numerator = JSBI.multiply(\r\n    JSBI.multiply(JSBI.BigInt(amount0), sqrtRatioAX96),\r\n    sqrtRatioBX96,\r\n  );\r\n  const denominator = JSBI.multiply(\r\n    Q96,\r\n    JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96),\r\n  );\r\n\r\n  return JSBI.divide(numerator, denominator);\r\n}\r\n\r\n/**\r\n * Computes the maximum amount of liquidity received for a given amount of token1\r\n * @param sqrtRatioAX96 The price at the lower tick boundary\r\n * @param sqrtRatioBX96 The price at the upper tick boundary\r\n * @param amount1 The token1 amount\r\n * @returns liquidity for amount1\r\n */\r\nfunction maxLiquidityForAmount1(\r\n  sqrtRatioAX96: JSBI,\r\n  sqrtRatioBX96: JSBI,\r\n  amount1: BigintIsh,\r\n): JSBI {\r\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n  }\r\n  return JSBI.divide(\r\n    JSBI.multiply(JSBI.BigInt(amount1), Q96),\r\n    JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96),\r\n  );\r\n}\r\n\r\n/**\r\n * Computes the maximum amount of liquidity received for a given amount of token0, token1,\r\n * and the prices at the tick boundaries.\r\n * @param sqrtRatioCurrentX96 the current price\r\n * @param sqrtRatioAX96 price at lower boundary\r\n * @param sqrtRatioBX96 price at upper boundary\r\n * @param amount0 token0 amount\r\n * @param amount1 token1 amount\r\n * @param useFullPrecision if false, liquidity will be maximized according to what the router can calculate,\r\n * not what core can theoretically support\r\n */\r\nexport function maxLiquidityForAmounts(\r\n  sqrtRatioCurrentX96: JSBI,\r\n  sqrtRatioAX96: JSBI,\r\n  sqrtRatioBX96: JSBI,\r\n  amount0: BigintIsh,\r\n  amount1: BigintIsh,\r\n  useFullPrecision: boolean,\r\n): JSBI {\r\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n  }\r\n\r\n  const maxLiquidityForAmount0 = useFullPrecision\r\n    ? maxLiquidityForAmount0Precise\r\n    : maxLiquidityForAmount0Imprecise;\r\n\r\n  if (JSBI.lessThanOrEqual(sqrtRatioCurrentX96, sqrtRatioAX96)) {\r\n    return maxLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\r\n  } else if (JSBI.lessThan(sqrtRatioCurrentX96, sqrtRatioBX96)) {\r\n    const liquidity0 = maxLiquidityForAmount0(\r\n      sqrtRatioCurrentX96,\r\n      sqrtRatioBX96,\r\n      amount0,\r\n    );\r\n    const liquidity1 = maxLiquidityForAmount1(\r\n      sqrtRatioAX96,\r\n      sqrtRatioCurrentX96,\r\n      amount1,\r\n    );\r\n    return JSBI.lessThan(liquidity0, liquidity1) ? liquidity0 : liquidity1;\r\n  } else {\r\n    return maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant';\r\nimport { TickMath } from './tickMath';\r\n\r\n/**\r\n * Returns the closest tick that is nearest a given tick and usable for the given tick spacing\r\n * @param tick the target tick\r\n * @param tickSpacing the spacing of the pool\r\n */\r\nexport function nearestUsableTick(tick: number, tickSpacing: number) {\r\n  invariant(\r\n    Number.isInteger(tick) && Number.isInteger(tickSpacing),\r\n    'INTEGERS',\r\n  );\r\n  invariant(tickSpacing > 0, 'TICK_SPACING');\r\n  invariant(\r\n    tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK,\r\n    'TICK_BOUND',\r\n  );\r\n  const rounded = Math.round(tick / tickSpacing) * tickSpacing;\r\n  if (rounded < TickMath.MIN_TICK) return rounded + tickSpacing;\r\n  else if (rounded > TickMath.MAX_TICK) return rounded - tickSpacing;\r\n  else return rounded;\r\n}\r\n","import { Price, Token } from '../entities';\r\nimport JSBI from 'jsbi';\r\nimport { Q192 } from '../constants/internalConstants';\r\nimport { encodeSqrtRatioX96 } from './encodeSqrtRatioX96';\r\nimport { TickMath } from './tickMath';\r\n\r\n/**\r\n * Returns a price object corresponding to the input tick and the base/quote token\r\n * Inputs must be tokens because the address order is used to interpret the price represented by the tick\r\n * @param baseToken the base token of the price\r\n * @param quoteToken the quote token of the price\r\n * @param tick the tick for which to return the price\r\n */\r\nexport function tickToPrice(baseToken: Token, quoteToken: Token, tick: number): Price<Token, Token> {\r\n  const sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick)\r\n\r\n  const ratioX192 = JSBI.multiply(sqrtRatioX96, sqrtRatioX96)\r\n\r\n  return baseToken.sortsBefore(quoteToken)\r\n    ? new Price(baseToken, quoteToken, Q192, ratioX192)\r\n    : new Price(baseToken, quoteToken, ratioX192, Q192)\r\n}\r\n\r\n/**\r\n * Returns the first tick for which the given price is greater than or equal to the tick price\r\n * @param price for which to return the closest tick that represents a price less than or equal to the input price,\r\n * i.e. the price of the returned tick is less than or equal to the input price\r\n */\r\nexport function priceToClosestTick(price: Price<Token, Token>): number {\r\n  const sorted = price.baseCurrency.sortsBefore(price.quoteCurrency)\r\n\r\n  const sqrtRatioX96 = sorted\r\n    ? encodeSqrtRatioX96(price.numerator, price.denominator)\r\n    : encodeSqrtRatioX96(price.denominator, price.numerator)\r\n\r\n  let tick = TickMath.getTickAtSqrtRatio(sqrtRatioX96)\r\n  const nextTickPrice = tickToPrice(price.baseCurrency, price.quoteCurrency, tick + 1)\r\n  if (sorted) {\r\n    if (!price.lessThan(nextTickPrice)) {\r\n      tick++\r\n    }\r\n  } else {\r\n    if (!price.greaterThan(nextTickPrice)) {\r\n      tick++\r\n    }\r\n  }\r\n  return tick\r\n}\r\n","export enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT,\r\n}\r\n","import JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { BigintIsh } from '../types/BigIntish';\r\nimport { TickMath } from '../utils';\r\n\r\nexport interface TickConstructorArgs {\r\n  index: number;\r\n  liquidityGross: BigintIsh;\r\n  liquidityNet: BigintIsh;\r\n}\r\n\r\nexport class Tick {\r\n  public readonly index: number;\r\n  public readonly liquidityGross: JSBI;\r\n  public readonly liquidityNet: JSBI;\r\n\r\n  constructor({ index, liquidityGross, liquidityNet }: TickConstructorArgs) {\r\n    invariant(index >= TickMath.MIN_TICK && index <= TickMath.MAX_TICK, 'TICK');\r\n    this.index = index;\r\n    this.liquidityGross = JSBI.BigInt(liquidityGross);\r\n    this.liquidityNet = JSBI.BigInt(liquidityNet);\r\n  }\r\n}\r\n","import { BigintIsh } from '../types/BigIntish';\r\nimport { TickList } from '../utils/tickList';\r\nimport { Tick, TickConstructorArgs } from './tick';\r\nimport { TickDataProvider } from './tickDataProvider';\r\n\r\n/**\r\n * A data provider for ticks that is backed by an in-memory array of ticks.\r\n */\r\nexport class TickListDataProvider implements TickDataProvider {\r\n  private ticks: readonly Tick[];\r\n\r\n  constructor(ticks: (Tick | TickConstructorArgs)[], tickSpacing: number) {\r\n    const ticksMapped: Tick[] = ticks.map(t =>\r\n      t instanceof Tick ? t : new Tick(t),\r\n    );\r\n    TickList.validateList(ticksMapped, tickSpacing);\r\n    this.ticks = ticksMapped;\r\n  }\r\n\r\n  async getTick(\r\n    tick: number,\r\n  ): Promise<{ liquidityNet: BigintIsh; liquidityGross: BigintIsh }> {\r\n    return TickList.getTick(this.ticks, tick);\r\n  }\r\n\r\n  async nextInitializedTickWithinOneWord(\r\n    tick: number,\r\n    lte: boolean,\r\n    tickSpacing: number,\r\n  ): Promise<[number, boolean]> {\r\n    return TickList.nextInitializedTickWithinOneWord(\r\n      this.ticks,\r\n      tick,\r\n      lte,\r\n      tickSpacing,\r\n    );\r\n  }\r\n}\r\n","import { CurrencyAmount, Price, Token } from '.';\r\nimport { BigintIsh } from '../types/BigIntish';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { NEGATIVE_ONE, ONE, Q192, ZERO } from '../constants/internalConstants';\r\nimport { computePoolAddress } from '../utils/computePoolAddress';\r\nimport { LiquidityMath } from '../utils/liquidityMath';\r\nimport { SwapMath } from '../utils/swapMath';\r\nimport { TickMath } from '../utils/tickMath';\r\nimport { Tick, TickConstructorArgs } from './tick';\r\nimport { NoTickDataProvider, TickDataProvider } from './tickDataProvider';\r\nimport { TickListDataProvider } from './tickListDataProvider';\r\nimport { POOL_DEPLOYER_ADDRESSES } from \"../constants\";\r\n\r\ninterface StepComputations {\r\n  sqrtPriceStartX96: JSBI;\r\n  tickNext: number;\r\n  initialized: boolean;\r\n  sqrtPriceNextX96: JSBI;\r\n  amountIn: JSBI;\r\n  amountOut: JSBI;\r\n  feeAmount: JSBI;\r\n}\r\n\r\n/**\r\n * By default, pools will not allow operations that require ticks.\r\n */\r\nconst NO_TICK_DATA_PROVIDER_DEFAULT = new NoTickDataProvider();\r\n\r\n/**\r\n * Represents a V3 pool\r\n */\r\nexport class Pool {\r\n  public readonly token0: Token;\r\n  public readonly token1: Token;\r\n  public readonly fee: number;\r\n  public readonly sqrtRatioX96: JSBI;\r\n  public readonly deployer: string;\r\n  public readonly liquidity: JSBI;\r\n  public readonly tickCurrent: number;\r\n  public readonly tickDataProvider: TickDataProvider;\r\n  public readonly _tickSpacing: number;\r\n\r\n  /**\r\n   * Construct a pool\r\n   * @param tokenA One of the tokens in the pool\r\n   * @param tokenB The other token in the pool\r\n   * @param fee The fee in hundredths of a bips of the input amount of every swap that is collected by the pool\r\n   * @param sqrtRatioX96 The sqrt of the current ratio of amounts of token1 to token0\r\n   * @param liquidity The current value of in range liquidity\r\n   * @param tickCurrent The current tick of the pool\r\n   * @param ticks The current state of the pool ticks or a data provider that can return tick data\r\n   * @param _tickSpacing The spacing between ticks\r\n   */\r\n  public constructor(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    fee: number,\r\n    sqrtRatioX96: BigintIsh,\r\n    deployer: string,\r\n    liquidity: BigintIsh,\r\n    tickCurrent: number,\r\n    _tickSpacing: number,\r\n    ticks:\r\n      | TickDataProvider\r\n      | (Tick | TickConstructorArgs)[] = NO_TICK_DATA_PROVIDER_DEFAULT,\r\n  ) {\r\n    invariant(Number.isInteger(fee) && fee < 1_000_000, 'FEE');\r\n\r\n    const tickCurrentSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent);\r\n    const nextTickSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent + 1);\r\n    invariant(\r\n      JSBI.greaterThanOrEqual(\r\n        JSBI.BigInt(sqrtRatioX96),\r\n        tickCurrentSqrtRatioX96,\r\n      ) &&\r\n      JSBI.lessThanOrEqual(JSBI.BigInt(sqrtRatioX96), nextTickSqrtRatioX96),\r\n      'PRICE_BOUNDS',\r\n    );\r\n    // always create a copy of the list since we want the pool's tick list to be immutable\r\n    [this.token0, this.token1] = tokenA.sortsBefore(tokenB)\r\n      ? [tokenA, tokenB]\r\n      : [tokenB, tokenA];\r\n    this.fee = fee;\r\n    this.sqrtRatioX96 = JSBI.BigInt(sqrtRatioX96);\r\n    this.deployer = deployer;\r\n    this.liquidity = JSBI.BigInt(liquidity);\r\n    this.tickCurrent = tickCurrent;\r\n    this.tickDataProvider = Array.isArray(ticks)\r\n      ? new TickListDataProvider(ticks, _tickSpacing)\r\n      : ticks;\r\n    this._tickSpacing = _tickSpacing;\r\n  }\r\n\r\n  private _token0Price?: Price<Token, Token>;\r\n\r\n  /**\r\n   * Returns the current mid price of the pool in terms of token0, i.e. the ratio of token1 over token0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    return (\r\n      this._token0Price ??\r\n      (this._token0Price = new Price(\r\n        this.token0,\r\n        this.token1,\r\n        Q192,\r\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96),\r\n      ))\r\n    );\r\n  }\r\n\r\n  private _token1Price?: Price<Token, Token>;\r\n\r\n  /**\r\n   * Returns the current mid price of the pool in terms of token1, i.e. the ratio of token0 over token1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    return (\r\n      this._token1Price ??\r\n      (this._token1Price = new Price(\r\n        this.token1,\r\n        this.token0,\r\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96),\r\n        Q192,\r\n      ))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pool.\r\n   */\r\n  public get chainId(): number {\r\n    return this.token0.chainId;\r\n  }\r\n\r\n  public get tickSpacing(): number {\r\n    return this._tickSpacing;\r\n  }\r\n\r\n  public static getAddress(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    initCodeHashManualOverride?: string,\r\n  ): string {\r\n    return computePoolAddress({\r\n      poolDeployer: POOL_DEPLOYER_ADDRESSES[tokenA.chainId],\r\n      tokenA,\r\n      tokenB,\r\n      initCodeHashManualOverride,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token The token to check\r\n   * @returns True if token is either token0 or token\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1);\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pool.\r\n   * @param token The token to return price of\r\n   * @returns The price of the given token, in terms of the other.\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN');\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\r\n  }\r\n\r\n  /**\r\n   * Given an input amount of a token, return the computed output amount, and a pool with state updated after the trade\r\n   * @param inputAmount The input amount for which to quote the output amount\r\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit\r\n   * @returns The output amount and the pool with updated state\r\n   */\r\n  public async getOutputAmount(\r\n    inputAmount: CurrencyAmount<Token>,\r\n    sqrtPriceLimitX96?: JSBI,\r\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\r\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN');\r\n\r\n    const zeroForOne = inputAmount.currency.equals(this.token0);\r\n\r\n    const {\r\n      amountCalculated: outputAmount,\r\n      sqrtRatioX96,\r\n      liquidity,\r\n      tickCurrent,\r\n    } = await this.swap(zeroForOne, inputAmount.quotient, sqrtPriceLimitX96);\r\n    const outputToken = zeroForOne ? this.token1 : this.token0;\r\n    return [\r\n      CurrencyAmount.fromRawAmount(\r\n        outputToken,\r\n        JSBI.multiply(outputAmount, NEGATIVE_ONE),\r\n      ),\r\n      new Pool(\r\n        this.token0,\r\n        this.token1,\r\n        this.fee,\r\n        sqrtRatioX96,\r\n        this.deployer,\r\n        liquidity,\r\n        tickCurrent,\r\n        this.tickSpacing,\r\n        this.tickDataProvider,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Given a desired output amount of a token, return the computed input amount and a pool with state updated after the trade\r\n   * @param outputAmount the output amount for which to quote the input amount\r\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n   * @returns The input amount and the pool with updated state\r\n   */\r\n  public async getInputAmount(\r\n    outputAmount: CurrencyAmount<Token>,\r\n    sqrtPriceLimitX96?: JSBI,\r\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\r\n    invariant(\r\n      outputAmount.currency.isToken &&\r\n      this.involvesToken(outputAmount.currency),\r\n      'TOKEN',\r\n    );\r\n\r\n    const zeroForOne = outputAmount.currency.equals(this.token1);\r\n\r\n    const {\r\n      amountCalculated: inputAmount,\r\n      sqrtRatioX96,\r\n      liquidity,\r\n      tickCurrent,\r\n    } = await this.swap(\r\n      zeroForOne,\r\n      JSBI.multiply(outputAmount.quotient, NEGATIVE_ONE),\r\n      sqrtPriceLimitX96,\r\n    );\r\n    const inputToken = zeroForOne ? this.token0 : this.token1;\r\n    return [\r\n      CurrencyAmount.fromRawAmount(inputToken, inputAmount),\r\n      new Pool(\r\n        this.token0,\r\n        this.token1,\r\n        this.fee,\r\n        sqrtRatioX96,\r\n        this.deployer,\r\n        liquidity,\r\n        tickCurrent,\r\n        this.tickSpacing,\r\n        this.tickDataProvider,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Executes a swap\r\n   * @param zeroForOne Whether the amount in is token0 or token1\r\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\r\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n   * @returns amountCalculated\r\n   * @returns sqrtRatioX96\r\n   * @returns liquidity\r\n   * @returns tickCurrent\r\n   */\r\n  private async swap(\r\n    zeroForOne: boolean,\r\n    amountSpecified: JSBI,\r\n    sqrtPriceLimitX96?: JSBI,\r\n  ): Promise<{\r\n    amountCalculated: JSBI;\r\n    sqrtRatioX96: JSBI;\r\n    liquidity: JSBI;\r\n    tickCurrent: number;\r\n  }> {\r\n    if (!sqrtPriceLimitX96)\r\n      sqrtPriceLimitX96 = zeroForOne\r\n        ? JSBI.add(TickMath.MIN_SQRT_RATIO, ONE)\r\n        : JSBI.subtract(TickMath.MAX_SQRT_RATIO, ONE);\r\n\r\n    if (zeroForOne) {\r\n      invariant(\r\n        JSBI.greaterThan(sqrtPriceLimitX96, TickMath.MIN_SQRT_RATIO),\r\n        'RATIO_MIN',\r\n      );\r\n      invariant(\r\n        JSBI.lessThan(sqrtPriceLimitX96, this.sqrtRatioX96),\r\n        'RATIO_CURRENT',\r\n      );\r\n    } else {\r\n      invariant(\r\n        JSBI.lessThan(sqrtPriceLimitX96, TickMath.MAX_SQRT_RATIO),\r\n        'RATIO_MAX',\r\n      );\r\n      invariant(\r\n        JSBI.greaterThan(sqrtPriceLimitX96, this.sqrtRatioX96),\r\n        'RATIO_CURRENT',\r\n      );\r\n    }\r\n\r\n    const exactInput = JSBI.greaterThanOrEqual(amountSpecified, ZERO);\r\n\r\n    // keep track of swap state\r\n\r\n    const state = {\r\n      amountSpecifiedRemaining: amountSpecified,\r\n      amountCalculated: ZERO,\r\n      sqrtPriceX96: this.sqrtRatioX96,\r\n      tick: this.tickCurrent,\r\n      liquidity: this.liquidity,\r\n    };\r\n\r\n    // start swap while loop\r\n    while (\r\n      JSBI.notEqual(state.amountSpecifiedRemaining, ZERO) &&\r\n      state.sqrtPriceX96 != sqrtPriceLimitX96\r\n    ) {\r\n      const step: Partial<StepComputations> = {};\r\n      step.sqrtPriceStartX96 = state.sqrtPriceX96;\r\n\r\n      // because each iteration of the while loop rounds, we can't optimize this code (relative to the smart contract)\r\n      // by simply traversing to the next available tick, we instead need to exactly replicate\r\n      // tickBitmap.nextInitializedTickWithinOneWord\r\n      [step.tickNext, step.initialized] =\r\n        await this.tickDataProvider.nextInitializedTickWithinOneWord(\r\n          state.tick,\r\n          zeroForOne,\r\n          this.tickSpacing,\r\n        );\r\n\r\n      if (step.tickNext < TickMath.MIN_TICK) {\r\n        step.tickNext = TickMath.MIN_TICK;\r\n      } else if (step.tickNext > TickMath.MAX_TICK) {\r\n        step.tickNext = TickMath.MAX_TICK;\r\n      }\r\n\r\n      step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\r\n      [state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount] =\r\n        SwapMath.computeSwapStep(\r\n          state.sqrtPriceX96,\r\n          (\r\n            zeroForOne\r\n              ? JSBI.lessThan(step.sqrtPriceNextX96, sqrtPriceLimitX96)\r\n              : JSBI.greaterThan(step.sqrtPriceNextX96, sqrtPriceLimitX96)\r\n          )\r\n            ? sqrtPriceLimitX96\r\n            : step.sqrtPriceNextX96,\r\n          state.liquidity,\r\n          state.amountSpecifiedRemaining,\r\n          this.fee,\r\n        );\r\n\r\n      if (exactInput) {\r\n        state.amountSpecifiedRemaining = JSBI.subtract(\r\n          state.amountSpecifiedRemaining,\r\n          JSBI.add(step.amountIn, step.feeAmount),\r\n        );\r\n        state.amountCalculated = JSBI.subtract(\r\n          state.amountCalculated,\r\n          step.amountOut,\r\n        );\r\n      } else {\r\n        state.amountSpecifiedRemaining = JSBI.add(\r\n          state.amountSpecifiedRemaining,\r\n          step.amountOut,\r\n        );\r\n        state.amountCalculated = JSBI.add(\r\n          state.amountCalculated,\r\n          JSBI.add(step.amountIn, step.feeAmount),\r\n        );\r\n      }\r\n\r\n      // TODO\r\n      if (JSBI.equal(state.sqrtPriceX96, step.sqrtPriceNextX96)) {\r\n        // if the tick is initialized, run the tick transition\r\n        if (step.initialized) {\r\n          let liquidityNet = JSBI.BigInt(\r\n            (await this.tickDataProvider.getTick(step.tickNext)).liquidityNet,\r\n          );\r\n          // if we're moving leftward, we interpret liquidityNet as the opposite sign\r\n          // safe because liquidityNet cannot be type(int128).min\r\n          if (zeroForOne)\r\n            liquidityNet = JSBI.multiply(liquidityNet, NEGATIVE_ONE);\r\n\r\n          state.liquidity = LiquidityMath.addDelta(\r\n            state.liquidity,\r\n            liquidityNet,\r\n          );\r\n        }\r\n\r\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\r\n      } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\r\n        // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\r\n        state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\r\n      }\r\n    }\r\n\r\n    return {\r\n      amountCalculated: state.amountCalculated,\r\n      sqrtRatioX96: state.sqrtPriceX96,\r\n      liquidity: state.liquidity,\r\n      tickCurrent: state.tick,\r\n    };\r\n  }\r\n}\r\n","import { CurrencyAmount, Percent, Price, Token } from '.';\r\nimport { BigintIsh } from '../types/BigIntish';\r\nimport { MaxUint256 } from '../constants/internalConstants';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { ZERO } from '../constants/internalConstants';\r\nimport { maxLiquidityForAmounts } from '../utils/maxLiquidityForAmounts';\r\nimport { tickToPrice } from '../utils/priceTickConversions';\r\nimport { SqrtPriceMath } from '../utils/sqrtPriceMath';\r\nimport { TickMath } from '../utils/tickMath';\r\nimport { encodeSqrtRatioX96 } from '../utils/encodeSqrtRatioX96';\r\nimport { Pool } from './pool';\r\n\r\ninterface PositionConstructorArgs {\r\n  pool: Pool;\r\n  tickLower: number;\r\n  tickUpper: number;\r\n  liquidity: BigintIsh;\r\n}\r\n\r\n/**\r\n * Represents a position on a Algebra Pool\r\n */\r\nexport class Position {\r\n  public readonly pool: Pool;\r\n  public readonly tickLower: number;\r\n  public readonly tickUpper: number;\r\n  public readonly liquidity: JSBI;\r\n\r\n  // cached resuts for the getters\r\n  private _token0Amount: CurrencyAmount<Token> | null = null;\r\n  private _token1Amount: CurrencyAmount<Token> | null = null;\r\n\r\n  /**\r\n   * Constructs a position for a given pool with the given liquidity\r\n   * @param pool For which pool the liquidity is assigned\r\n   * @param liquidity The amount of liquidity that is in the position\r\n   * @param tickLower The lower tick of the position\r\n   * @param tickUpper The upper tick of the position\r\n   */\r\n  public constructor({\r\n    pool,\r\n    liquidity,\r\n    tickLower,\r\n    tickUpper,\r\n  }: PositionConstructorArgs) {\r\n    invariant(tickLower < tickUpper, 'TICK_ORDER');\r\n    invariant(\r\n      tickLower >= TickMath.MIN_TICK && tickLower % pool.tickSpacing === 0,\r\n      'TICK_LOWER',\r\n    );\r\n    invariant(\r\n      tickUpper <= TickMath.MAX_TICK && tickUpper % pool.tickSpacing === 0,\r\n      'TICK_UPPER',\r\n    );\r\n\r\n    this.pool = pool;\r\n    this.tickLower = tickLower;\r\n    this.tickUpper = tickUpper;\r\n    this.liquidity = JSBI.BigInt(liquidity);\r\n  }\r\n\r\n  private _mintAmounts: Readonly<{ amount0: JSBI; amount1: JSBI }> | null =\r\n    null;\r\n\r\n  /**\r\n   * Returns the minimum amounts that must be sent in order to mint the amount of liquidity held by the position at\r\n   * the current price for the pool\r\n   */\r\n  public get mintAmounts(): Readonly<{ amount0: JSBI; amount1: JSBI }> {\r\n    if (this._mintAmounts === null) {\r\n      if (this.pool.tickCurrent < this.tickLower) {\r\n        return {\r\n          amount0: SqrtPriceMath.getAmount0Delta(\r\n            TickMath.getSqrtRatioAtTick(this.tickLower),\r\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\r\n            this.liquidity,\r\n            true,\r\n          ),\r\n          amount1: ZERO,\r\n        };\r\n      } else if (this.pool.tickCurrent < this.tickUpper) {\r\n        return {\r\n          amount0: SqrtPriceMath.getAmount0Delta(\r\n            this.pool.sqrtRatioX96,\r\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\r\n            this.liquidity,\r\n            true,\r\n          ),\r\n          amount1: SqrtPriceMath.getAmount1Delta(\r\n            TickMath.getSqrtRatioAtTick(this.tickLower),\r\n            this.pool.sqrtRatioX96,\r\n            this.liquidity,\r\n            true,\r\n          ),\r\n        };\r\n      } else {\r\n        return {\r\n          amount0: ZERO,\r\n          amount1: SqrtPriceMath.getAmount1Delta(\r\n            TickMath.getSqrtRatioAtTick(this.tickLower),\r\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\r\n            this.liquidity,\r\n            true,\r\n          ),\r\n        };\r\n      }\r\n    }\r\n    return this._mintAmounts;\r\n  }\r\n\r\n  /**\r\n   * Returns the price of token0 at the lower tick\r\n   */\r\n  public get token0PriceLower(): Price<Token, Token> {\r\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickLower);\r\n  }\r\n\r\n  /**\r\n   * Returns the price of token0 at the upper tick\r\n   */\r\n  public get token0PriceUpper(): Price<Token, Token> {\r\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickUpper);\r\n  }\r\n\r\n  /**\r\n   * Returns the amount of token0 that this position's liquidity could be burned for at the current pool price\r\n   */\r\n  public get amount0(): CurrencyAmount<Token> {\r\n    if (this._token0Amount === null) {\r\n      if (this.pool.tickCurrent < this.tickLower) {\r\n        this._token0Amount = CurrencyAmount.fromRawAmount(\r\n          this.pool.token0,\r\n          SqrtPriceMath.getAmount0Delta(\r\n            TickMath.getSqrtRatioAtTick(this.tickLower),\r\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\r\n            this.liquidity,\r\n            false,\r\n          ),\r\n        );\r\n      } else if (this.pool.tickCurrent < this.tickUpper) {\r\n        this._token0Amount = CurrencyAmount.fromRawAmount(\r\n          this.pool.token0,\r\n          SqrtPriceMath.getAmount0Delta(\r\n            this.pool.sqrtRatioX96,\r\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\r\n            this.liquidity,\r\n            false,\r\n          ),\r\n        );\r\n      } else {\r\n        this._token0Amount = CurrencyAmount.fromRawAmount(\r\n          this.pool.token0,\r\n          ZERO,\r\n        );\r\n      }\r\n    }\r\n    return this._token0Amount;\r\n  }\r\n\r\n  /**\r\n   * Returns the amount of token1 that this position's liquidity could be burned for at the current pool price\r\n   */\r\n  public get amount1(): CurrencyAmount<Token> {\r\n    if (this._token1Amount === null) {\r\n      if (this.pool.tickCurrent < this.tickLower) {\r\n        this._token1Amount = CurrencyAmount.fromRawAmount(\r\n          this.pool.token1,\r\n          ZERO,\r\n        );\r\n      } else if (this.pool.tickCurrent < this.tickUpper) {\r\n        this._token1Amount = CurrencyAmount.fromRawAmount(\r\n          this.pool.token1,\r\n          SqrtPriceMath.getAmount1Delta(\r\n            TickMath.getSqrtRatioAtTick(this.tickLower),\r\n            this.pool.sqrtRatioX96,\r\n            this.liquidity,\r\n            false,\r\n          ),\r\n        );\r\n      } else {\r\n        this._token1Amount = CurrencyAmount.fromRawAmount(\r\n          this.pool.token1,\r\n          SqrtPriceMath.getAmount1Delta(\r\n            TickMath.getSqrtRatioAtTick(this.tickLower),\r\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\r\n            this.liquidity,\r\n            false,\r\n          ),\r\n        );\r\n      }\r\n    }\r\n    return this._token1Amount;\r\n  }\r\n\r\n  /**\r\n   * Computes the maximum amount of liquidity received for a given amount of token0, token1,\r\n   * and the prices at the tick boundaries.\r\n   * @param pool The pool for which the position should be created\r\n   * @param tickLower The lower tick of the position\r\n   * @param tickUpper The upper tick of the position\r\n   * @param amount0 token0 amount\r\n   * @param amount1 token1 amount\r\n   * @param useFullPrecision If false, liquidity will be maximized according to what the router can calculate,\r\n   * not what core can theoretically support\r\n   * @returns The amount of liquidity for the position\r\n   */\r\n  public static fromAmounts({\r\n    pool,\r\n    tickLower,\r\n    tickUpper,\r\n    amount0,\r\n    amount1,\r\n    useFullPrecision,\r\n  }: {\r\n    pool: Pool;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    amount0: BigintIsh;\r\n    amount1: BigintIsh;\r\n    useFullPrecision: boolean;\r\n  }) {\r\n    const sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower);\r\n    const sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\r\n    return new Position({\r\n      pool,\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity: maxLiquidityForAmounts(\r\n        pool.sqrtRatioX96,\r\n        sqrtRatioAX96,\r\n        sqrtRatioBX96,\r\n        amount0,\r\n        amount1,\r\n        useFullPrecision,\r\n      ),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Computes a position with the maximum amount of liquidity received for a given amount of token0, assuming an unlimited amount of token1\r\n   * @param pool The pool for which the position is created\r\n   * @param tickLower The lower tick\r\n   * @param tickUpper The upper tick\r\n   * @param amount0 The desired amount of token0\r\n   * @param useFullPrecision If true, liquidity will be maximized according to what the router can calculate,\r\n   * not what core can theoretically support\r\n   * @returns The position\r\n   */\r\n  public static fromAmount0({\r\n    pool,\r\n    tickLower,\r\n    tickUpper,\r\n    amount0,\r\n    useFullPrecision,\r\n  }: {\r\n    pool: Pool;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    amount0: BigintIsh;\r\n    useFullPrecision: boolean;\r\n  }) {\r\n    return Position.fromAmounts({\r\n      pool,\r\n      tickLower,\r\n      tickUpper,\r\n      amount0,\r\n      amount1: MaxUint256,\r\n      useFullPrecision,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Computes a position with the maximum amount of liquidity received for a given amount of token1, assuming an unlimited amount of token0\r\n   * @param pool The pool for which the position is created\r\n   * @param tickLower The lower tick\r\n   * @param tickUpper The upper tick\r\n   * @param amount1 The desired amount of token1\r\n   * @returns The position\r\n   */\r\n  public static fromAmount1({\r\n    pool,\r\n    tickLower,\r\n    tickUpper,\r\n    amount1,\r\n  }: {\r\n    pool: Pool;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    amount1: BigintIsh;\r\n  }) {\r\n    // this function always uses full precision,\r\n    return Position.fromAmounts({\r\n      pool,\r\n      tickLower,\r\n      tickUpper,\r\n      amount0: MaxUint256,\r\n      amount1,\r\n      useFullPrecision: true,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the minimum amounts that must be sent in order to safely mint the amount of liquidity held by the position\r\n   * with the given slippage tolerance\r\n   * @param slippageTolerance Tolerance of unfavorable slippage from the current price\r\n   * @returns The amounts, with slippage\r\n   */\r\n  public mintAmountsWithSlippage(\r\n    slippageTolerance: Percent,\r\n  ): Readonly<{ amount0: JSBI; amount1: JSBI }> {\r\n    // get lower/upper prices\r\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } =\r\n      this.ratiosAfterSlippage(slippageTolerance);\r\n\r\n    // construct counterfactual pools\r\n    const poolLower = new Pool(\r\n      this.pool.token0,\r\n      this.pool.token1,\r\n      this.pool.fee,\r\n      sqrtRatioX96Lower,\r\n      this.pool.deployer,\r\n      0 /* liquidity doesn't matter */,\r\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower),\r\n      this.pool.tickSpacing,\r\n    );\r\n    const poolUpper = new Pool(\r\n      this.pool.token0,\r\n      this.pool.token1,\r\n      this.pool.fee,\r\n      sqrtRatioX96Upper,\r\n      this.pool.deployer,\r\n      0 /* liquidity doesn't matter */,\r\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper),\r\n      this.pool.tickSpacing,\r\n    );\r\n\r\n    // because the router is imprecise, we need to calculate the position that will be created (assuming no slippage)\r\n    const positionThatWillBeCreated = Position.fromAmounts({\r\n      pool: this.pool,\r\n      tickLower: this.tickLower,\r\n      tickUpper: this.tickUpper,\r\n      ...this.mintAmounts, // the mint amounts are what will be passed as calldata\r\n      useFullPrecision: false,\r\n    });\r\n\r\n    // we want the smaller amounts...\r\n    // ...which occurs at the upper price for amount0...\r\n    const { amount0 } = new Position({\r\n      pool: poolUpper,\r\n      liquidity: positionThatWillBeCreated.liquidity,\r\n      tickLower: this.tickLower,\r\n      tickUpper: this.tickUpper,\r\n    }).mintAmounts;\r\n    // ...and the lower for amount1\r\n    const { amount1 } = new Position({\r\n      pool: poolLower,\r\n      liquidity: positionThatWillBeCreated.liquidity,\r\n      tickLower: this.tickLower,\r\n      tickUpper: this.tickUpper,\r\n    }).mintAmounts;\r\n\r\n    return { amount0, amount1 };\r\n  }\r\n\r\n  /**\r\n   * Returns the minimum amounts that should be requested in order to safely burn the amount of liquidity held by the\r\n   * position with the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the current price\r\n   * @returns The amounts, with slippage\r\n   */\r\n  public burnAmountsWithSlippage(\r\n    slippageTolerance: Percent,\r\n  ): Readonly<{ amount0: JSBI; amount1: JSBI }> {\r\n    // get lower/upper prices\r\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } =\r\n      this.ratiosAfterSlippage(slippageTolerance);\r\n\r\n    // construct counterfactual pools\r\n    const poolLower = new Pool(\r\n      this.pool.token0,\r\n      this.pool.token1,\r\n      this.pool.fee,\r\n      sqrtRatioX96Lower,\r\n      this.pool.deployer,\r\n      0 /* liquidity doesn't matter */,\r\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower),\r\n      this.pool.tickSpacing,\r\n    );\r\n    const poolUpper = new Pool(\r\n      this.pool.token0,\r\n      this.pool.token1,\r\n      this.pool.fee,\r\n      sqrtRatioX96Upper,\r\n      this.pool.deployer,\r\n      0 /* liquidity doesn't matter */,\r\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper),\r\n      this.pool.tickSpacing,\r\n    );\r\n\r\n    // we want the smaller amounts...\r\n    // ...which occurs at the upper price for amount0...\r\n    const amount0 = new Position({\r\n      pool: poolUpper,\r\n      liquidity: this.liquidity,\r\n      tickLower: this.tickLower,\r\n      tickUpper: this.tickUpper,\r\n    }).amount0;\r\n    // ...and the lower for amount1\r\n    const amount1 = new Position({\r\n      pool: poolLower,\r\n      liquidity: this.liquidity,\r\n      tickLower: this.tickLower,\r\n      tickUpper: this.tickUpper,\r\n    }).amount1;\r\n\r\n    return { amount0: amount0.quotient, amount1: amount1.quotient };\r\n  }\r\n\r\n  /**\r\n   * Returns the lower and upper sqrt ratios if the price 'slips' up to slippage tolerance percentage\r\n   * @param slippageTolerance The amount by which the price can 'slip' before the transaction will revert\r\n   * @returns The sqrt ratios after slippage\r\n   */\r\n  private ratiosAfterSlippage(slippageTolerance: Percent): {\r\n    sqrtRatioX96Lower: JSBI;\r\n    sqrtRatioX96Upper: JSBI;\r\n  } {\r\n    const priceLower = this.pool.token0Price.asFraction.multiply(\r\n      new Percent(1).subtract(slippageTolerance),\r\n    );\r\n    const priceUpper = this.pool.token0Price.asFraction.multiply(\r\n      slippageTolerance.add(1),\r\n    );\r\n    let sqrtRatioX96Lower = encodeSqrtRatioX96(\r\n      priceLower.numerator,\r\n      priceLower.denominator,\r\n    );\r\n    if (JSBI.lessThanOrEqual(sqrtRatioX96Lower, TickMath.MIN_SQRT_RATIO)) {\r\n      sqrtRatioX96Lower = JSBI.add(TickMath.MIN_SQRT_RATIO, JSBI.BigInt(1));\r\n    }\r\n    let sqrtRatioX96Upper = encodeSqrtRatioX96(\r\n      priceUpper.numerator,\r\n      priceUpper.denominator,\r\n    );\r\n    if (JSBI.greaterThanOrEqual(sqrtRatioX96Upper, TickMath.MAX_SQRT_RATIO)) {\r\n      sqrtRatioX96Upper = JSBI.subtract(\r\n        TickMath.MAX_SQRT_RATIO,\r\n        JSBI.BigInt(1),\r\n      );\r\n    }\r\n    return {\r\n      sqrtRatioX96Lower,\r\n      sqrtRatioX96Upper,\r\n    };\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant';\r\n\r\nimport { Currency, Price, Token } from '../entities';\r\nimport { Pool } from './pool';\r\n\r\n/**\r\n * Represents a list of pools through which a swap can occur\r\n * @template TInput The input token\r\n * @template TOutput The output token\r\n */\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pools: Pool[];\r\n  public readonly tokenPath: Token[];\r\n  public readonly input: TInput;\r\n  public readonly output: TOutput;\r\n\r\n  /**\r\n   * Creates an instance of route.\r\n   * @param pools An array of `Pool` objects, ordered by the route the swap will take\r\n   * @param input The input token\r\n   * @param output The output token\r\n   */\r\n  public constructor(pools: Pool[], input: TInput, output: TOutput) {\r\n    invariant(pools.length > 0, 'POOLS');\r\n\r\n    const chainId = pools[0].chainId;\r\n    const allOnSameChain = pools.every(pool => pool.chainId === chainId);\r\n    invariant(allOnSameChain, 'CHAIN_IDS');\r\n\r\n    const wrappedInput = input.wrapped;\r\n    invariant(pools[0].involvesToken(wrappedInput), 'INPUT');\r\n\r\n    invariant(pools[pools.length - 1].involvesToken(output.wrapped), 'OUTPUT');\r\n\r\n    /**\r\n     * Normalizes token0-token1 order and selects the next token/fee step to add to the path\r\n     * */\r\n    const tokenPath: Token[] = [wrappedInput];\r\n    for (const [i, pool] of pools.entries()) {\r\n      const currentInputToken = tokenPath[i];\r\n      invariant(\r\n        currentInputToken.equals(pool.token0) ||\r\n        currentInputToken.equals(pool.token1),\r\n        'PATH',\r\n      );\r\n      const nextToken = currentInputToken.equals(pool.token0)\r\n        ? pool.token1\r\n        : pool.token0;\r\n      tokenPath.push(nextToken);\r\n    }\r\n\r\n    this.pools = pools;\r\n    this.tokenPath = tokenPath;\r\n    this.input = input;\r\n    this.output = output ?? tokenPath[tokenPath.length - 1];\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null;\r\n\r\n  /**\r\n   * Returns the mid price of the route\r\n   */\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice;\r\n\r\n    const price = this.pools.slice(1).reduce(\r\n      ({ nextInput, price }, pool) => {\r\n        return nextInput.equals(pool.token0)\r\n          ? {\r\n            nextInput: pool.token1,\r\n            price: price.multiply(pool.token0Price),\r\n          }\r\n          : {\r\n            nextInput: pool.token0,\r\n            price: price.multiply(pool.token1Price),\r\n          };\r\n      },\r\n      this.pools[0].token0.equals(this.input.wrapped)\r\n        ? {\r\n          nextInput: this.pools[0].token1,\r\n          price: this.pools[0].token0Price,\r\n        }\r\n        : {\r\n          nextInput: this.pools[0].token0,\r\n          price: this.pools[0].token1Price,\r\n        },\r\n    ).price;\r\n\r\n    return (this._midPrice = new Price(\r\n      this.input,\r\n      this.output,\r\n      price.denominator,\r\n      price.numerator,\r\n    ));\r\n  }\r\n\r\n  public get chainId(): number {\r\n    return this.pools[0].chainId;\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant';\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(\r\n  items: T[],\r\n  add: T,\r\n  maxSize: number,\r\n  comparator: (a: T, b: T) => number,\r\n): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO');\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE');\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add);\r\n    return null;\r\n  } else {\r\n    const isFull = items.length === maxSize;\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add;\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length;\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1;\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1;\r\n      } else {\r\n        hi = mid;\r\n      }\r\n    }\r\n    items.splice(lo, 0, add);\r\n    return isFull ? items.pop()! : null;\r\n  }\r\n}\r\n","import {\r\n  Currency,\r\n  CurrencyAmount,\r\n  Fraction,\r\n  Percent,\r\n  Price,\r\n  Token,\r\n} from '../entities';\r\nimport { sortedInsert } from '../utils/sortedInsert';\r\nimport { TradeType } from '../enums/tradeType';\r\nimport invariant from 'tiny-invariant';\r\nimport { ONE, ZERO } from '../constants';\r\nimport { Pool } from './pool';\r\nimport { Route } from './route';\r\n\r\n/**\r\n * Trades comparator, an extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\n * @template TInput The input token, either Ether or an ERC-20\r\n * @template TOutput The output token, either Ether or an ERC-20\r\n * @template TTradeType The trade type, either exact input or exact output\r\n * @param a The first trade to compare\r\n * @param b The second trade to compare\r\n * @returns A sorted ordering for two neighboring elements in a trade array\r\n */\r\nexport function tradeComparator<\r\n  TInput extends Currency,\r\n  TOutput extends Currency,\r\n  TTradeType extends TradeType,\r\n>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>,\r\n) {\r\n  // must have same input and output token for comparison\r\n  invariant(\r\n    a.inputAmount.currency.equals(b.inputAmount.currency),\r\n    'INPUT_CURRENCY',\r\n  );\r\n  invariant(\r\n    a.outputAmount.currency.equals(b.outputAmount.currency),\r\n    'OUTPUT_CURRENCY',\r\n  );\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      // consider the number of hops since each hop costs gas\r\n      const aHops = a.swaps.reduce(\r\n        (total, cur) => total + cur.route.tokenPath.length,\r\n        0,\r\n      );\r\n      const bHops = b.swaps.reduce(\r\n        (total, cur) => total + cur.route.tokenPath.length,\r\n        0,\r\n      );\r\n      return aHops - bHops;\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1;\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number;\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number;\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a set of routes where some percentage of the input is\r\n * split across each route.\r\n *\r\n * Each route has its own set of pools. Pools can not be re-used across routes.\r\n *\r\n * Does not account for slippage, i.e., changes in price environment that can occur between\r\n * the time the trade is submitted and when it is executed.\r\n * @template TInput The input token, either Ether or an ERC-20\r\n * @template TOutput The output token, either Ether or an ERC-20\r\n * @template TTradeType The trade type, either exact input or exact output\r\n */\r\nexport class Trade<\r\n  TInput extends Currency,\r\n  TOutput extends Currency,\r\n  TTradeType extends TradeType,\r\n> {\r\n  /**\r\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\r\n   * make up the trade.\r\n   */\r\n  public readonly swaps: {\r\n    route: Route<TInput, TOutput>;\r\n    inputAmount: CurrencyAmount<TInput>;\r\n    outputAmount: CurrencyAmount<TOutput>;\r\n  }[];\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType;\r\n\r\n  /**\r\n   * Construct a trade by passing in the pre-computed property values\r\n   * @param routes The routes through which the trade occurs\r\n   * @param tradeType The type of trade, exact input or exact output\r\n   */\r\n  private constructor({\r\n    routes,\r\n    tradeType,\r\n  }: {\r\n    routes: {\r\n      route: Route<TInput, TOutput>;\r\n      inputAmount: CurrencyAmount<TInput>;\r\n      outputAmount: CurrencyAmount<TOutput>;\r\n    }[];\r\n    tradeType: TTradeType;\r\n  }) {\r\n    const inputCurrency = routes[0].inputAmount.currency;\r\n    const outputCurrency = routes[0].outputAmount.currency;\r\n    invariant(\r\n      routes.every(({ route }) =>\r\n        inputCurrency.wrapped.equals(route.input.wrapped),\r\n      ),\r\n      'INPUT_CURRENCY_MATCH',\r\n    );\r\n    invariant(\r\n      routes.every(({ route }) =>\r\n        outputCurrency.wrapped.equals(route.output.wrapped),\r\n      ),\r\n      'OUTPUT_CURRENCY_MATCH',\r\n    );\r\n\r\n    const numPools = routes\r\n      .map(({ route }) => route.pools.length)\r\n      .reduce((total, cur) => total + cur, 0);\r\n    const poolAddressSet = new Set<string>();\r\n    for (const { route } of routes) {\r\n      for (const pool of route.pools) {\r\n        poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1));\r\n      }\r\n    }\r\n\r\n    invariant(numPools == poolAddressSet.size, 'POOLS_DUPLICATED');\r\n\r\n    this.swaps = routes;\r\n    this.tradeType = tradeType;\r\n  }\r\n\r\n  /**\r\n   * @deprecated Deprecated in favor of 'swaps' property. If the trade consists of multiple routes\r\n   * this will return an error.\r\n   *\r\n   * When the trade consists of just a single route, this returns the route of the trade,\r\n   * i.e. which pools the trade goes through.\r\n   */\r\n  public get route(): Route<TInput, TOutput> {\r\n    invariant(this.swaps.length == 1, 'MULTIPLE_ROUTES');\r\n    return this.swaps[0].route;\r\n  }\r\n\r\n  /**\r\n   * The cached result of the input amount computation\r\n   * @private\r\n   */\r\n  private _inputAmount: CurrencyAmount<TInput> | undefined;\r\n\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public get inputAmount(): CurrencyAmount<TInput> {\r\n    if (this._inputAmount) {\r\n      return this._inputAmount;\r\n    }\r\n\r\n    const inputCurrency = this.swaps[0].inputAmount.currency;\r\n    const totalInputFromRoutes = this.swaps\r\n      .map(({ inputAmount }) => inputAmount)\r\n      .reduce(\r\n        (total, cur) => total.add(cur),\r\n        CurrencyAmount.fromRawAmount(inputCurrency, 0),\r\n      );\r\n\r\n    this._inputAmount = totalInputFromRoutes;\r\n    return this._inputAmount;\r\n  }\r\n\r\n  /**\r\n   * The cached result of the output amount computation\r\n   * @private\r\n   */\r\n  private _outputAmount: CurrencyAmount<TOutput> | undefined;\r\n\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public get outputAmount(): CurrencyAmount<TOutput> {\r\n    if (this._outputAmount) {\r\n      return this._outputAmount;\r\n    }\r\n\r\n    const outputCurrency = this.swaps[0].outputAmount.currency;\r\n    const totalOutputFromRoutes = this.swaps\r\n      .map(({ outputAmount }) => outputAmount)\r\n      .reduce(\r\n        (total, cur) => total.add(cur),\r\n        CurrencyAmount.fromRawAmount(outputCurrency, 0),\r\n      );\r\n\r\n    this._outputAmount = totalOutputFromRoutes;\r\n    return this._outputAmount;\r\n  }\r\n\r\n  /**\r\n   * The cached result of the computed execution price\r\n   * @private\r\n   */\r\n  private _executionPrice: Price<TInput, TOutput> | undefined;\r\n\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public get executionPrice(): Price<TInput, TOutput> {\r\n    return (\r\n      this._executionPrice ??\r\n      (this._executionPrice = new Price(\r\n        this.inputAmount.currency,\r\n        this.outputAmount.currency,\r\n        this.inputAmount.quotient,\r\n        this.outputAmount.quotient,\r\n      ))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The cached result of the price impact computation\r\n   * @private\r\n   */\r\n  private _priceImpact: Percent | undefined;\r\n\r\n  /**\r\n   * Returns the percent difference between the route's mid price and the price impact\r\n   */\r\n  public get priceImpact(): Percent {\r\n    if (this._priceImpact) {\r\n      return this._priceImpact;\r\n    }\r\n\r\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(\r\n      this.outputAmount.currency,\r\n      0,\r\n    );\r\n    for (const { route, inputAmount } of this.swaps) {\r\n      const midPrice = route.midPrice;\r\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount));\r\n    }\r\n\r\n    const priceImpact = spotOutputAmount\r\n      .subtract(this.outputAmount)\r\n      .divide(spotOutputAmount);\r\n    this._priceImpact = new Percent(\r\n      priceImpact.numerator,\r\n      priceImpact.denominator,\r\n    );\r\n\r\n    return this._priceImpact;\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @template TInput The input token, either Ether or an ERC-20\r\n   * @template TOutput The output token, either Ether or an ERC-20\r\n   * @param route The route of the exact in trade\r\n   * @param amountIn The amount being passed in\r\n   * @returns The exact in trade\r\n   */\r\n  public static async exactIn<\r\n    TInput extends Currency,\r\n    TOutput extends Currency,\r\n  >(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>,\r\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>> {\r\n    return Trade.fromRoute(route, amountIn, TradeType.EXACT_INPUT);\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @template TInput The input token, either Ether or an ERC-20\r\n   * @template TOutput The output token, either Ether or an ERC-20\r\n   * @param route The route of the exact out trade\r\n   * @param amountOut The amount returned by the trade\r\n   * @returns The exact out trade\r\n   */\r\n  public static async exactOut<\r\n    TInput extends Currency,\r\n    TOutput extends Currency,\r\n  >(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>,\r\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>> {\r\n    return Trade.fromRoute(route, amountOut, TradeType.EXACT_OUTPUT);\r\n  }\r\n\r\n  /**\r\n   * Constructs a trade by simulating swaps through the given route\r\n   * @template TInput The input token, either Ether or an ERC-20.\r\n   * @template TOutput The output token, either Ether or an ERC-20.\r\n   * @template TTradeType The type of the trade, either exact in or exact out.\r\n   * @param route route to swap through\r\n   * @param amount the amount specified, either input or output, depending on tradeType\r\n   * @param tradeType whether the trade is an exact input or exact output swap\r\n   * @returns The route\r\n   */\r\n  public static async fromRoute<\r\n    TInput extends Currency,\r\n    TOutput extends Currency,\r\n    TTradeType extends TradeType,\r\n  >(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT\r\n      ? CurrencyAmount<TInput>\r\n      : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType,\r\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\r\n    const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length);\r\n    let inputAmount: CurrencyAmount<TInput>;\r\n    let outputAmount: CurrencyAmount<TOutput>;\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(amount.currency.equals(route.input), 'INPUT');\r\n      amounts[0] = amount.wrapped;\r\n      for (let i = 0; i < route.tokenPath.length - 1; i++) {\r\n        const pool = route.pools[i];\r\n        const [outputAmount] = await pool.getOutputAmount(amounts[i]);\r\n        amounts[i + 1] = outputAmount;\r\n      }\r\n      inputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.input,\r\n        amount.numerator,\r\n        amount.denominator,\r\n      );\r\n      outputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.output,\r\n        amounts[amounts.length - 1].numerator,\r\n        amounts[amounts.length - 1].denominator,\r\n      );\r\n    } else {\r\n      invariant(amount.currency.equals(route.output), 'OUTPUT');\r\n      amounts[amounts.length - 1] = amount.wrapped;\r\n      for (let i = route.tokenPath.length - 1; i > 0; i--) {\r\n        const pool = route.pools[i - 1];\r\n        const [inputAmount] = await pool.getInputAmount(amounts[i]);\r\n        amounts[i - 1] = inputAmount;\r\n      }\r\n      inputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.input,\r\n        amounts[0].numerator,\r\n        amounts[0].denominator,\r\n      );\r\n      outputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.output,\r\n        amount.numerator,\r\n        amount.denominator,\r\n      );\r\n    }\r\n\r\n    return new Trade({\r\n      routes: [{ inputAmount, outputAmount, route }],\r\n      tradeType,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Constructs a trade from routes by simulating swaps\r\n   *\r\n   * @template TInput The input token, either Ether or an ERC-20.\r\n   * @template TOutput The output token, either Ether or an ERC-20.\r\n   * @template TTradeType The type of the trade, either exact in or exact out.\r\n   * @param routes the routes to swap through and how much of the amount should be routed through each\r\n   * @param tradeType whether the trade is an exact input or exact output swap\r\n   * @returns The trade\r\n   */\r\n  public static async fromRoutes<\r\n    TInput extends Currency,\r\n    TOutput extends Currency,\r\n    TTradeType extends TradeType,\r\n  >(\r\n    routes: {\r\n      amount: TTradeType extends TradeType.EXACT_INPUT\r\n      ? CurrencyAmount<TInput>\r\n      : CurrencyAmount<TOutput>;\r\n      route: Route<TInput, TOutput>;\r\n    }[],\r\n    tradeType: TTradeType,\r\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\r\n    const populatedRoutes: {\r\n      route: Route<TInput, TOutput>;\r\n      inputAmount: CurrencyAmount<TInput>;\r\n      outputAmount: CurrencyAmount<TOutput>;\r\n    }[] = [];\r\n\r\n    for (const { route, amount } of routes) {\r\n      const amounts: CurrencyAmount<Token>[] = new Array(\r\n        route.tokenPath.length,\r\n      );\r\n      let inputAmount: CurrencyAmount<TInput>;\r\n      let outputAmount: CurrencyAmount<TOutput>;\r\n\r\n      if (tradeType === TradeType.EXACT_INPUT) {\r\n        invariant(amount.currency.equals(route.input), 'INPUT');\r\n        inputAmount = CurrencyAmount.fromFractionalAmount(\r\n          route.input,\r\n          amount.numerator,\r\n          amount.denominator,\r\n        );\r\n        amounts[0] = CurrencyAmount.fromFractionalAmount(\r\n          route.input.wrapped,\r\n          amount.numerator,\r\n          amount.denominator,\r\n        );\r\n\r\n        for (let i = 0; i < route.tokenPath.length - 1; i++) {\r\n          const pool = route.pools[i];\r\n          const [outputAmount] = await pool.getOutputAmount(amounts[i]);\r\n          amounts[i + 1] = outputAmount;\r\n        }\r\n\r\n        outputAmount = CurrencyAmount.fromFractionalAmount(\r\n          route.output,\r\n          amounts[amounts.length - 1].numerator,\r\n          amounts[amounts.length - 1].denominator,\r\n        );\r\n      } else {\r\n        invariant(amount.currency.equals(route.output), 'OUTPUT');\r\n        outputAmount = CurrencyAmount.fromFractionalAmount(\r\n          route.output,\r\n          amount.numerator,\r\n          amount.denominator,\r\n        );\r\n        amounts[amounts.length - 1] = CurrencyAmount.fromFractionalAmount(\r\n          route.output.wrapped,\r\n          amount.numerator,\r\n          amount.denominator,\r\n        );\r\n\r\n        for (let i = route.tokenPath.length - 1; i > 0; i--) {\r\n          const pool = route.pools[i - 1];\r\n          const [inputAmount] = await pool.getInputAmount(amounts[i]);\r\n          amounts[i - 1] = inputAmount;\r\n        }\r\n\r\n        inputAmount = CurrencyAmount.fromFractionalAmount(\r\n          route.input,\r\n          amounts[0].numerator,\r\n          amounts[0].denominator,\r\n        );\r\n      }\r\n\r\n      populatedRoutes.push({ route, inputAmount, outputAmount });\r\n    }\r\n\r\n    return new Trade({\r\n      routes: populatedRoutes,\r\n      tradeType,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\r\n   * elsewhere and do not have any tick data\r\n   * @template TInput The input token, either Ether or an ERC-20\r\n   * @template TOutput The output token, either Ether or an ERC-20\r\n   * @template TTradeType The type of the trade, either exact in or exact out\r\n   * @param constructorArguments The arguments passed to the trade constructor\r\n   * @returns The unchecked trade\r\n   */\r\n  public static createUncheckedTrade<\r\n    TInput extends Currency,\r\n    TOutput extends Currency,\r\n    TTradeType extends TradeType,\r\n  >(constructorArguments: {\r\n    route: Route<TInput, TOutput>;\r\n    inputAmount: CurrencyAmount<TInput>;\r\n    outputAmount: CurrencyAmount<TOutput>;\r\n    tradeType: TTradeType;\r\n  }): Trade<TInput, TOutput, TTradeType> {\r\n    return new Trade({\r\n      ...constructorArguments,\r\n      routes: [\r\n        {\r\n          inputAmount: constructorArguments.inputAmount,\r\n          outputAmount: constructorArguments.outputAmount,\r\n          route: constructorArguments.route,\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade\r\n   * elsewhere and do not have any tick data\r\n   * @template TInput The input token, either Ether or an ERC-20\r\n   * @template TOutput The output token, either Ether or an ERC-20\r\n   * @template TTradeType The type of the trade, either exact in or exact out\r\n   * @param constructorArguments The arguments passed to the trade constructor\r\n   * @returns The unchecked trade\r\n   */\r\n  public static createUncheckedTradeWithMultipleRoutes<\r\n    TInput extends Currency,\r\n    TOutput extends Currency,\r\n    TTradeType extends TradeType,\r\n  >(constructorArguments: {\r\n    routes: {\r\n      route: Route<TInput, TOutput>;\r\n      inputAmount: CurrencyAmount<TInput>;\r\n      outputAmount: CurrencyAmount<TOutput>;\r\n    }[];\r\n    tradeType: TTradeType;\r\n  }): Trade<TInput, TOutput, TTradeType> {\r\n    return new Trade(constructorArguments);\r\n  }\r\n\r\n  /**\r\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pools the pools to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\r\n   * @param currentPools used in recursion; the current list of pools\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   * @returns The exact in trade\r\n   */\r\n  public static async bestTradeExactIn<\r\n    TInput extends Currency,\r\n    TOutput extends Currency,\r\n  >(\r\n    pools: Pool[],\r\n    currencyAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: TOutput,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPools: Pool[] = [],\r\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = [],\r\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>[]> {\r\n    invariant(pools.length > 0, 'POOLS');\r\n    invariant(maxHops > 0, 'MAX_HOPS');\r\n    invariant(\r\n      currencyAmountIn === nextAmountIn || currentPools.length > 0,\r\n      'INVALID_RECURSION',\r\n    );\r\n\r\n    const amountIn = nextAmountIn.wrapped;\r\n    const tokenOut = currencyOut.wrapped;\r\n    for (let i = 0; i < pools.length; i++) {\r\n      const pool = pools[i];\r\n      // pool irrelevant\r\n      if (\r\n        !pool.token0.equals(amountIn.currency) &&\r\n        !pool.token1.equals(amountIn.currency)\r\n      )\r\n        continue;\r\n\r\n      let amountOut: CurrencyAmount<Token>;\r\n      try {\r\n        [amountOut] = await pool.getOutputAmount(amountIn);\r\n      } catch (_error) {\r\n        const error = _error as any\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue;\r\n        }\r\n        throw error;\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.currency.isToken && amountOut.currency.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          await Trade.fromRoute(\r\n            new Route(\r\n              [...currentPools, pool],\r\n              currencyAmountIn.currency,\r\n              currencyOut,\r\n            ),\r\n            currencyAmountIn,\r\n            TradeType.EXACT_INPUT,\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator,\r\n        );\r\n      } else if (maxHops > 1 && pools.length > 1) {\r\n        const poolsExcludingThisPool = pools\r\n          .slice(0, i)\r\n          .concat(pools.slice(i + 1, pools.length));\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        await Trade.bestTradeExactIn(\r\n          poolsExcludingThisPool,\r\n          currencyAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [...currentPools, pool],\r\n          amountOut,\r\n          bestTrades,\r\n        );\r\n      }\r\n    }\r\n\r\n    return bestTrades;\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pools the pools to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the desired currency amount out\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\r\n   * @param currentPools used in recursion; the current list of pools\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   * @returns The exact out trade\r\n   */\r\n  public static async bestTradeExactOut<\r\n    TInput extends Currency,\r\n    TOutput extends Currency,\r\n  >(\r\n    pools: Pool[],\r\n    currencyIn: TInput,\r\n    currencyAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPools: Pool[] = [],\r\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = [],\r\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[]> {\r\n    invariant(pools.length > 0, 'POOLS');\r\n    invariant(maxHops > 0, 'MAX_HOPS');\r\n    invariant(\r\n      currencyAmountOut === nextAmountOut || currentPools.length > 0,\r\n      'INVALID_RECURSION',\r\n    );\r\n\r\n    const amountOut = nextAmountOut.wrapped;\r\n    const tokenIn = currencyIn.wrapped;\r\n    for (let i = 0; i < pools.length; i++) {\r\n      const pool = pools[i];\r\n      // pool irrelevant\r\n      if (\r\n        !pool.token0.equals(amountOut.currency) &&\r\n        !pool.token1.equals(amountOut.currency)\r\n      )\r\n        continue;\r\n\r\n      let amountIn: CurrencyAmount<Token>;\r\n      try {\r\n        [amountIn] = await pool.getInputAmount(amountOut);\r\n      } catch (_error) {\r\n        // not enough liquidity in this pool\r\n\r\n        const error = _error as any\r\n        if (error.isInsufficientReservesError) {\r\n          continue;\r\n        }\r\n        throw error;\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.currency.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          await Trade.fromRoute(\r\n            new Route(\r\n              [pool, ...currentPools],\r\n              currencyIn,\r\n              currencyAmountOut.currency,\r\n            ),\r\n            currencyAmountOut,\r\n            TradeType.EXACT_OUTPUT,\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator,\r\n        );\r\n      } else if (maxHops > 1 && pools.length > 1) {\r\n        const poolsExcludingThisPool = pools\r\n          .slice(0, i)\r\n          .concat(pools.slice(i + 1, pools.length));\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        await Trade.bestTradeExactOut(\r\n          poolsExcludingThisPool,\r\n          currencyIn,\r\n          currencyAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [pool, ...currentPools],\r\n          amountIn,\r\n          bestTrades,\r\n        );\r\n      }\r\n    }\r\n\r\n    return bestTrades;\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\r\n   * @returns The amount out\r\n   */\r\n  public minimumAmountOut(\r\n    slippageTolerance: Percent,\r\n    amountOut = this.outputAmount,\r\n  ): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE');\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return amountOut;\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(amountOut.quotient).quotient;\r\n      return CurrencyAmount.fromRawAmount(\r\n        amountOut.currency,\r\n        slippageAdjustedAmountOut,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\r\n   * @returns The amount in\r\n   */\r\n  public maximumAmountIn(\r\n    slippageTolerance: Percent,\r\n    amountIn = this.inputAmount,\r\n  ): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE');\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return amountIn;\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .multiply(amountIn.quotient).quotient;\r\n      return CurrencyAmount.fromRawAmount(\r\n        amountIn.currency,\r\n        slippageAdjustedAmountIn,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   * @returns The execution price\r\n   */\r\n  public worstExecutionPrice(\r\n    slippageTolerance: Percent,\r\n  ): Price<TInput, TOutput> {\r\n    return new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.maximumAmountIn(slippageTolerance).quotient,\r\n      this.minimumAmountOut(slippageTolerance).quotient,\r\n    );\r\n  }\r\n}\r\n","export enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP,\r\n}\r\n","//@ts-expect-error\r\nimport _Big from 'big.js';\r\n//@ts-expect-error\r\nimport toFormat from 'toformat';\r\nimport { BigintIsh } from '../types/BigIntish';\r\nimport JSBI from 'jsbi';\r\nimport { Rounding } from '../enums/rounding';\r\nimport _Decimal from 'decimal.js-light';\r\nimport invariant from 'tiny-invariant';\r\n\r\nconst Decimal = toFormat(_Decimal);\r\nconst Big = toFormat(_Big);\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n};\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: 0,\r\n  [Rounding.ROUND_HALF_UP]: 1,\r\n  [Rounding.ROUND_UP]: 3,\r\n};\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI;\r\n  public readonly denominator: JSBI;\r\n\r\n  public constructor(\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh = JSBI.BigInt(1),\r\n  ) {\r\n    this.numerator = JSBI.BigInt(numerator);\r\n    this.denominator = JSBI.BigInt(denominator);\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (\r\n      fractionish instanceof JSBI ||\r\n      typeof fractionish === 'number' ||\r\n      typeof fractionish === 'string'\r\n    )\r\n      return new Fraction(fractionish);\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish)\r\n      return fractionish;\r\n    throw new Error('Could not parse fraction');\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator);\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(\r\n      JSBI.remainder(this.numerator, this.denominator),\r\n      this.denominator,\r\n    );\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator);\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other);\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(\r\n        JSBI.add(this.numerator, otherParsed.numerator),\r\n        this.denominator,\r\n      );\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator),\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other);\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(\r\n        JSBI.subtract(this.numerator, otherParsed.numerator),\r\n        this.denominator,\r\n      );\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator),\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other);\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator),\r\n    );\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other);\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator),\r\n    );\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other);\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator),\r\n    );\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other);\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other);\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator),\r\n    );\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    invariant(\r\n      Number.isInteger(significantDigits),\r\n      `${significantDigits} is not an integer.`,\r\n    );\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`);\r\n\r\n    Decimal.set({\r\n      precision: significantDigits + 1,\r\n      rounding: toSignificantRounding[rounding],\r\n    });\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits);\r\n    return quotient.toFormat(quotient.decimalPlaces(), format);\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    invariant(\r\n      Number.isInteger(decimalPlaces),\r\n      `${decimalPlaces} is not an integer.`,\r\n    );\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\r\n\r\n    Big.DP = decimalPlaces;\r\n    Big.RM = toFixedRounding[rounding];\r\n\r\n    return new Big(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toFormat(decimalPlaces, format);\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator);\r\n  }\r\n}\r\n","//@ts-expect-error\r\nimport _Big from 'big.js';\r\n//@ts-expect-error\r\nimport toFormat from 'toformat';\r\n\r\nimport { BigintIsh } from \"../types/BigIntish\";\r\nimport { Currency } from './Currency';\r\nimport { Fraction } from './Fraction';\r\nimport JSBI from 'jsbi';\r\nimport { MaxUint256 } from '../constants/internalConstants';\r\nimport { Rounding } from '../enums/rounding';\r\nimport { Token } from './Token';\r\nimport invariant from 'tiny-invariant';\r\n\r\nconst Big = toFormat(_Big);\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T;\r\n  public readonly decimalScale: JSBI;\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(\r\n    currency: T,\r\n    rawAmount: BigintIsh,\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount);\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh,\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator);\r\n  }\r\n\r\n  protected constructor(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator?: BigintIsh,\r\n  ) {\r\n    super(numerator, denominator);\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT');\r\n    this.currency = currency;\r\n    this.decimalScale = JSBI.exponentiate(\r\n      JSBI.BigInt(10),\r\n      JSBI.BigInt(currency.decimals),\r\n    );\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY');\r\n    const added = super.add(other);\r\n    return CurrencyAmount.fromFractionalAmount(\r\n      this.currency,\r\n      added.numerator,\r\n      added.denominator,\r\n    );\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY');\r\n    const subtracted = super.subtract(other);\r\n    return CurrencyAmount.fromFractionalAmount(\r\n      this.currency,\r\n      subtracted.numerator,\r\n      subtracted.denominator,\r\n    );\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other);\r\n    return CurrencyAmount.fromFractionalAmount(\r\n      this.currency,\r\n      multiplied.numerator,\r\n      multiplied.denominator,\r\n    );\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other);\r\n    return CurrencyAmount.fromFractionalAmount(\r\n      this.currency,\r\n      divided.numerator,\r\n      divided.denominator,\r\n    );\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super\r\n      .divide(this.decimalScale)\r\n      .toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS');\r\n    return super\r\n      .divide(this.decimalScale)\r\n      .toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals;\r\n    return new Big(this.quotient.toString())\r\n      .div(this.decimalScale.toString())\r\n      .toFormat(format);\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>;\r\n    return CurrencyAmount.fromFractionalAmount(\r\n      this.currency.wrapped,\r\n      this.numerator,\r\n      this.denominator,\r\n    );\r\n  }\r\n}\r\n","import { BigintIsh } from '../types/BigIntish';\r\nimport { Currency } from './Currency';\r\nimport { CurrencyAmount } from './CurrencyAmount';\r\nimport { Fraction } from './Fraction';\r\nimport JSBI from 'jsbi';\r\nimport { Rounding } from '../enums/rounding';\r\nimport invariant from 'tiny-invariant';\r\n\r\nexport class Price<\r\n  TBase extends Currency,\r\n  TQuote extends Currency,\r\n> extends Fraction {\r\n  public readonly baseCurrency: TBase; // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote; // output i.e. numerator\r\n  public readonly scalar: Fraction; // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [\r\n        {\r\n          baseAmount: CurrencyAmount<TBase>;\r\n          quoteAmount: CurrencyAmount<TQuote>;\r\n        },\r\n      ]\r\n  ) {\r\n    let baseCurrency: TBase,\r\n      quoteCurrency: TQuote,\r\n      denominator: BigintIsh,\r\n      numerator: BigintIsh;\r\n\r\n    if (args.length === 4) {\r\n      [baseCurrency, quoteCurrency, denominator, numerator] = args;\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount);\r\n      [baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator,\r\n      ];\r\n    }\r\n    super(numerator, denominator);\r\n\r\n    this.baseCurrency = baseCurrency;\r\n    this.quoteCurrency = quoteCurrency;\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(\r\n      this.quoteCurrency,\r\n      this.baseCurrency,\r\n      this.numerator,\r\n      this.denominator,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(\r\n    other: Price<TQuote, TOtherQuote>,\r\n  ): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN');\r\n    const fraction = super.multiply(other);\r\n    return new Price(\r\n      this.baseCurrency,\r\n      other.quoteCurrency,\r\n      fraction.denominator,\r\n      fraction.numerator,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN');\r\n    const result = super.multiply(currencyAmount);\r\n    return CurrencyAmount.fromFractionalAmount(\r\n      this.quoteCurrency,\r\n      result.numerator,\r\n      result.denominator,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar);\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding?: Rounding,\r\n  ): string {\r\n    return this.adjustedForDecimals.toSignificant(\r\n      significantDigits,\r\n      format,\r\n      rounding,\r\n    );\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = 4,\r\n    format?: object,\r\n    rounding?: Rounding,\r\n  ): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { Currency } from './Currency';\r\nimport { Token } from './Token';\r\nimport invariant from 'tiny-invariant';\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class AbstractCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean;\r\n  /**\r\n   * Returns whether the currency is a token that is usable without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean;\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number;\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number;\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string;\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string;\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(\r\n    chainId: number,\r\n    decimals: number,\r\n    symbol?: string,\r\n    name?: string,\r\n  ) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID');\r\n    invariant(\r\n      decimals >= 0 && decimals < 255 && Number.isInteger(decimals),\r\n      'DECIMALS',\r\n    );\r\n\r\n    this.chainId = chainId;\r\n    this.decimals = decimals;\r\n    this.symbol = symbol;\r\n    this.name = name;\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean;\r\n\r\n  /**\r\n   * Return the wrapped version of this currency.\r\n   */\r\n  public abstract get wrapped(): Token;\r\n}\r\n","import { getAddress } from '@ethersproject/address';\r\n\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    return getAddress(address);\r\n  } catch (error) {\r\n    throw new Error(`${address} is not a valid address.`)\r\n  }\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency';\r\nimport { Currency } from './Currency';\r\nimport invariant from 'tiny-invariant';\r\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress';\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends AbstractCurrency {\r\n  public readonly chainId: number;\r\n  public readonly address: string;\r\n\r\n  public readonly isNative: false = false;\r\n  public readonly isToken: true = true;\r\n\r\n  public constructor(\r\n    chainId: number,\r\n    address: string,\r\n    decimals: number,\r\n    symbol?: string,\r\n    name?: string,\r\n  ) {\r\n    super(chainId, decimals, symbol, name);\r\n    this.chainId = chainId;\r\n    this.address = validateAndParseAddress(address);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return (\r\n      other.isToken &&\r\n      this.chainId === other.chainId &&\r\n      this.address === other.address\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS');\r\n    invariant(this.address !== other.address, 'ADDRESSES');\r\n    return this.address.toLowerCase() < other.address.toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(\r\n  currencyA: Currency,\r\n  currencyB: Currency,\r\n): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB);\r\n  } else if (currencyA instanceof Token) {\r\n    return false;\r\n  } else if (currencyB instanceof Token) {\r\n    return false;\r\n  } else {\r\n    return currencyA === currencyB;\r\n  }\r\n}","import { BigintIsh } from '../types/BigIntish';\r\nimport { Fraction } from './Fraction';\r\nimport JSBI from 'jsbi';\r\nimport { Rounding } from '../enums/rounding';\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100));\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator);\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true;\r\n\r\n  public constructor(\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh = JSBI.BigInt(1),\r\n  ) {\r\n    super(numerator, denominator)\r\n  }\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other));\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other));\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other));\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 5,\r\n    format?: object,\r\n    rounding?: Rounding,\r\n  ): string {\r\n    return super\r\n      .multiply(ONE_HUNDRED)\r\n      .toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = 2,\r\n    format?: object,\r\n    rounding?: Rounding,\r\n  ): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency';\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport default abstract class NativeCurrency extends AbstractCurrency {\r\n  public readonly isNative: true = true;\r\n  public readonly isToken: false = false;\r\n}\r\n","import { ChainId } from '../constants/chainIds';\r\nimport { Token } from './Token';\r\n\r\n/**\r\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\r\n */\r\nexport const WNATIVE: { [chainId: number]: Token } = {\r\n  [ChainId.Holesky]: new Token(\r\n    ChainId.Holesky,\r\n    '0x94373a4919b3240d86ea41593d5eba789fef3848',\r\n    18,\r\n    'WETH',\r\n    'Wrapped ETH'\r\n  ),\r\n  [ChainId.BerachainTestnet]: new Token(\r\n    ChainId.BerachainTestnet,\r\n    '0x7507c1dc16935b82698e4c63f2746a2fcf994df8',\r\n    18,\r\n    'WBERA',\r\n    'Wrapped BERA'\r\n  ),\r\n};\r\n","import { Token } from \"./Token\";\r\nimport { Currency } from \"./Currency\";\r\n\r\nimport NativeCurrency from './NativeCurrency';\r\n\r\nimport invariant from 'tiny-invariant';\r\nimport { WNATIVE } from \"./wnative\";\r\n\r\n/**\r\n * Native is the main usage of a 'native' currency\r\n */\r\nexport class Native extends NativeCurrency {\r\n  protected constructor(chainId: number, symbol: string, name: string) {\r\n    super(chainId, 18, symbol, name);\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId];\r\n    invariant(!!wnative, 'WRAPPED');\r\n    return wnative;\r\n  }\r\n\r\n  private static _naitveCache: { [chainId: number]: Native } = {};\r\n\r\n  public static onChain(chainId: number, symbol: string, name: string): Native {\r\n    return (\r\n      this._naitveCache[chainId] ??\r\n      (this._naitveCache[chainId] = new Native(chainId, symbol, name))\r\n    );\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId;\r\n  }\r\n}\r\n","import { Native } from './Native';\r\nimport { Token } from './Token';\r\nimport { WNATIVE } from './wnative';\r\n\r\nexport class ExtendedNative extends Native {\r\n  private static _cachedNative: { [chainId: number]: ExtendedNative } = {};\r\n\r\n  public get wrapped(): Token {\r\n    return WNATIVE[this.chainId];\r\n  }\r\n\r\n  public static onChain(chainId: number, symbol: string, name: string): ExtendedNative {\r\n    return (\r\n      this._cachedNative[chainId] ??\r\n      (this._cachedNative[chainId] = new ExtendedNative(chainId, symbol, name))\r\n    );\r\n  }\r\n}\r\n","import JSBI from 'jsbi';\r\n\r\nimport { Currency, CurrencyAmount } from \"../entities\";\r\n\r\nconst MIN_NATIVE_CURRENCY_FOR_GAS: JSBI = JSBI.exponentiate(\r\n  JSBI.BigInt(10),\r\n  JSBI.BigInt(16),\r\n); // .01 ETH\r\n\r\n/**\r\n * Given some token amount, return the max that can be spent of it\r\n * @param currencyAmount to return max of\r\n */\r\nexport function maxAmountSpend(\r\n  currencyAmount?: CurrencyAmount<Currency>,\r\n): CurrencyAmount<Currency> | undefined {\r\n  if (!currencyAmount) return undefined;\r\n  if (currencyAmount.currency.isNative) {\r\n    if (\r\n      JSBI.greaterThan(currencyAmount.quotient, MIN_NATIVE_CURRENCY_FOR_GAS)\r\n    ) {\r\n      return CurrencyAmount.fromRawAmount(\r\n        currencyAmount.currency,\r\n        JSBI.subtract(currencyAmount.quotient, MIN_NATIVE_CURRENCY_FOR_GAS),\r\n      );\r\n    } else {\r\n      return CurrencyAmount.fromRawAmount(\r\n        currencyAmount.currency,\r\n        JSBI.BigInt(0),\r\n      );\r\n    }\r\n  }\r\n  return currencyAmount;\r\n}\r\n","function wait(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nfunction waitRandom(min: number, max: number): Promise<void> {\r\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)));\r\n}\r\n\r\n/**\r\n * This error is thrown if the function is cancelled before completing\r\n */\r\nclass CancelledError extends Error {\r\n  public isCancelledError: true = true;\r\n\r\n  constructor() {\r\n    super('Cancelled');\r\n  }\r\n}\r\n\r\n/**\r\n * Throw this error if the function should retry\r\n */\r\nexport class RetryableError extends Error {\r\n  public isRetryableError: true = true;\r\n}\r\n\r\nexport interface RetryOptions {\r\n  n: number;\r\n  minWait: number;\r\n  maxWait: number;\r\n}\r\n\r\n/**\r\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\r\n * @param fn function to retry\r\n * @param n how many times to retry\r\n * @param minWait min wait between retries in ms\r\n * @param maxWait max wait between retries in ms\r\n */\r\nexport function retry<T>(\r\n  fn: () => Promise<T>,\r\n  { n, minWait, maxWait }: RetryOptions,\r\n): { promise: Promise<T>; cancel: () => void } {\r\n  let completed = false;\r\n  let rejectCancelled: (error: Error) => void;\r\n  const promise = new Promise<T>(async (resolve, reject) => {\r\n    rejectCancelled = reject;\r\n    while (true) {\r\n      let result: T;\r\n      try {\r\n        result = await fn();\r\n        if (!completed) {\r\n          resolve(result);\r\n          completed = true;\r\n        }\r\n        break;\r\n      } catch (_error) {\r\n        if (completed) {\r\n          break;\r\n        }\r\n        const error = _error as any\r\n        if (n <= 0 || !error.isRetryableError) {\r\n          reject(error);\r\n          completed = true;\r\n          break;\r\n        }\r\n        n--;\r\n      }\r\n      await waitRandom(minWait, maxWait);\r\n    }\r\n  });\r\n  return {\r\n    promise,\r\n    cancel: () => {\r\n      if (completed) return;\r\n      completed = true;\r\n      rejectCancelled(new CancelledError());\r\n    },\r\n  };\r\n}\r\n","import JSBI from 'jsbi';\r\nimport { Price, Token } from \"../entities\";\r\nimport { TickMath, encodeSqrtRatioX96, nearestUsableTick, priceToClosestTick } from \"../utils\";\r\n\r\nexport function tryParsePrice(\r\n    baseToken?: Token,\r\n    quoteToken?: Token,\r\n    value?: string,\r\n) {\r\n    if (!baseToken || !quoteToken || !value) {\r\n        return undefined;\r\n    }\r\n\r\n    if (!value.match(/^\\d*\\.?\\d+$/)) {\r\n        return undefined;\r\n    }\r\n\r\n    const [whole, fraction] = value.split('.');\r\n\r\n    const decimals = fraction?.length ?? 0;\r\n    const withoutDecimals = JSBI.BigInt((whole ?? '') + (fraction ?? ''));\r\n\r\n    return new Price(\r\n        baseToken,\r\n        quoteToken,\r\n        JSBI.multiply(\r\n            JSBI.BigInt(10 ** decimals),\r\n            JSBI.BigInt(10 ** baseToken.decimals),\r\n        ),\r\n        JSBI.multiply(withoutDecimals, JSBI.BigInt(10 ** quoteToken.decimals)),\r\n    );\r\n}\r\n\r\nexport function tryParseTick(\r\n    baseToken?: Token,\r\n    quoteToken?: Token,\r\n    value?: string,\r\n    tickSpacing?: number,\r\n): number | undefined {\r\n\r\n    if (!baseToken || !quoteToken || !value || !tickSpacing) {\r\n        return undefined;\r\n    }\r\n\r\n    const price = tryParsePrice(baseToken, quoteToken, value);\r\n\r\n    if (!price) {\r\n        return undefined;\r\n    }\r\n\r\n    let tick: number;\r\n\r\n    // check price is within min/max bounds, if outside return min/max\r\n    const sqrtRatioX96 = encodeSqrtRatioX96(price.numerator, price.denominator);\r\n\r\n    if (JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MAX_SQRT_RATIO)) {\r\n        tick = TickMath.MAX_TICK;\r\n    } else if (JSBI.lessThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO)) {\r\n        tick = TickMath.MIN_TICK;\r\n    } else {\r\n        // this function is agnostic to the base, will always return the correct tick\r\n        tick = priceToClosestTick(price);\r\n    }\r\n\r\n    return nearestUsableTick(tick, tickSpacing);\r\n}\r\n","export enum Bound {\r\n    LOWER = 'LOWER',\r\n    UPPER = 'UPPER',\r\n}","export enum Field {\r\n    CURRENCY_A = 'CURRENCY_A',\r\n    CURRENCY_B = 'CURRENCY_B',\r\n}\r\n","export const algebraPositionManagerABI = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_factory',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_WNativeToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_tokenDescriptor_',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_poolDeployer',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'tickOutOfRange',\r\n    type: 'error',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'approved',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'ApprovalForAll',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'amount0',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'amount1',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Collect',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'liquidity',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'amount0',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'amount1',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'DecreaseLiquidity',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'FarmingFailed',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'liquidityDesired',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'actualLiquidity',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'amount0',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'amount1',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'pool',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'IncreaseLiquidity',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'DOMAIN_SEPARATOR',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'NONFUNGIBLE_POSITION_MANAGER_ADMINISTRATOR_ROLE',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'PERMIT_TYPEHASH',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'WNativeToken',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount0Owed',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount1Owed',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'algebraMintCallback',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'approve',\r\n        type: 'bool',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'farmingAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'approveForFarming',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'burn',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'tokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'recipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'amount0Max',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'amount1Max',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct INonfungiblePositionManager.CollectParams',\r\n        name: 'params',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'collect',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount0',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount1',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'token0',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'token1',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'deployer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint160',\r\n        name: 'sqrtPriceX96',\r\n        type: 'uint160',\r\n      },\r\n    ],\r\n    name: 'createAndInitializePoolIfNecessary',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'pool',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'tokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'liquidity',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount0Min',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount1Min',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'deadline',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType:\r\n          'struct INonfungiblePositionManager.DecreaseLiquidityParams',\r\n        name: 'params',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'decreaseLiquidity',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount0',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount1',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'factory',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'farmingApprovals',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'farmingCenterAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'farmingCenter',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'getApproved',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'tokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount0Desired',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount1Desired',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount0Min',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount1Min',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'deadline',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType:\r\n          'struct INonfungiblePositionManager.IncreaseLiquidityParams',\r\n        name: 'params',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'increaseLiquidity',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'liquidity',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount0',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount1',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'isApprovedForAll',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'isApprovedOrOwner',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'token0',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'token1',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'deployer',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'int24',\r\n            name: 'tickLower',\r\n            type: 'int24',\r\n          },\r\n          {\r\n            internalType: 'int24',\r\n            name: 'tickUpper',\r\n            type: 'int24',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount0Desired',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount1Desired',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount0Min',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount1Min',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'recipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'deadline',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct INonfungiblePositionManager.MintParams',\r\n        name: 'params',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'mint',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'liquidity',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount0',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount1',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'data',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'multicall',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'results',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'name',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'ownerOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'deadline',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint8',\r\n        name: 'v',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'r',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 's',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'permit',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'poolDeployer',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'positions',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint88',\r\n        name: 'nonce',\r\n        type: 'uint88',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'token0',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'token1',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'deployer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'int24',\r\n        name: 'tickLower',\r\n        type: 'int24',\r\n      },\r\n      {\r\n        internalType: 'int24',\r\n        name: 'tickUpper',\r\n        type: 'int24',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'liquidity',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'feeGrowthInside0LastX128',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'feeGrowthInside1LastX128',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'tokensOwed0',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'tokensOwed1',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'refundNativeToken',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'safeTransferFrom',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'safeTransferFrom',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'deadline',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint8',\r\n        name: 'v',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'r',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 's',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'selfPermit',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'expiry',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint8',\r\n        name: 'v',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'r',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 's',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'selfPermitAllowed',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'expiry',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint8',\r\n        name: 'v',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'r',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 's',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'selfPermitAllowedIfNecessary',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'deadline',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint8',\r\n        name: 'v',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'r',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 's',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'selfPermitIfNecessary',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'setApprovalForAll',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'newFarmingCenter',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'setFarmingCenter',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'interfaceId',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'supportsInterface',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amountMinimum',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'sweepToken',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'toActive',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'switchFarmingStatus',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'symbol',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'index',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'tokenByIndex',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'tokenFarmedIn',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'farmingCenterAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'index',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'tokenOfOwnerByIndex',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'tokenURI',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amountMinimum',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'unwrapWNativeToken',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    stateMutability: 'payable',\r\n    type: 'receive',\r\n  },\r\n] as const;\r\n","export const algebraSwapRouterABI = [\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"_factory\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"_WNativeToken\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"_poolDeployer\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"constructor\"\r\n    },\r\n    {\r\n        \"inputs\": [],\r\n        \"name\": \"WNativeToken\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"int256\",\r\n                \"name\": \"amount0Delta\",\r\n                \"type\": \"int256\"\r\n            },\r\n            {\r\n                \"internalType\": \"int256\",\r\n                \"name\": \"amount1Delta\",\r\n                \"type\": \"int256\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes\",\r\n                \"name\": \"_data\",\r\n                \"type\": \"bytes\"\r\n            }\r\n        ],\r\n        \"name\": \"algebraSwapCallback\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"components\": [\r\n                    {\r\n                        \"internalType\": \"bytes\",\r\n                        \"name\": \"path\",\r\n                        \"type\": \"bytes\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"recipient\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"deadline\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amountIn\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amountOutMinimum\",\r\n                        \"type\": \"uint256\"\r\n                    }\r\n                ],\r\n                \"internalType\": \"struct ISwapRouter.ExactInputParams\",\r\n                \"name\": \"params\",\r\n                \"type\": \"tuple\"\r\n            }\r\n        ],\r\n        \"name\": \"exactInput\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amountOut\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"components\": [\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"tokenIn\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"tokenOut\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"deployer\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"recipient\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"deadline\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amountIn\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amountOutMinimum\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint160\",\r\n                        \"name\": \"limitSqrtPrice\",\r\n                        \"type\": \"uint160\"\r\n                    }\r\n                ],\r\n                \"internalType\": \"struct ISwapRouter.ExactInputSingleParams\",\r\n                \"name\": \"params\",\r\n                \"type\": \"tuple\"\r\n            }\r\n        ],\r\n        \"name\": \"exactInputSingle\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amountOut\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"components\": [\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"tokenIn\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"tokenOut\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"deployer\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"recipient\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"deadline\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amountIn\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amountOutMinimum\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint160\",\r\n                        \"name\": \"limitSqrtPrice\",\r\n                        \"type\": \"uint160\"\r\n                    }\r\n                ],\r\n                \"internalType\": \"struct ISwapRouter.ExactInputSingleParams\",\r\n                \"name\": \"params\",\r\n                \"type\": \"tuple\"\r\n            }\r\n        ],\r\n        \"name\": \"exactInputSingleSupportingFeeOnTransferTokens\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amountOut\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"components\": [\r\n                    {\r\n                        \"internalType\": \"bytes\",\r\n                        \"name\": \"path\",\r\n                        \"type\": \"bytes\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"recipient\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"deadline\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amountOut\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amountInMaximum\",\r\n                        \"type\": \"uint256\"\r\n                    }\r\n                ],\r\n                \"internalType\": \"struct ISwapRouter.ExactOutputParams\",\r\n                \"name\": \"params\",\r\n                \"type\": \"tuple\"\r\n            }\r\n        ],\r\n        \"name\": \"exactOutput\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amountIn\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"components\": [\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"tokenIn\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"tokenOut\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"deployer\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"recipient\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"deadline\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amountOut\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amountInMaximum\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"internalType\": \"uint160\",\r\n                        \"name\": \"limitSqrtPrice\",\r\n                        \"type\": \"uint160\"\r\n                    }\r\n                ],\r\n                \"internalType\": \"struct ISwapRouter.ExactOutputSingleParams\",\r\n                \"name\": \"params\",\r\n                \"type\": \"tuple\"\r\n            }\r\n        ],\r\n        \"name\": \"exactOutputSingle\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amountIn\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [],\r\n        \"name\": \"factory\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"bytes[]\",\r\n                \"name\": \"data\",\r\n                \"type\": \"bytes[]\"\r\n            }\r\n        ],\r\n        \"name\": \"multicall\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"bytes[]\",\r\n                \"name\": \"results\",\r\n                \"type\": \"bytes[]\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [],\r\n        \"name\": \"poolDeployer\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [],\r\n        \"name\": \"refundNativeToken\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"value\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"deadline\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint8\",\r\n                \"name\": \"v\",\r\n                \"type\": \"uint8\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"r\",\r\n                \"type\": \"bytes32\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"s\",\r\n                \"type\": \"bytes32\"\r\n            }\r\n        ],\r\n        \"name\": \"selfPermit\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"nonce\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"expiry\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint8\",\r\n                \"name\": \"v\",\r\n                \"type\": \"uint8\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"r\",\r\n                \"type\": \"bytes32\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"s\",\r\n                \"type\": \"bytes32\"\r\n            }\r\n        ],\r\n        \"name\": \"selfPermitAllowed\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"nonce\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"expiry\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint8\",\r\n                \"name\": \"v\",\r\n                \"type\": \"uint8\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"r\",\r\n                \"type\": \"bytes32\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"s\",\r\n                \"type\": \"bytes32\"\r\n            }\r\n        ],\r\n        \"name\": \"selfPermitAllowedIfNecessary\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"value\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"deadline\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint8\",\r\n                \"name\": \"v\",\r\n                \"type\": \"uint8\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"r\",\r\n                \"type\": \"bytes32\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"s\",\r\n                \"type\": \"bytes32\"\r\n            }\r\n        ],\r\n        \"name\": \"selfPermitIfNecessary\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amountMinimum\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"recipient\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"name\": \"sweepToken\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amountMinimum\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"recipient\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"feeBips\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"feeRecipient\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"name\": \"sweepTokenWithFee\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amountMinimum\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"recipient\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"name\": \"unwrapWNativeToken\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amountMinimum\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"recipient\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"feeBips\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"feeRecipient\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"name\": \"unwrapWNativeTokenWithFee\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"receive\"\r\n    }\r\n] as const\r\n","export const selfPermitABI = [\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"value\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"deadline\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint8\",\r\n                \"name\": \"v\",\r\n                \"type\": \"uint8\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"r\",\r\n                \"type\": \"bytes32\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"s\",\r\n                \"type\": \"bytes32\"\r\n            }\r\n        ],\r\n        \"name\": \"selfPermit\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"nonce\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"expiry\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint8\",\r\n                \"name\": \"v\",\r\n                \"type\": \"uint8\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"r\",\r\n                \"type\": \"bytes32\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"s\",\r\n                \"type\": \"bytes32\"\r\n            }\r\n        ],\r\n        \"name\": \"selfPermitAllowed\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"nonce\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"expiry\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint8\",\r\n                \"name\": \"v\",\r\n                \"type\": \"uint8\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"r\",\r\n                \"type\": \"bytes32\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"s\",\r\n                \"type\": \"bytes32\"\r\n            }\r\n        ],\r\n        \"name\": \"selfPermitAllowedIfNecessary\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"value\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"deadline\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint8\",\r\n                \"name\": \"v\",\r\n                \"type\": \"uint8\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"r\",\r\n                \"type\": \"bytes32\"\r\n            },\r\n            {\r\n                \"internalType\": \"bytes32\",\r\n                \"name\": \"s\",\r\n                \"type\": \"bytes32\"\r\n            }\r\n        ],\r\n        \"name\": \"selfPermitIfNecessary\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    }\r\n] as const\r\n","import { BigintIsh } from '../types/BigIntish';\r\nimport { Token } from '../entities';\r\nimport { Interface } from '@ethersproject/abi';\r\nimport { toHex } from '../utils';\r\nimport { selfPermitABI } from \"../abis/selfPermit\";\r\n\r\nexport interface StandardPermitArguments {\r\n  v: 0 | 1 | 27 | 28;\r\n  r: string;\r\n  s: string;\r\n  amount: BigintIsh;\r\n  deadline: BigintIsh;\r\n}\r\n\r\nexport interface AllowedPermitArguments {\r\n  v: 0 | 1 | 27 | 28;\r\n  r: string;\r\n  s: string;\r\n  nonce: BigintIsh;\r\n  expiry: BigintIsh;\r\n}\r\n\r\nexport type PermitOptions = StandardPermitArguments | AllowedPermitArguments;\r\n\r\nfunction isAllowedPermit(\r\n  permitOptions: PermitOptions,\r\n): permitOptions is AllowedPermitArguments {\r\n  return 'nonce' in permitOptions;\r\n}\r\n\r\nexport abstract class SelfPermit {\r\n  public static INTERFACE: Interface = new Interface(selfPermitABI);\r\n\r\n  protected static encodePermit(token: Token, options: PermitOptions) {\r\n    return isAllowedPermit(options)\r\n      ? SelfPermit.INTERFACE.encodeFunctionData('selfPermitAllowed', [\r\n        token.address,\r\n        toHex(options.nonce),\r\n        toHex(options.expiry),\r\n        options.v,\r\n        options.r,\r\n        options.s,\r\n      ])\r\n      : SelfPermit.INTERFACE.encodeFunctionData('selfPermit', [\r\n        token.address,\r\n        toHex(options.amount),\r\n        toHex(options.deadline),\r\n        options.v,\r\n        options.r,\r\n        options.s,\r\n      ]);\r\n  }\r\n}\r\n","import { BigintIsh } from '../types/BigIntish';\r\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress';\r\nimport { Currency, CurrencyAmount, Token, Percent } from '../entities';\r\nimport NativeCurrency from '../entities/NativeCurrency';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { Position } from '../entities/position';\r\nimport { ONE, ZERO } from '../constants/internalConstants';\r\nimport { MethodParameters, toHex } from '../utils/calldata';\r\nimport { Interface } from '@ethersproject/abi';\r\nimport { PermitOptions, SelfPermit } from './selfPermit';\r\nimport { ADDRESS_ZERO } from '../constants/constants';\r\nimport { Pool } from '../entities';\r\nimport { algebraPositionManagerABI } from \"../abis/algebraPositionManager\";\r\n\r\nexport const MaxUint128 = toHex(\r\n  JSBI.subtract(\r\n    JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128)),\r\n    JSBI.BigInt(1),\r\n  ),\r\n);\r\n\r\nexport interface MintSpecificOptions {\r\n  /**\r\n   * The account that should receive the minted NFT.\r\n   */\r\n  recipient: string;\r\n\r\n  /**\r\n   * Creates pool if not initialized before mint.\r\n   */\r\n  createPool?: boolean;\r\n}\r\n\r\nexport interface IncreaseSpecificOptions {\r\n  /**\r\n   * Indicates the ID of the position to increase liquidity for.\r\n   */\r\n  tokenId: BigintIsh;\r\n}\r\n\r\n/**\r\n * Options for producing the calldata to add liquidity.\r\n */\r\nexport interface CommonAddLiquidityOptions {\r\n  /**\r\n   * How much the pool price is allowed to move.\r\n   */\r\n  slippageTolerance: Percent;\r\n\r\n  /**\r\n   * When the transaction expires, in epoch seconds.\r\n   */\r\n  deadline: BigintIsh;\r\n\r\n  /**\r\n   * Pool Deployer address. ZERO_ADDRESS if base pool\r\n   */\r\n  deployer?: string;\r\n\r\n  /**\r\n   * Whether to spend ether. If true, one of the pool tokens must be WETH, by default false\r\n   */\r\n  useNative?: NativeCurrency;\r\n\r\n  /**\r\n   * The optional permit parameters for spending token0\r\n   */\r\n  token0Permit?: PermitOptions;\r\n\r\n  /**\r\n   * The optional permit parameters for spending token1\r\n   */\r\n  token1Permit?: PermitOptions;\r\n}\r\n\r\nexport type MintOptions = CommonAddLiquidityOptions & MintSpecificOptions;\r\nexport type IncreaseOptions = CommonAddLiquidityOptions &\r\n  IncreaseSpecificOptions;\r\n\r\nexport type AddLiquidityOptions = MintOptions | IncreaseOptions;\r\n\r\n// type guard\r\nfunction isMint(options: AddLiquidityOptions): options is MintOptions {\r\n  return Object.keys(options).some(k => k === 'recipient');\r\n}\r\n\r\nexport interface CollectOptions {\r\n  /**\r\n   * Indicates the ID of the position to collect for.\r\n   */\r\n  tokenId: BigintIsh;\r\n\r\n  /**\r\n   * Expected value of tokensOwed0, including as-of-yet-unaccounted-for fees/liquidity value to be burned\r\n   */\r\n  expectedCurrencyOwed0: CurrencyAmount<Currency>;\r\n\r\n  /**\r\n   * Expected value of tokensOwed1, including as-of-yet-unaccounted-for fees/liquidity value to be burned\r\n   */\r\n  expectedCurrencyOwed1: CurrencyAmount<Currency>;\r\n\r\n  /**\r\n   * The account that should receive the tokens.\r\n   */\r\n  recipient: string;\r\n}\r\n\r\nexport interface NFTPermitOptions {\r\n  v: 0 | 1 | 27 | 28;\r\n  r: string;\r\n  s: string;\r\n  deadline: BigintIsh;\r\n  spender: string;\r\n}\r\n\r\n/**\r\n * Options for producing the calldata to exit a position.\r\n */\r\nexport interface RemoveLiquidityOptions {\r\n  /**\r\n   * The ID of the token to exit\r\n   */\r\n  tokenId: BigintIsh;\r\n\r\n  /**\r\n   * The percentage of position liquidity to exit.\r\n   */\r\n  liquidityPercentage: Percent;\r\n\r\n  /**\r\n   * How much the pool price is allowed to move.\r\n   */\r\n  slippageTolerance: Percent;\r\n\r\n  /**\r\n   * When the transaction expires, in epoch seconds.\r\n   */\r\n  deadline: BigintIsh;\r\n\r\n  /**\r\n   * Whether the NFT should be burned if the entire position is being exited, by default false.\r\n   */\r\n  burnToken?: boolean;\r\n\r\n  /**\r\n   * The optional permit of the token ID being exited, in case the exit transaction is being sent by an account that does not own the NFT\r\n   */\r\n  permit?: NFTPermitOptions;\r\n\r\n  /**\r\n   * Parameters to be passed on to collect\r\n   */\r\n  collectOptions: Omit<CollectOptions, 'tokenId'>;\r\n}\r\n\r\nexport abstract class NonfungiblePositionManager extends SelfPermit {\r\n  public static INTERFACE: Interface = new Interface(\r\n    algebraPositionManagerABI,\r\n  );\r\n\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {\r\n    super();\r\n  }\r\n\r\n  public static createCallParameters(pool: Pool, deployer?: string): MethodParameters {\r\n    return {\r\n      calldata: this.encodeCreate(pool, deployer || pool.deployer),\r\n      value: toHex(0),\r\n    };\r\n  }\r\n\r\n  public static addCallParameters(\r\n    position: Position,\r\n    options: AddLiquidityOptions,\r\n  ): { calldata: string[], value: string } {\r\n    invariant(JSBI.greaterThan(position.liquidity, ZERO), 'ZERO_LIQUIDITY');\r\n\r\n    const calldatas: string[] = [];\r\n\r\n    // get amounts\r\n    const { amount0: amount0Desired, amount1: amount1Desired } =\r\n      position.mintAmounts;\r\n\r\n    // adjust for\r\n    const minimumAmounts = position.mintAmountsWithSlippage(\r\n      options.slippageTolerance,\r\n    );\r\n\r\n    const amount0Min = toHex(minimumAmounts.amount0);\r\n    const amount1Min = toHex(minimumAmounts.amount1);\r\n\r\n    const deadline = toHex(options.deadline);\r\n\r\n    // create pool if needed\r\n    if (isMint(options) && options.createPool) {\r\n      calldatas.push(this.encodeCreate(position.pool, options.deployer || position.pool.deployer));\r\n    }\r\n\r\n    // permits if necessary\r\n    if (options.token0Permit) {\r\n      calldatas.push(\r\n        NonfungiblePositionManager.encodePermit(\r\n          position.pool.token0,\r\n          options.token0Permit,\r\n        ),\r\n      );\r\n    }\r\n\r\n    if (options.token1Permit) {\r\n      calldatas.push(\r\n        NonfungiblePositionManager.encodePermit(\r\n          position.pool.token1,\r\n          options.token1Permit,\r\n        ),\r\n      );\r\n    }\r\n\r\n    // mint\r\n    if (isMint(options)) {\r\n      const recipient: string = validateAndParseAddress(options.recipient);\r\n\r\n      calldatas.push(\r\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('mint', [\r\n          {\r\n            token0: position.pool.token0.address,\r\n            token1: position.pool.token1.address,\r\n            deployer: position.pool.deployer,\r\n            tickLower: position.tickLower,\r\n            tickUpper: position.tickUpper,\r\n            amount0Desired: toHex(amount0Desired),\r\n            amount1Desired: toHex(amount1Desired),\r\n            amount0Min,\r\n            amount1Min,\r\n            recipient,\r\n            deadline,\r\n          },\r\n        ]),\r\n      );\r\n    } else {\r\n      // increase\r\n\r\n      calldatas.push(\r\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData(\r\n          'increaseLiquidity',\r\n          [\r\n            {\r\n              tokenId: toHex(options.tokenId),\r\n              amount0Desired: toHex(amount0Desired),\r\n              amount1Desired: toHex(amount1Desired),\r\n              amount0Min,\r\n              amount1Min,\r\n              deadline,\r\n            },\r\n          ],\r\n        ),\r\n      );\r\n    }\r\n\r\n    let value: string = toHex(0);\r\n\r\n    if (options.useNative) {\r\n      const wrapped = options.useNative.wrapped;\r\n      invariant(\r\n        position.pool.token0.equals(wrapped) ||\r\n        position.pool.token1.equals(wrapped),\r\n        'NO_WNative',\r\n      );\r\n\r\n      const wrappedValue = position.pool.token0.equals(wrapped)\r\n        ? amount0Desired\r\n        : amount1Desired;\r\n\r\n      // we only need to refund if we're actually sending ETH\r\n      if (JSBI.greaterThan(wrappedValue, ZERO)) {\r\n        calldatas.push(\r\n          NonfungiblePositionManager.INTERFACE.encodeFunctionData(\r\n            'refundNativeToken',\r\n          ),\r\n        );\r\n      }\r\n\r\n      value = toHex(wrappedValue);\r\n    }\r\n\r\n    return {\r\n      calldata: calldatas,\r\n      value,\r\n    };\r\n  }\r\n\r\n  public static collectCallParameters(\r\n    options: CollectOptions,\r\n  ): { calldata: string[], value: string } {\r\n    const calldatas: string[] =\r\n      NonfungiblePositionManager.encodeCollect(options);\r\n\r\n    return {\r\n      calldata: calldatas,\r\n      value: toHex(0),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Produces the calldata for completely or partially exiting a position\r\n   * @param position The position to exit\r\n   * @param options Additional information necessary for generating the calldata\r\n   * @returns The call parameters\r\n   */\r\n  public static removeCallParameters(\r\n    position: Position,\r\n    options: RemoveLiquidityOptions,\r\n  ): { calldata: string[], value: string } {\r\n    const calldatas: string[] = [];\r\n\r\n    const deadline = toHex(options.deadline);\r\n    const tokenId = toHex(options.tokenId);\r\n\r\n    // construct a partial position with a percentage of liquidity\r\n    const partialPosition = new Position({\r\n      pool: position.pool,\r\n      liquidity: options.liquidityPercentage.multiply(position.liquidity)\r\n        .quotient,\r\n      tickLower: position.tickLower,\r\n      tickUpper: position.tickUpper,\r\n    });\r\n    invariant(\r\n      JSBI.greaterThan(partialPosition.liquidity, ZERO),\r\n      'ZERO_LIQUIDITY',\r\n    );\r\n\r\n    // slippage-adjusted underlying amounts\r\n    const { amount0: amount0Min, amount1: amount1Min } =\r\n      partialPosition.burnAmountsWithSlippage(options.slippageTolerance);\r\n\r\n    if (options.permit) {\r\n      calldatas.push(\r\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\r\n          validateAndParseAddress(options.permit.spender),\r\n          tokenId,\r\n          toHex(options.permit.deadline),\r\n          options.permit.v,\r\n          options.permit.r,\r\n          options.permit.s,\r\n        ]),\r\n      );\r\n    }\r\n\r\n    // remove liquidity\r\n    calldatas.push(\r\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData(\r\n        'decreaseLiquidity',\r\n        [\r\n          {\r\n            tokenId,\r\n            liquidity: toHex(partialPosition.liquidity),\r\n            amount0Min: toHex(amount0Min),\r\n            amount1Min: toHex(amount1Min),\r\n            deadline,\r\n          },\r\n        ],\r\n      ),\r\n    );\r\n\r\n    const { expectedCurrencyOwed0, expectedCurrencyOwed1, ...rest } =\r\n      options.collectOptions;\r\n    calldatas.push(\r\n      ...NonfungiblePositionManager.encodeCollect({\r\n        tokenId: options.tokenId,\r\n        // add the underlying value to the expected currency already owed\r\n        expectedCurrencyOwed0: expectedCurrencyOwed0.add(\r\n          CurrencyAmount.fromRawAmount(\r\n            expectedCurrencyOwed0.currency,\r\n            amount0Min,\r\n          ),\r\n        ),\r\n        expectedCurrencyOwed1: expectedCurrencyOwed1.add(\r\n          CurrencyAmount.fromRawAmount(\r\n            expectedCurrencyOwed1.currency,\r\n            amount1Min,\r\n          ),\r\n        ),\r\n        ...rest,\r\n      }),\r\n    );\r\n\r\n    if (options.liquidityPercentage.equalTo(ONE)) {\r\n      if (options.burnToken) {\r\n        calldatas.push(\r\n          NonfungiblePositionManager.INTERFACE.encodeFunctionData('burn', [\r\n            tokenId,\r\n          ]),\r\n        );\r\n      }\r\n    } else {\r\n      invariant(options.burnToken !== true, 'CANNOT_BURN');\r\n    }\r\n\r\n    return {\r\n      calldata: calldatas,\r\n      value: toHex(0),\r\n    };\r\n  }\r\n\r\n  private static encodeCreate(pool: Pool, deployer: string): string {\r\n    return NonfungiblePositionManager.INTERFACE.encodeFunctionData(\r\n      'createAndInitializePoolIfNecessary',\r\n      [pool.token0.address, pool.token1.address, deployer, toHex(pool.sqrtRatioX96)],\r\n    );\r\n  }\r\n\r\n  private static encodeCollect(options: CollectOptions): string[] {\r\n    const calldatas: string[] = [];\r\n\r\n    const tokenId = toHex(options.tokenId);\r\n\r\n    const involvesETH =\r\n      options.expectedCurrencyOwed0.currency.isNative ||\r\n      options.expectedCurrencyOwed1.currency.isNative;\r\n\r\n    const recipient = validateAndParseAddress(options.recipient);\r\n\r\n    // collect\r\n    calldatas.push(\r\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('collect', [\r\n        {\r\n          tokenId,\r\n          recipient: involvesETH ? ADDRESS_ZERO : recipient,\r\n          amount0Max: MaxUint128,\r\n          amount1Max: MaxUint128,\r\n        },\r\n      ]),\r\n    );\r\n\r\n    if (involvesETH) {\r\n      const ethAmount = options.expectedCurrencyOwed0.currency.isNative\r\n        ? options.expectedCurrencyOwed0.quotient\r\n        : options.expectedCurrencyOwed1.quotient;\r\n      const token = options.expectedCurrencyOwed0.currency.isNative\r\n        ? (options.expectedCurrencyOwed1.currency as Token)\r\n        : (options.expectedCurrencyOwed0.currency as Token);\r\n      const tokenAmount = options.expectedCurrencyOwed0.currency.isNative\r\n        ? options.expectedCurrencyOwed1.quotient\r\n        : options.expectedCurrencyOwed0.quotient;\r\n\r\n      calldatas.push(\r\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData(\r\n          'unwrapWNativeToken',\r\n          [toHex(ethAmount), recipient],\r\n        ),\r\n      );\r\n      calldatas.push(\r\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('sweepToken', [\r\n          token.address,\r\n          toHex(tokenAmount),\r\n          recipient,\r\n        ]),\r\n      );\r\n    }\r\n\r\n    return calldatas;\r\n  }\r\n}\r\n","import { Interface } from '@ethersproject/abi';\r\nimport { BigintIsh } from '../types/BigIntish';\r\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress';\r\nimport { Currency, CurrencyAmount, Percent } from '../entities';\r\nimport { TradeType } from '../enums/tradeType';\r\nimport invariant from 'tiny-invariant';\r\nimport { Trade } from '../entities/trade';\r\nimport { ADDRESS_ZERO } from '../constants/constants';\r\nimport { PermitOptions, SelfPermit } from './selfPermit';\r\nimport { encodeRouteToPath } from '../utils';\r\nimport { MethodParameters, toHex } from '../utils/calldata';\r\nimport { algebraSwapRouterABI } from \"../abis/algebraSwapRouter\";\r\n\r\nexport interface FeeOptions {\r\n  /**\r\n   * The percent of the output that will be taken as a fee.\r\n   */\r\n  fee: Percent;\r\n\r\n  /**\r\n   * The recipient of the fee.\r\n   */\r\n  recipient: string;\r\n}\r\n\r\n/**\r\n * Options for producing the arguments to send calls to the router.\r\n */\r\nexport interface SwapOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  slippageTolerance: Percent;\r\n\r\n  /**\r\n   * The account that should receive the output.\r\n   */\r\n  recipient: string;\r\n\r\n  /**\r\n   * When the transaction expires, in epoch seconds.\r\n   */\r\n  deadline: BigintIsh;\r\n\r\n  /**\r\n   * Deflationary token.\r\n   */\r\n  feeOnTransfer: boolean;\r\n\r\n  /**\r\n   * The optional permit parameters for spending the input.\r\n   */\r\n  inputTokenPermit?: PermitOptions;\r\n\r\n  /**\r\n   * The optional price limit for the trade.\r\n   */\r\n  sqrtPriceLimitX96?: BigintIsh;\r\n\r\n  /**\r\n   * Optional information for taking a fee on output.\r\n   */\r\n  fee?: FeeOptions;\r\n}\r\n\r\n/**\r\n * Represents the SwapRouter, and has static methods for helping execute trades.\r\n */\r\nexport abstract class SwapRouter extends SelfPermit {\r\n  public static INTERFACE: Interface = new Interface(algebraSwapRouterABI);\r\n\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trades:\r\n      | Trade<Currency, Currency, TradeType>\r\n      | Trade<Currency, Currency, TradeType>[],\r\n    options: SwapOptions,\r\n  ): MethodParameters {\r\n    if (!Array.isArray(trades)) {\r\n      trades = [trades];\r\n    }\r\n\r\n    const sampleTrade = trades[0];\r\n    const tokenIn = sampleTrade.inputAmount.currency.wrapped;\r\n    const tokenOut = sampleTrade.outputAmount.currency.wrapped;\r\n\r\n    // All trades should have the same starting and ending token.\r\n    invariant(\r\n      trades.every(trade => trade.inputAmount.currency.wrapped.equals(tokenIn)),\r\n      'TOKEN_IN_DIFF',\r\n    );\r\n    invariant(\r\n      trades.every(trade =>\r\n        trade.outputAmount.currency.wrapped.equals(tokenOut),\r\n      ),\r\n      'TOKEN_OUT_DIFF',\r\n    );\r\n\r\n    const calldatas: string[] = [];\r\n\r\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(\r\n      trades[0].inputAmount.currency,\r\n      0,\r\n    );\r\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(\r\n      trades[0].outputAmount.currency,\r\n      0,\r\n    );\r\n\r\n    const totalAmountOut: CurrencyAmount<Currency> = trades.reduce(\r\n      (sum, trade) =>\r\n        sum.add(trade.minimumAmountOut(options.slippageTolerance)),\r\n      ZERO_OUT,\r\n    );\r\n\r\n    // flag for whether a refund needs to happen\r\n    const mustRefund =\r\n      sampleTrade.inputAmount.currency.isNative &&\r\n      sampleTrade.tradeType === TradeType.EXACT_OUTPUT;\r\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative;\r\n    // flags for whether funds should be send first to the router\r\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative;\r\n    const routerMustCustody = outputIsNative || !!options.fee;\r\n\r\n    const totalValue: CurrencyAmount<Currency> = inputIsNative\r\n      ? trades.reduce(\r\n        (sum, trade) =>\r\n          sum.add(trade.maximumAmountIn(options.slippageTolerance)),\r\n        ZERO_IN,\r\n      )\r\n      : ZERO_IN;\r\n\r\n    // encode permit if necessary\r\n    if (options.inputTokenPermit) {\r\n      invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT');\r\n      calldatas.push(\r\n        SwapRouter.encodePermit(\r\n          sampleTrade.inputAmount.currency,\r\n          options.inputTokenPermit,\r\n        ),\r\n      );\r\n    }\r\n\r\n    const recipient: string = validateAndParseAddress(options.recipient);\r\n    const deadline = toHex(options.deadline);\r\n\r\n    for (const trade of trades) {\r\n      for (const { route, inputAmount, outputAmount } of trade.swaps) {\r\n        const amountIn: string = toHex(\r\n          trade.maximumAmountIn(options.slippageTolerance, inputAmount)\r\n            .quotient,\r\n        );\r\n        const amountOut: string = toHex(\r\n          trade.minimumAmountOut(options.slippageTolerance, outputAmount)\r\n            .quotient,\r\n        );\r\n\r\n        // flag for whether the trade is single hop or not\r\n        const singleHop = route.pools.length === 1;\r\n\r\n        if (singleHop) {\r\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n            const exactInputSingleParams = {\r\n              tokenIn: route.tokenPath[0].address,\r\n              tokenOut: route.tokenPath[1].address,\r\n              deployer: ADDRESS_ZERO,\r\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n              deadline,\r\n              amountIn,\r\n              amountOutMinimum: amountOut,\r\n              limitSqrtPrice: toHex(options.sqrtPriceLimitX96 ?? 0),\r\n            };\r\n            calldatas.push(\r\n              SwapRouter.INTERFACE.encodeFunctionData(\r\n                options.feeOnTransfer && !inputIsNative\r\n                  ? 'exactInputSingleSupportingFeeOnTransferTokens'\r\n                  : 'exactInputSingle',\r\n                [exactInputSingleParams],\r\n              ),\r\n            );\r\n          } else {\r\n            const exactOutputSingleParams = {\r\n              tokenIn: route.tokenPath[0].address,\r\n              tokenOut: route.tokenPath[1].address,\r\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n              deployer: ADDRESS_ZERO,\r\n              deadline,\r\n              amountOut,\r\n              amountInMaximum: amountIn,\r\n              limitSqrtPrice: toHex(options.sqrtPriceLimitX96 ?? 0),\r\n            };\r\n\r\n            calldatas.push(\r\n              SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [\r\n                exactOutputSingleParams,\r\n              ]),\r\n            );\r\n          }\r\n        } else {\r\n          invariant(\r\n            options.sqrtPriceLimitX96 === undefined,\r\n            'MULTIHOP_PRICE_LIMIT',\r\n          );\r\n\r\n          const path: string = encodeRouteToPath(\r\n            route,\r\n            trade.tradeType === TradeType.EXACT_OUTPUT,\r\n          );\r\n\r\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n            const exactInputParams = {\r\n              path,\r\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n              deadline,\r\n              amountIn,\r\n              amountOutMinimum: amountOut,\r\n            };\r\n\r\n            calldatas.push(\r\n              SwapRouter.INTERFACE.encodeFunctionData('exactInput', [\r\n                exactInputParams,\r\n              ]),\r\n            );\r\n          } else {\r\n            const exactOutputParams = {\r\n              path,\r\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n              deadline,\r\n              amountOut,\r\n              amountInMaximum: amountIn,\r\n            };\r\n\r\n            calldatas.push(\r\n              SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [\r\n                exactOutputParams,\r\n              ]),\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // unwrap\r\n    if (routerMustCustody) {\r\n      if (!!options.fee) {\r\n        const feeRecipient: string = validateAndParseAddress(\r\n          options.fee.recipient,\r\n        );\r\n        const fee = toHex(options.fee.fee.multiply(10_000).quotient);\r\n        if (outputIsNative) {\r\n          calldatas.push(\r\n            SwapRouter.INTERFACE.encodeFunctionData(\r\n              'unwrapWNativeTokenWithFee',\r\n              [toHex(totalAmountOut.quotient), recipient, fee, feeRecipient],\r\n            ),\r\n          );\r\n        } else {\r\n          calldatas.push(\r\n            SwapRouter.INTERFACE.encodeFunctionData('sweepTokenWithFee', [\r\n              sampleTrade.outputAmount.currency.wrapped.address,\r\n              toHex(totalAmountOut.quotient),\r\n              recipient,\r\n              fee,\r\n              feeRecipient,\r\n            ]),\r\n          );\r\n        }\r\n      } else {\r\n        calldatas.push(\r\n          SwapRouter.INTERFACE.encodeFunctionData('unwrapWNativeToken', [\r\n            toHex(totalAmountOut.quotient),\r\n            recipient,\r\n          ]),\r\n        );\r\n      }\r\n    }\r\n\r\n    // refund\r\n    if (mustRefund) {\r\n      calldatas.push(\r\n        SwapRouter.INTERFACE.encodeFunctionData('refundNativeToken'),\r\n      );\r\n    }\r\n\r\n    return {\r\n      calldata: calldatas,\r\n      value: toHex(totalValue.quotient),\r\n    };\r\n  }\r\n}\r\n","import { Price, Token } from '../entities';\r\nimport { tickToPrice } from './priceTickConversions';\r\n\r\nexport function getTickToPrice(\r\n  baseToken?: Token,\r\n  quoteToken?: Token,\r\n  tick?: number,\r\n): Price<Token, Token> | undefined {\r\n  if (!baseToken || !quoteToken || typeof tick !== 'number') {\r\n    return undefined;\r\n  }\r\n  return tickToPrice(baseToken, quoteToken, tick);\r\n}\r\n","import JSBI from 'jsbi';\r\n\r\nimport { Currency, CurrencyAmount } from \"../entities\";\r\n\r\nimport { parseUnits } from '@ethersproject/units';\r\n\r\nexport const parseBalance = (value: string, decimals = 18) => {\r\n  return parseUnits(value || '0', decimals);\r\n};\r\n\r\n// try to parse a user entered amount for a given token\r\nexport function tryParseAmount<T extends Currency>(\r\n  value?: string,\r\n  currency?: T,\r\n): CurrencyAmount<T> | undefined {\r\n  if (!value || !currency) {\r\n    return undefined;\r\n  }\r\n  try {\r\n    const typedValueParsed = parseUnits(value, currency?.decimals).toString();\r\n    if (typedValueParsed !== '0') {\r\n      return CurrencyAmount.fromRawAmount(\r\n        currency,\r\n        JSBI.BigInt(typedValueParsed),\r\n      );\r\n    }\r\n  } catch (error) {\r\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\r\n    console.debug(`Failed to parse input amount: \"${value}\"`, error);\r\n  }\r\n  // necessary for all paths to return a value\r\n  return undefined;\r\n}\r\n","import { Currency, Native } from \"../entities\";\r\nimport { WNATIVE } from \"../entities/wnative\";\r\n\r\nexport function unwrappedToken(currency: Currency): Currency {\r\n    if (currency.isNative) return currency;\r\n\r\n    if (currency.equals(WNATIVE[currency.chainId])) return Native.onChain(currency.chainId, currency.symbol ?? '', currency.name ?? '');\r\n\r\n    return currency;\r\n}\r\n"],"names":["NEGATIVE_ONE","JSBI","BigInt","ZERO","ONE","Q96","exponentiate","Q192","MaxUint256","ChainId","Holesky","BerachainTestnet","ADDRESS_ZERO","POOL_DEPLOYER_ADDRESSES","_POOL_DEPLOYER_ADDRES","POOL_INIT_CODE_HASH","_POOL_INIT_CODE_HASH","computePoolAddress","_ref","tokenA","tokenB","initCodeHashManualOverride","poolDeployer","_ref2","sortsBefore","getCreate2Address","chainId","keccak256","defaultAbiCoder","encode","address","LiquidityMath","addDelta","x","y","lessThan","subtract","multiply","add","FullMath","mulDivRoundingUp","a","b","denominator","product","result","divide","notEqual","remainder","MaxUint160","multiplyIn256","bitwiseAnd","SqrtPriceMath","getAmount0Delta","sqrtRatioAX96","sqrtRatioBX96","liquidity","roundUp","greaterThan","numerator1","leftShift","numerator2","getAmount1Delta","getNextSqrtPriceFromInput","sqrtPX96","amountIn","zeroForOne","invariant","this","getNextSqrtPriceFromAmount0RoundingUp","getNextSqrtPriceFromAmount1RoundingDown","getNextSqrtPriceFromOutput","amountOut","amount","equal","sum","greaterThanOrEqual","quotient","lessThanOrEqual","MAX_FEE","SwapMath","computeSwapStep","sqrtRatioCurrentX96","sqrtRatioTargetX96","amountRemaining","feePips","returnValues","exactIn","amountRemainingLessFee","sqrtRatioNextX96","max","feeAmount","TWO","POWERS_OF_2","map","pow","mostSignificantBit","_step","msb","_iterator","_createForOfIteratorHelperLoose","done","_step$value","value","power","signedRightShift","mulShift","val","mulBy","Q32","TickMath","getSqrtRatioAtTick","tick","MIN_TICK","MAX_TICK","Number","isInteger","absTick","ratio","getTickAtSqrtRatio","sqrtRatioX96","MIN_SQRT_RATIO","MAX_SQRT_RATIO","r","sqrtRatioX128","log_2","i","f","bitwiseOr","log_sqrt10001","tickLow","toNumber","tickHigh","NoTickDataProvider","_proto","prototype","getTick","_getTick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_tick","wrap","_context","prev","next","Error","ERROR_MESSAGE","stop","_x","apply","arguments","nextInitializedTickWithinOneWord","_nextInitializedTickWithinOneWord","_callee2","_lte","_tickSpacing","_context2","_x2","_x3","_x4","isSorted","list","comparator","length","tickComparator","index","TickList","validateList","ticks","tickSpacing","every","reduce","accumulator","liquidityNet","isBelowSmallest","isAtOrAboveLargest","binarySearch","nextInitializedTick","lte","compressed","Math","floor","minimum","maximum","min","l","toHex","bigintIsh","hex","toString","encodeRouteToPath","route","exactOutput","_route$pools$reduce","pools","pool","inputToken","path","types","outputToken","token0","equals","token1","deployer","concat","input","wrapped","pack","reverse","MAX_SAFE_INTEGER","encodeSqrtRatioX96","amount1","amount0","numerator","sqrt","z","maxLiquidityForAmount0Imprecise","intermediate","maxLiquidityForAmount0Precise","maxLiquidityForAmount1","_ref3","maxLiquidityForAmounts","useFullPrecision","_ref4","maxLiquidityForAmount0","liquidity0","liquidity1","nearestUsableTick","rounded","round","tickToPrice","baseToken","quoteToken","ratioX192","Price","priceToClosestTick","price","sorted","baseCurrency","quoteCurrency","nextTickPrice","TradeType","Tick","liquidityGross","TickListDataProvider","ticksMapped","t","abrupt","NO_TICK_DATA_PROVIDER_DEFAULT","Pool","fee","tickCurrent","tickCurrentSqrtRatioX96","nextTickSqrtRatioX96","tickDataProvider","Array","isArray","getAddress","involvesToken","token","priceOf","token0Price","token1Price","getOutputAmount","_getOutputAmount","inputAmount","sqrtPriceLimitX96","_yield$this$swap","currency","swap","sent","CurrencyAmount","fromRawAmount","amountCalculated","getInputAmount","_getInputAmount","outputAmount","_yield$this$swap2","isToken","_swap","_callee3","amountSpecified","exactInput","state","step","_yield$this$tickDataP","_SwapMath$computeSwap","_context3","amountSpecifiedRemaining","sqrtPriceX96","sqrtPriceStartX96","tickNext","initialized","sqrtPriceNextX96","t0","t1","call","_x5","_x6","_x7","_createClass","key","get","_this$_token0Price","_token0Price","_this$_token1Price","_token1Price","Position","tickLower","tickUpper","fromAmounts","fromAmount0","fromAmount1","mintAmountsWithSlippage","slippageTolerance","_this$ratiosAfterSlip","ratiosAfterSlippage","sqrtRatioX96Upper","sqrtRatioX96Lower","poolLower","poolUpper","positionThatWillBeCreated","_extends","mintAmounts","burnAmountsWithSlippage","_this$ratiosAfterSlip2","priceLower","asFraction","Percent","priceUpper","_mintAmounts","_token0Amount","_token1Amount","Route","output","wrappedInput","tokenPath","entries","currentInputToken","nextToken","push","_midPrice","slice","nextInput","sortedInsert","items","maxSize","isFull","lo","hi","mid","splice","pop","tradeComparator","equalTo","swaps","total","cur","Rounding","Trade","routes","tradeType","inputCurrency","outputCurrency","numPools","poolAddressSet","Set","_step2","_iterator2","size","_exactIn","fromRoute","EXACT_INPUT","exactOut","_exactOut","EXACT_OUTPUT","_fromRoute","amounts","_i","_pool","fromFractionalAmount","fromRoutes","_fromRoutes","_callee4","populatedRoutes","_iterator3","_step3","_step3$value","_i2","_pool2","_context4","_x8","_x9","createUncheckedTrade","constructorArguments","createUncheckedTradeWithMultipleRoutes","bestTradeExactIn","_bestTradeExactIn","_callee5","currencyAmountIn","currencyOut","_temp","currentPools","nextAmountIn","bestTrades","maxNumResults","_ref5$maxNumResults","maxHops","_ref5$maxHops","_ref5","tokenOut","_context5","error","isInsufficientInputAmountError","t2","t3","t4","t5","poolsExcludingThisPool","_x10","_x11","_x12","_x13","_x14","_x15","_x16","bestTradeExactOut","_bestTradeExactOut","_callee6","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref6$maxNumResults","_ref6$maxHops","_ref6","tokenIn","_context6","isInsufficientReservesError","_x17","_x18","_x19","_x20","_x21","_x22","_x23","minimumAmountOut","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","worstExecutionPrice","_inputAmount","totalInputFromRoutes","_ref7","_outputAmount","totalOutputFromRoutes","_ref8","_this$_executionPrice","_executionPrice","_priceImpact","_step4","spotOutputAmount","_iterator4","_step4$value","midPrice","quote","priceImpact","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","tryParseFraction","fractionish","other","otherParsed","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_Fraction","_this","decimalScale","decimals","_inheritsLoose","rawAmount","added","subtracted","multiplied","divided","toExact","_len","args","_key","quoteAmount","baseAmount","scalar","fraction","currencyAmount","adjustedForDecimals","AbstractCurrency","symbol","name","isSafeInteger","validateAndParseAddress","Token","_AbstractCurrency","toLowerCase","ONE_HUNDRED","toPercent","NativeCurrency","WNATIVE","_WNATIVE","Native","_NativeCurrency","onChain","_this$_naitveCache$ch","_naitveCache","isNative","wnative","ExtendedNative","_Native","_this$_cachedNative$c","_cachedNative","MIN_NATIVE_CURRENCY_FOR_GAS","waitRandom","ms","random","Promise","resolve","setTimeout","CancelledError","_Error","_wrapNativeSuper","RetryableError","_Error2","_this2","tryParsePrice","match","_value$split","split","whole","_fraction$length","withoutDecimals","Bound","Field","algebraPositionManagerABI","inputs","internalType","type","stateMutability","anonymous","indexed","outputs","components","algebraSwapRouterABI","selfPermitABI","SelfPermit","encodePermit","options","INTERFACE","encodeFunctionData","nonce","expiry","v","s","deadline","Interface","MaxUint128","isMint","Object","keys","some","k","NonfungiblePositionManager","_SelfPermit","createCallParameters","calldata","encodeCreate","addCallParameters","position","calldatas","_position$mintAmounts","amount0Desired","amount1Desired","minimumAmounts","amount0Min","amount1Min","createPool","token0Permit","token1Permit","recipient","tokenId","useNative","wrappedValue","collectCallParameters","encodeCollect","removeCallParameters","partialPosition","liquidityPercentage","_partialPosition$burn","permit","spender","_options$collectOptio","collectOptions","expectedCurrencyOwed0","expectedCurrencyOwed1","rest","_objectWithoutPropertiesLoose","_excluded","burnToken","involvesETH","amount0Max","amount1Max","tokenAmount","SwapRouter","swapCallParameters","trades","sampleTrade","trade","ZERO_IN","ZERO_OUT","totalAmountOut","mustRefund","inputIsNative","outputIsNative","routerMustCustody","totalValue","inputTokenPermit","_step2$value","_options$sqrtPriceLim","exactInputSingleParams","amountOutMinimum","limitSqrtPrice","feeOnTransfer","_options$sqrtPriceLim2","exactOutputSingleParams","amountInMaximum","undefined","feeRecipient","customPoolDeployer","mainPoolDeployer","from","salt","initCodeHash","prefix","addressBytes","keccak256BytesOnly","toUtf8Bytes","zeroPad","currencyA","currencyB","parseUnits","fn","rejectCancelled","n","minWait","maxWait","completed","promise","reject","isRetryableError","cancel","typedValueParsed","console","debug","_currency$symbol","_currency$name"],"mappings":"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N+C,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGV/C,KAAM,OACNmD,QAAS,GACTH,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEO,WAAY,CACV,CACEN,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,YACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,aACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,aACN+C,KAAM,YAGVD,aAAc,mDACd9C,KAAM,SACN+C,KAAM,UAGV/C,KAAM,UACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGVC,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,SACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,SACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,WACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,eACN+C,KAAM,YAGV/C,KAAM,qCACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,OACN+C,KAAM,YAGVC,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEO,WAAY,CACV,CACEN,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,YACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,aACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,aACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,WACN+C,KAAM,YAGVD,aACE,6DACF9C,KAAM,SACN+C,KAAM,UAGV/C,KAAM,oBACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGVC,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,GACR7C,KAAM,UACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,GACN+C,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGV/C,KAAM,mBACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,uBACN+C,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACR7C,KAAM,gBACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,GACN+C,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGV/C,KAAM,cACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,GACN+C,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEO,WAAY,CACV,CACEN,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,iBACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,iBACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,aACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,aACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,WACN+C,KAAM,YAGVD,aACE,6DACF9C,KAAM,SACN+C,KAAM,UAGV/C,KAAM,oBACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,YACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGVC,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,QACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,WACN+C,KAAM,YAGV/C,KAAM,mBACNmD,QAAS,CACP,CACEL,aAAc,OACd9C,KAAM,GACN+C,KAAM,SAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGV/C,KAAM,oBACNmD,QAAS,CACP,CACEL,aAAc,OACd9C,KAAM,GACN+C,KAAM,SAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEO,WAAY,CACV,CACEN,aAAc,UACd9C,KAAM,SACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,SACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,WACN+C,KAAM,WAER,CACED,aAAc,QACd9C,KAAM,YACN+C,KAAM,SAER,CACED,aAAc,QACd9C,KAAM,YACN+C,KAAM,SAER,CACED,aAAc,UACd9C,KAAM,iBACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,iBACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,aACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,aACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,YACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,WACN+C,KAAM,YAGVD,aAAc,gDACd9C,KAAM,SACN+C,KAAM,UAGV/C,KAAM,OACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,YACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGVC,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,OACN+C,KAAM,YAGV/C,KAAM,YACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGVC,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,GACR7C,KAAM,OACNmD,QAAS,CACP,CACEL,aAAc,SACd9C,KAAM,GACN+C,KAAM,WAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGV/C,KAAM,UACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,GACN+C,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,WACN+C,KAAM,WAER,CACED,aAAc,QACd9C,KAAM,IACN+C,KAAM,SAER,CACED,aAAc,UACd9C,KAAM,IACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,IACN+C,KAAM,YAGV/C,KAAM,SACNmD,QAAS,GACTH,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,GACR7C,KAAM,eACNmD,QAAS,CACP,CACEL,aAAc,UACd9C,KAAM,GACN+C,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGV/C,KAAM,YACNmD,QAAS,CACP,CACEL,aAAc,SACd9C,KAAM,QACN+C,KAAM,UAER,CACED,aAAc,UACd9C,KAAM,WACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,SACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,SACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,WACN+C,KAAM,WAER,CACED,aAAc,QACd9C,KAAM,YACN+C,KAAM,SAER,CACED,aAAc,QACd9C,KAAM,YACN+C,KAAM,SAER,CACED,aAAc,UACd9C,KAAM,YACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,2BACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,2BACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,cACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,cACN+C,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACR7C,KAAM,oBACNmD,QAAS,GACTH,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,OACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,KACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,UACN+C,KAAM,YAGV/C,KAAM,mBACNmD,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,OACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,KACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,UACN+C,KAAM,WAER,CACED,aAAc,QACd9C,KAAM,OACN+C,KAAM,UAGV/C,KAAM,mBACNmD,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,QACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,QACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,WACN+C,KAAM,WAER,CACED,aAAc,QACd9C,KAAM,IACN+C,KAAM,SAER,CACED,aAAc,UACd9C,KAAM,IACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,IACN+C,KAAM,YAGV/C,KAAM,aACNmD,QAAS,GACTH,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,QACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,QACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,SACN+C,KAAM,WAER,CACED,aAAc,QACd9C,KAAM,IACN+C,KAAM,SAER,CACED,aAAc,UACd9C,KAAM,IACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,IACN+C,KAAM,YAGV/C,KAAM,oBACNmD,QAAS,GACTH,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACd9C,KAAM,QACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,QACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,SACN+C,KAAM,WAER,CACED,aAAc,QACd9C,KAAM,IACN+C,KAAM,SAER,CACED,aAAc,UACd9C,KAAM,IACN+C,KAAM,WAER,CACED,aAAc,UACd9C,KAAM,IACN+C,KAAM,YAGV/C,KAAM,+BACNmD,QAAS,GACT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"}