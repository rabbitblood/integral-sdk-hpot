{"code":"function wait(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\nfunction waitRandom(min, max) {\r\n    return wait(min + Math.round(Math.random() * Math.max(0, max - min)));\r\n}\r\n/**\r\n * This error is thrown if the function is cancelled before completing\r\n */\r\nclass CancelledError extends Error {\r\n    constructor() {\r\n        super('Cancelled');\r\n        this.isCancelledError = true;\r\n    }\r\n}\r\n/**\r\n * Throw this error if the function should retry\r\n */\r\nexport class RetryableError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.isRetryableError = true;\r\n    }\r\n}\r\n/**\r\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\r\n * @param fn function to retry\r\n * @param n how many times to retry\r\n * @param minWait min wait between retries in ms\r\n * @param maxWait max wait between retries in ms\r\n */\r\nexport function retry(fn, { n, minWait, maxWait }) {\r\n    let completed = false;\r\n    let rejectCancelled;\r\n    const promise = new Promise(async (resolve, reject) => {\r\n        rejectCancelled = reject;\r\n        while (true) {\r\n            let result;\r\n            try {\r\n                result = await fn();\r\n                if (!completed) {\r\n                    resolve(result);\r\n                    completed = true;\r\n                }\r\n                break;\r\n            }\r\n            catch (_error) {\r\n                if (completed) {\r\n                    break;\r\n                }\r\n                const error = _error;\r\n                if (n <= 0 || !error.isRetryableError) {\r\n                    reject(error);\r\n                    completed = true;\r\n                    break;\r\n                }\r\n                n--;\r\n            }\r\n            await waitRandom(minWait, maxWait);\r\n        }\r\n    });\r\n    return {\r\n        promise,\r\n        cancel: () => {\r\n            if (completed)\r\n                return;\r\n            completed = true;\r\n            rejectCancelled(new CancelledError());\r\n        },\r\n    };\r\n}\r\n//# sourceMappingURL=retry.js.map","references":[],"map":"{\"version\":3,\"file\":\"retry.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/functions/retry.ts\"],\"names\":[],\"mappings\":\"AAAA,SAAS,IAAI,CAAC,EAAU;IACtB,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AACzD,CAAC;AAED,SAAS,UAAU,CAAC,GAAW,EAAE,GAAW;IAC1C,OAAO,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC;AAED;;GAEG;AACH,MAAM,cAAe,SAAQ,KAAK;IAGhC;QACE,KAAK,CAAC,WAAW,CAAC,CAAC;QAHd,qBAAgB,GAAS,IAAI,CAAC;IAIrC,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,cAAe,SAAQ,KAAK;IAAzC;;QACS,qBAAgB,GAAS,IAAI,CAAC;IACvC,CAAC;CAAA;AAQD;;;;;;GAMG;AACH,MAAM,UAAU,KAAK,CACnB,EAAoB,EACpB,EAAE,CAAC,EAAE,OAAO,EAAE,OAAO,EAAgB;IAErC,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,eAAuC,CAAC;IAC5C,MAAM,OAAO,GAAG,IAAI,OAAO,CAAI,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;QACvD,eAAe,GAAG,MAAM,CAAC;QACzB,OAAO,IAAI,EAAE;YACX,IAAI,MAAS,CAAC;YACd,IAAI;gBACF,MAAM,GAAG,MAAM,EAAE,EAAE,CAAC;gBACpB,IAAI,CAAC,SAAS,EAAE;oBACd,OAAO,CAAC,MAAM,CAAC,CAAC;oBAChB,SAAS,GAAG,IAAI,CAAC;iBAClB;gBACD,MAAM;aACP;YAAC,OAAO,MAAM,EAAE;gBACf,IAAI,SAAS,EAAE;oBACb,MAAM;iBACP;gBACD,MAAM,KAAK,GAAG,MAAa,CAAA;gBAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;oBACrC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,SAAS,GAAG,IAAI,CAAC;oBACjB,MAAM;iBACP;gBACD,CAAC,EAAE,CAAC;aACL;YACD,MAAM,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SACpC;IACH,CAAC,CAAC,CAAC;IACH,OAAO;QACL,OAAO;QACP,MAAM,EAAE,GAAG,EAAE;YACX,IAAI,SAAS;gBAAE,OAAO;YACtB,SAAS,GAAG,IAAI,CAAC;YACjB,eAAe,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;QACxC,CAAC;KACF,CAAC;AACJ,CAAC\"}"}
