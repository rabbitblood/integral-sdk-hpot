{"code":"//@ts-expect-error\r\nimport _Big from 'big.js';\r\n//@ts-expect-error\r\nimport toFormat from 'toformat';\r\nimport JSBI from 'jsbi';\r\nimport { Rounding } from '../enums/rounding';\r\nimport _Decimal from 'decimal.js-light';\r\nimport invariant from 'tiny-invariant';\r\nconst Decimal = toFormat(_Decimal);\r\nconst Big = toFormat(_Big);\r\nconst toSignificantRounding = {\r\n    [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n    [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n    [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n};\r\nconst toFixedRounding = {\r\n    [Rounding.ROUND_DOWN]: 0,\r\n    [Rounding.ROUND_HALF_UP]: 1,\r\n    [Rounding.ROUND_UP]: 3,\r\n};\r\nexport class Fraction {\r\n    constructor(numerator, denominator = JSBI.BigInt(1)) {\r\n        this.numerator = JSBI.BigInt(numerator);\r\n        this.denominator = JSBI.BigInt(denominator);\r\n    }\r\n    static tryParseFraction(fractionish) {\r\n        if (fractionish instanceof JSBI ||\r\n            typeof fractionish === 'number' ||\r\n            typeof fractionish === 'string')\r\n            return new Fraction(fractionish);\r\n        if ('numerator' in fractionish && 'denominator' in fractionish)\r\n            return fractionish;\r\n        throw new Error('Could not parse fraction');\r\n    }\r\n    // performs floor division\r\n    get quotient() {\r\n        return JSBI.divide(this.numerator, this.denominator);\r\n    }\r\n    // remainder after floor division\r\n    get remainder() {\r\n        return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\r\n    }\r\n    invert() {\r\n        return new Fraction(this.denominator, this.numerator);\r\n    }\r\n    add(other) {\r\n        const otherParsed = Fraction.tryParseFraction(other);\r\n        if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n            return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\r\n        }\r\n        return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\r\n    }\r\n    subtract(other) {\r\n        const otherParsed = Fraction.tryParseFraction(other);\r\n        if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n            return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\r\n        }\r\n        return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\r\n    }\r\n    lessThan(other) {\r\n        const otherParsed = Fraction.tryParseFraction(other);\r\n        return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\r\n    }\r\n    equalTo(other) {\r\n        const otherParsed = Fraction.tryParseFraction(other);\r\n        return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\r\n    }\r\n    greaterThan(other) {\r\n        const otherParsed = Fraction.tryParseFraction(other);\r\n        return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\r\n    }\r\n    multiply(other) {\r\n        const otherParsed = Fraction.tryParseFraction(other);\r\n        return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\r\n    }\r\n    divide(other) {\r\n        const otherParsed = Fraction.tryParseFraction(other);\r\n        return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\r\n    }\r\n    toSignificant(significantDigits, format = { groupSeparator: '' }, rounding = Rounding.ROUND_HALF_UP) {\r\n        invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\r\n        invariant(significantDigits > 0, `${significantDigits} is not positive.`);\r\n        Decimal.set({\r\n            precision: significantDigits + 1,\r\n            rounding: toSignificantRounding[rounding],\r\n        });\r\n        const quotient = new Decimal(this.numerator.toString())\r\n            .div(this.denominator.toString())\r\n            .toSignificantDigits(significantDigits);\r\n        return quotient.toFormat(quotient.decimalPlaces(), format);\r\n    }\r\n    toFixed(decimalPlaces, format = { groupSeparator: '' }, rounding = Rounding.ROUND_HALF_UP) {\r\n        invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\r\n        invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\r\n        Big.DP = decimalPlaces;\r\n        Big.RM = toFixedRounding[rounding];\r\n        return new Big(this.numerator.toString())\r\n            .div(this.denominator.toString())\r\n            .toFormat(decimalPlaces, format);\r\n    }\r\n    /**\r\n     * Helper method for converting any super class back to a fraction\r\n     */\r\n    get asFraction() {\r\n        return new Fraction(this.numerator, this.denominator);\r\n    }\r\n}\r\n//# sourceMappingURL=Fraction.js.map","references":["D:/personal_programming_work/integral-sdk-hpot/node_modules/big.js/big.js","D:/personal_programming_work/integral-sdk-hpot/node_modules/toformat/toFormat.js","D:/personal_programming_work/integral-sdk-hpot/src/types/BigIntish.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/jsbi/jsbi.d.ts","D:/personal_programming_work/integral-sdk-hpot/src/enums/rounding.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/decimal.js-light/decimal.d.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/tiny-invariant/dist/tiny-invariant.d.ts"],"map":"{\"version\":3,\"file\":\"Fraction.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/entities/Fraction.ts\"],\"names\":[],\"mappings\":\"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\"}"}
