{"code":"import { validateAndParseAddress } from '../utils/validateAndParseAddress';\r\nimport { CurrencyAmount } from '../entities';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { Position } from '../entities/position';\r\nimport { ONE, ZERO } from '../constants/internalConstants';\r\nimport { toHex } from '../utils/calldata';\r\nimport { Interface } from '@ethersproject/abi';\r\nimport { SelfPermit } from './selfPermit';\r\nimport { ADDRESS_ZERO } from '../constants/constants';\r\nimport { algebraPositionManagerABI } from \"../abis/algebraPositionManager\";\r\nexport const MaxUint128 = toHex(JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128)), JSBI.BigInt(1)));\r\n// type guard\r\nfunction isMint(options) {\r\n    return Object.keys(options).some(k => k === 'recipient');\r\n}\r\nexport class NonfungiblePositionManager extends SelfPermit {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n    static createCallParameters(pool, deployer) {\r\n        return {\r\n            calldata: this.encodeCreate(pool, deployer || pool.deployer),\r\n            value: toHex(0),\r\n        };\r\n    }\r\n    static addCallParameters(position, options) {\r\n        invariant(JSBI.greaterThan(position.liquidity, ZERO), 'ZERO_LIQUIDITY');\r\n        const calldatas = [];\r\n        // get amounts\r\n        const { amount0: amount0Desired, amount1: amount1Desired } = position.mintAmounts;\r\n        // adjust for\r\n        const minimumAmounts = position.mintAmountsWithSlippage(options.slippageTolerance);\r\n        const amount0Min = toHex(minimumAmounts.amount0);\r\n        const amount1Min = toHex(minimumAmounts.amount1);\r\n        const deadline = toHex(options.deadline);\r\n        // create pool if needed\r\n        if (isMint(options) && options.createPool) {\r\n            calldatas.push(this.encodeCreate(position.pool, options.deployer || position.pool.deployer));\r\n        }\r\n        // permits if necessary\r\n        if (options.token0Permit) {\r\n            calldatas.push(NonfungiblePositionManager.encodePermit(position.pool.token0, options.token0Permit));\r\n        }\r\n        if (options.token1Permit) {\r\n            calldatas.push(NonfungiblePositionManager.encodePermit(position.pool.token1, options.token1Permit));\r\n        }\r\n        // mint\r\n        if (isMint(options)) {\r\n            const recipient = validateAndParseAddress(options.recipient);\r\n            calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('mint', [\r\n                {\r\n                    token0: position.pool.token0.address,\r\n                    token1: position.pool.token1.address,\r\n                    deployer: position.pool.deployer,\r\n                    tickLower: position.tickLower,\r\n                    tickUpper: position.tickUpper,\r\n                    amount0Desired: toHex(amount0Desired),\r\n                    amount1Desired: toHex(amount1Desired),\r\n                    amount0Min,\r\n                    amount1Min,\r\n                    recipient,\r\n                    deadline,\r\n                },\r\n            ]));\r\n        }\r\n        else {\r\n            // increase\r\n            calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('increaseLiquidity', [\r\n                {\r\n                    tokenId: toHex(options.tokenId),\r\n                    amount0Desired: toHex(amount0Desired),\r\n                    amount1Desired: toHex(amount1Desired),\r\n                    amount0Min,\r\n                    amount1Min,\r\n                    deadline,\r\n                },\r\n            ]));\r\n        }\r\n        let value = toHex(0);\r\n        if (options.useNative) {\r\n            const wrapped = options.useNative.wrapped;\r\n            invariant(position.pool.token0.equals(wrapped) ||\r\n                position.pool.token1.equals(wrapped), 'NO_WNative');\r\n            const wrappedValue = position.pool.token0.equals(wrapped)\r\n                ? amount0Desired\r\n                : amount1Desired;\r\n            // we only need to refund if we're actually sending ETH\r\n            if (JSBI.greaterThan(wrappedValue, ZERO)) {\r\n                calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('refundNativeToken'));\r\n            }\r\n            value = toHex(wrappedValue);\r\n        }\r\n        return {\r\n            calldata: calldatas,\r\n            value,\r\n        };\r\n    }\r\n    static collectCallParameters(options) {\r\n        const calldatas = NonfungiblePositionManager.encodeCollect(options);\r\n        return {\r\n            calldata: calldatas,\r\n            value: toHex(0),\r\n        };\r\n    }\r\n    /**\r\n     * Produces the calldata for completely or partially exiting a position\r\n     * @param position The position to exit\r\n     * @param options Additional information necessary for generating the calldata\r\n     * @returns The call parameters\r\n     */\r\n    static removeCallParameters(position, options) {\r\n        const calldatas = [];\r\n        const deadline = toHex(options.deadline);\r\n        const tokenId = toHex(options.tokenId);\r\n        // construct a partial position with a percentage of liquidity\r\n        const partialPosition = new Position({\r\n            pool: position.pool,\r\n            liquidity: options.liquidityPercentage.multiply(position.liquidity)\r\n                .quotient,\r\n            tickLower: position.tickLower,\r\n            tickUpper: position.tickUpper,\r\n        });\r\n        invariant(JSBI.greaterThan(partialPosition.liquidity, ZERO), 'ZERO_LIQUIDITY');\r\n        // slippage-adjusted underlying amounts\r\n        const { amount0: amount0Min, amount1: amount1Min } = partialPosition.burnAmountsWithSlippage(options.slippageTolerance);\r\n        if (options.permit) {\r\n            calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\r\n                validateAndParseAddress(options.permit.spender),\r\n                tokenId,\r\n                toHex(options.permit.deadline),\r\n                options.permit.v,\r\n                options.permit.r,\r\n                options.permit.s,\r\n            ]));\r\n        }\r\n        // remove liquidity\r\n        calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('decreaseLiquidity', [\r\n            {\r\n                tokenId,\r\n                liquidity: toHex(partialPosition.liquidity),\r\n                amount0Min: toHex(amount0Min),\r\n                amount1Min: toHex(amount1Min),\r\n                deadline,\r\n            },\r\n        ]));\r\n        const { expectedCurrencyOwed0, expectedCurrencyOwed1, ...rest } = options.collectOptions;\r\n        calldatas.push(...NonfungiblePositionManager.encodeCollect({\r\n            tokenId: options.tokenId,\r\n            // add the underlying value to the expected currency already owed\r\n            expectedCurrencyOwed0: expectedCurrencyOwed0.add(CurrencyAmount.fromRawAmount(expectedCurrencyOwed0.currency, amount0Min)),\r\n            expectedCurrencyOwed1: expectedCurrencyOwed1.add(CurrencyAmount.fromRawAmount(expectedCurrencyOwed1.currency, amount1Min)),\r\n            ...rest,\r\n        }));\r\n        if (options.liquidityPercentage.equalTo(ONE)) {\r\n            if (options.burnToken) {\r\n                calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('burn', [\r\n                    tokenId,\r\n                ]));\r\n            }\r\n        }\r\n        else {\r\n            invariant(options.burnToken !== true, 'CANNOT_BURN');\r\n        }\r\n        return {\r\n            calldata: calldatas,\r\n            value: toHex(0),\r\n        };\r\n    }\r\n    static encodeCreate(pool, deployer) {\r\n        return NonfungiblePositionManager.INTERFACE.encodeFunctionData('createAndInitializePoolIfNecessary', [pool.token0.address, pool.token1.address, deployer, toHex(pool.sqrtRatioX96)]);\r\n    }\r\n    static encodeCollect(options) {\r\n        const calldatas = [];\r\n        const tokenId = toHex(options.tokenId);\r\n        const involvesETH = options.expectedCurrencyOwed0.currency.isNative ||\r\n            options.expectedCurrencyOwed1.currency.isNative;\r\n        const recipient = validateAndParseAddress(options.recipient);\r\n        // collect\r\n        calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('collect', [\r\n            {\r\n                tokenId,\r\n                recipient: involvesETH ? ADDRESS_ZERO : recipient,\r\n                amount0Max: MaxUint128,\r\n                amount1Max: MaxUint128,\r\n            },\r\n        ]));\r\n        if (involvesETH) {\r\n            const ethAmount = options.expectedCurrencyOwed0.currency.isNative\r\n                ? options.expectedCurrencyOwed0.quotient\r\n                : options.expectedCurrencyOwed1.quotient;\r\n            const token = options.expectedCurrencyOwed0.currency.isNative\r\n                ? options.expectedCurrencyOwed1.currency\r\n                : options.expectedCurrencyOwed0.currency;\r\n            const tokenAmount = options.expectedCurrencyOwed0.currency.isNative\r\n                ? options.expectedCurrencyOwed1.quotient\r\n                : options.expectedCurrencyOwed0.quotient;\r\n            calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('unwrapWNativeToken', [toHex(ethAmount), recipient]));\r\n            calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('sweepToken', [\r\n                token.address,\r\n                toHex(tokenAmount),\r\n                recipient,\r\n            ]));\r\n        }\r\n        return calldatas;\r\n    }\r\n}\r\nNonfungiblePositionManager.INTERFACE = new Interface(algebraPositionManagerABI);\r\n//# sourceMappingURL=nonfungiblePositionManager.js.map","references":["D:/personal_programming_work/integral-sdk-hpot/src/types/BigIntish.ts","D:/personal_programming_work/integral-sdk-hpot/src/utils/validateAndParseAddress.ts","D:/personal_programming_work/integral-sdk-hpot/src/entities/index.ts","D:/personal_programming_work/integral-sdk-hpot/src/entities/NativeCurrency.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/jsbi/jsbi.d.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","D:/personal_programming_work/integral-sdk-hpot/src/entities/position.ts","D:/personal_programming_work/integral-sdk-hpot/src/constants/internalConstants.ts","D:/personal_programming_work/integral-sdk-hpot/src/utils/calldata.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/@ethersproject/abi/lib/index.d.ts","D:/personal_programming_work/integral-sdk-hpot/src/classes/selfPermit.ts","D:/personal_programming_work/integral-sdk-hpot/src/constants/constants.ts","D:/personal_programming_work/integral-sdk-hpot/src/entities/index.ts","D:/personal_programming_work/integral-sdk-hpot/src/abis/algebraPositionManager.ts"],"map":"{\"version\":3,\"file\":\"nonfungiblePositionManager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/classes/nonfungiblePositionManager.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/personal_programming_work/integral-sdk-hpot/classes/nonfungiblePositionManager.d.ts","writeByteOrderMark":false,"text":"import { BigintIsh } from '../types/BigIntish';\r\nimport { Currency, CurrencyAmount, Percent } from '../entities';\r\nimport NativeCurrency from '../entities/NativeCurrency';\r\nimport { Position } from '../entities/position';\r\nimport { MethodParameters } from '../utils/calldata';\r\nimport { Interface } from '@ethersproject/abi';\r\nimport { PermitOptions, SelfPermit } from './selfPermit';\r\nimport { Pool } from '../entities';\r\nexport declare const MaxUint128: string;\r\nexport interface MintSpecificOptions {\r\n    /**\r\n     * The account that should receive the minted NFT.\r\n     */\r\n    recipient: string;\r\n    /**\r\n     * Creates pool if not initialized before mint.\r\n     */\r\n    createPool?: boolean;\r\n}\r\nexport interface IncreaseSpecificOptions {\r\n    /**\r\n     * Indicates the ID of the position to increase liquidity for.\r\n     */\r\n    tokenId: BigintIsh;\r\n}\r\n/**\r\n * Options for producing the calldata to add liquidity.\r\n */\r\nexport interface CommonAddLiquidityOptions {\r\n    /**\r\n     * How much the pool price is allowed to move.\r\n     */\r\n    slippageTolerance: Percent;\r\n    /**\r\n     * When the transaction expires, in epoch seconds.\r\n     */\r\n    deadline: BigintIsh;\r\n    /**\r\n     * Pool Deployer address. ZERO_ADDRESS if base pool\r\n     */\r\n    deployer?: string;\r\n    /**\r\n     * Whether to spend ether. If true, one of the pool tokens must be WETH, by default false\r\n     */\r\n    useNative?: NativeCurrency;\r\n    /**\r\n     * The optional permit parameters for spending token0\r\n     */\r\n    token0Permit?: PermitOptions;\r\n    /**\r\n     * The optional permit parameters for spending token1\r\n     */\r\n    token1Permit?: PermitOptions;\r\n}\r\nexport declare type MintOptions = CommonAddLiquidityOptions & MintSpecificOptions;\r\nexport declare type IncreaseOptions = CommonAddLiquidityOptions & IncreaseSpecificOptions;\r\nexport declare type AddLiquidityOptions = MintOptions | IncreaseOptions;\r\nexport interface CollectOptions {\r\n    /**\r\n     * Indicates the ID of the position to collect for.\r\n     */\r\n    tokenId: BigintIsh;\r\n    /**\r\n     * Expected value of tokensOwed0, including as-of-yet-unaccounted-for fees/liquidity value to be burned\r\n     */\r\n    expectedCurrencyOwed0: CurrencyAmount<Currency>;\r\n    /**\r\n     * Expected value of tokensOwed1, including as-of-yet-unaccounted-for fees/liquidity value to be burned\r\n     */\r\n    expectedCurrencyOwed1: CurrencyAmount<Currency>;\r\n    /**\r\n     * The account that should receive the tokens.\r\n     */\r\n    recipient: string;\r\n}\r\nexport interface NFTPermitOptions {\r\n    v: 0 | 1 | 27 | 28;\r\n    r: string;\r\n    s: string;\r\n    deadline: BigintIsh;\r\n    spender: string;\r\n}\r\n/**\r\n * Options for producing the calldata to exit a position.\r\n */\r\nexport interface RemoveLiquidityOptions {\r\n    /**\r\n     * The ID of the token to exit\r\n     */\r\n    tokenId: BigintIsh;\r\n    /**\r\n     * The percentage of position liquidity to exit.\r\n     */\r\n    liquidityPercentage: Percent;\r\n    /**\r\n     * How much the pool price is allowed to move.\r\n     */\r\n    slippageTolerance: Percent;\r\n    /**\r\n     * When the transaction expires, in epoch seconds.\r\n     */\r\n    deadline: BigintIsh;\r\n    /**\r\n     * Whether the NFT should be burned if the entire position is being exited, by default false.\r\n     */\r\n    burnToken?: boolean;\r\n    /**\r\n     * The optional permit of the token ID being exited, in case the exit transaction is being sent by an account that does not own the NFT\r\n     */\r\n    permit?: NFTPermitOptions;\r\n    /**\r\n     * Parameters to be passed on to collect\r\n     */\r\n    collectOptions: Omit<CollectOptions, 'tokenId'>;\r\n}\r\nexport declare abstract class NonfungiblePositionManager extends SelfPermit {\r\n    static INTERFACE: Interface;\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    private constructor();\r\n    static createCallParameters(pool: Pool, deployer?: string): MethodParameters;\r\n    static addCallParameters(position: Position, options: AddLiquidityOptions): {\r\n        calldata: string[];\r\n        value: string;\r\n    };\r\n    static collectCallParameters(options: CollectOptions): {\r\n        calldata: string[];\r\n        value: string;\r\n    };\r\n    /**\r\n     * Produces the calldata for completely or partially exiting a position\r\n     * @param position The position to exit\r\n     * @param options Additional information necessary for generating the calldata\r\n     * @returns The call parameters\r\n     */\r\n    static removeCallParameters(position: Position, options: RemoveLiquidityOptions): {\r\n        calldata: string[];\r\n        value: string;\r\n    };\r\n    private static encodeCreate;\r\n    private static encodeCollect;\r\n}\r\n"}}
