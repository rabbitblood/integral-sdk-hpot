{"code":"import { MaxUint256 } from '../constants/internalConstants';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { ONE, Q96, ZERO } from '../constants/internalConstants';\r\nimport { FullMath } from './fullMath';\r\nconst MaxUint160 = JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(160)), ONE);\r\nfunction multiplyIn256(x, y) {\r\n    const product = JSBI.multiply(x, y);\r\n    return JSBI.bitwiseAnd(product, MaxUint256);\r\n}\r\nfunction addIn256(x, y) {\r\n    const sum = JSBI.add(x, y);\r\n    return JSBI.bitwiseAnd(sum, MaxUint256);\r\n}\r\nexport class SqrtPriceMath {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    static getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, liquidity, roundUp) {\r\n        if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n            [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n        }\r\n        const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96));\r\n        const numerator2 = JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96);\r\n        return roundUp\r\n            ? FullMath.mulDivRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96), ONE, sqrtRatioAX96)\r\n            : JSBI.divide(JSBI.divide(JSBI.multiply(numerator1, numerator2), sqrtRatioBX96), sqrtRatioAX96);\r\n    }\r\n    static getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, liquidity, roundUp) {\r\n        if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n            [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n        }\r\n        return roundUp\r\n            ? FullMath.mulDivRoundingUp(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96), Q96)\r\n            : JSBI.divide(JSBI.multiply(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)), Q96);\r\n    }\r\n    static getNextSqrtPriceFromInput(sqrtPX96, liquidity, amountIn, zeroForOne) {\r\n        invariant(JSBI.greaterThan(sqrtPX96, ZERO));\r\n        invariant(JSBI.greaterThan(liquidity, ZERO));\r\n        return zeroForOne\r\n            ? this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\r\n            : this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\r\n    }\r\n    static getNextSqrtPriceFromOutput(sqrtPX96, liquidity, amountOut, zeroForOne) {\r\n        invariant(JSBI.greaterThan(sqrtPX96, ZERO));\r\n        invariant(JSBI.greaterThan(liquidity, ZERO));\r\n        return zeroForOne\r\n            ? this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\r\n            : this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\r\n    }\r\n    static getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amount, add) {\r\n        if (JSBI.equal(amount, ZERO))\r\n            return sqrtPX96;\r\n        const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96));\r\n        if (add) {\r\n            const product = multiplyIn256(amount, sqrtPX96);\r\n            if (JSBI.equal(JSBI.divide(product, amount), sqrtPX96)) {\r\n                const denominator = addIn256(numerator1, product);\r\n                if (JSBI.greaterThanOrEqual(denominator, numerator1)) {\r\n                    return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator);\r\n                }\r\n            }\r\n            return FullMath.mulDivRoundingUp(numerator1, ONE, JSBI.add(JSBI.divide(numerator1, sqrtPX96), amount));\r\n        }\r\n        else {\r\n            const product = multiplyIn256(amount, sqrtPX96);\r\n            invariant(JSBI.equal(JSBI.divide(product, amount), sqrtPX96));\r\n            invariant(JSBI.greaterThan(numerator1, product));\r\n            const denominator = JSBI.subtract(numerator1, product);\r\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator);\r\n        }\r\n    }\r\n    static getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amount, add) {\r\n        if (add) {\r\n            const quotient = JSBI.lessThanOrEqual(amount, MaxUint160)\r\n                ? JSBI.divide(JSBI.leftShift(amount, JSBI.BigInt(96)), liquidity)\r\n                : JSBI.divide(JSBI.multiply(amount, Q96), liquidity);\r\n            return JSBI.add(sqrtPX96, quotient);\r\n        }\r\n        else {\r\n            const quotient = FullMath.mulDivRoundingUp(amount, Q96, liquidity);\r\n            invariant(JSBI.greaterThan(sqrtPX96, quotient));\r\n            return JSBI.subtract(sqrtPX96, quotient);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=sqrtPriceMath.js.map","references":["D:/personal_programming_work/integral-sdk-hpot/src/constants/internalConstants.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/jsbi/jsbi.d.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","D:/personal_programming_work/integral-sdk-hpot/src/constants/internalConstants.ts","D:/personal_programming_work/integral-sdk-hpot/src/utils/fullMath.ts"],"map":"{\"version\":3,\"file\":\"sqrtPriceMath.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/sqrtPriceMath.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/personal_programming_work/integral-sdk-hpot/utils/sqrtPriceMath.d.ts","writeByteOrderMark":false,"text":"import JSBI from 'jsbi';\r\nexport declare abstract class SqrtPriceMath {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    static getAmount0Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI;\r\n    static getAmount1Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI;\r\n    static getNextSqrtPriceFromInput(sqrtPX96: JSBI, liquidity: JSBI, amountIn: JSBI, zeroForOne: boolean): JSBI;\r\n    static getNextSqrtPriceFromOutput(sqrtPX96: JSBI, liquidity: JSBI, amountOut: JSBI, zeroForOne: boolean): JSBI;\r\n    private static getNextSqrtPriceFromAmount0RoundingUp;\r\n    private static getNextSqrtPriceFromAmount1RoundingDown;\r\n}\r\n"}}
