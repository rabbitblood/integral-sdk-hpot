{"code":"import { MaxUint256 } from '../constants/internalConstants';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { ONE, ZERO } from '../constants/internalConstants';\r\nimport { mostSignificantBit } from './mostSignificantBit';\r\nfunction mulShift(val, mulBy) {\r\n    return JSBI.signedRightShift(JSBI.multiply(val, JSBI.BigInt(mulBy)), JSBI.BigInt(128));\r\n}\r\nconst Q32 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(32));\r\nexport class TickMath {\r\n    /**\r\n     * Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick\r\n     * @param tick the tick for which to compute the sqrt ratio\r\n     */\r\n    static getSqrtRatioAtTick(tick) {\r\n        invariant(tick >= TickMath.MIN_TICK &&\r\n            tick <= TickMath.MAX_TICK &&\r\n            Number.isInteger(tick), 'TICK');\r\n        const absTick = tick < 0 ? tick * -1 : tick;\r\n        let ratio = (absTick & 0x1) != 0\r\n            ? JSBI.BigInt('0xfffcb933bd6fad37aa2d162d1a594001')\r\n            : JSBI.BigInt('0x100000000000000000000000000000000');\r\n        if ((absTick & 0x2) != 0)\r\n            ratio = mulShift(ratio, '0xfff97272373d413259a46990580e213a');\r\n        if ((absTick & 0x4) != 0)\r\n            ratio = mulShift(ratio, '0xfff2e50f5f656932ef12357cf3c7fdcc');\r\n        if ((absTick & 0x8) != 0)\r\n            ratio = mulShift(ratio, '0xffe5caca7e10e4e61c3624eaa0941cd0');\r\n        if ((absTick & 0x10) != 0)\r\n            ratio = mulShift(ratio, '0xffcb9843d60f6159c9db58835c926644');\r\n        if ((absTick & 0x20) != 0)\r\n            ratio = mulShift(ratio, '0xff973b41fa98c081472e6896dfb254c0');\r\n        if ((absTick & 0x40) != 0)\r\n            ratio = mulShift(ratio, '0xff2ea16466c96a3843ec78b326b52861');\r\n        if ((absTick & 0x80) != 0)\r\n            ratio = mulShift(ratio, '0xfe5dee046a99a2a811c461f1969c3053');\r\n        if ((absTick & 0x100) != 0)\r\n            ratio = mulShift(ratio, '0xfcbe86c7900a88aedcffc83b479aa3a4');\r\n        if ((absTick & 0x200) != 0)\r\n            ratio = mulShift(ratio, '0xf987a7253ac413176f2b074cf7815e54');\r\n        if ((absTick & 0x400) != 0)\r\n            ratio = mulShift(ratio, '0xf3392b0822b70005940c7a398e4b70f3');\r\n        if ((absTick & 0x800) != 0)\r\n            ratio = mulShift(ratio, '0xe7159475a2c29b7443b29c7fa6e889d9');\r\n        if ((absTick & 0x1000) != 0)\r\n            ratio = mulShift(ratio, '0xd097f3bdfd2022b8845ad8f792aa5825');\r\n        if ((absTick & 0x2000) != 0)\r\n            ratio = mulShift(ratio, '0xa9f746462d870fdf8a65dc1f90e061e5');\r\n        if ((absTick & 0x4000) != 0)\r\n            ratio = mulShift(ratio, '0x70d869a156d2a1b890bb3df62baf32f7');\r\n        if ((absTick & 0x8000) != 0)\r\n            ratio = mulShift(ratio, '0x31be135f97d08fd981231505542fcfa6');\r\n        if ((absTick & 0x10000) != 0)\r\n            ratio = mulShift(ratio, '0x9aa508b5b7a84e1c677de54f3e99bc9');\r\n        if ((absTick & 0x20000) != 0)\r\n            ratio = mulShift(ratio, '0x5d6af8dedb81196699c329225ee604');\r\n        if ((absTick & 0x40000) != 0)\r\n            ratio = mulShift(ratio, '0x2216e584f5fa1ea926041bedfe98');\r\n        if ((absTick & 0x80000) != 0)\r\n            ratio = mulShift(ratio, '0x48a170391f7dc42444e8fa2');\r\n        if (tick > 0)\r\n            ratio = JSBI.divide(MaxUint256, ratio);\r\n        // back to Q96\r\n        return JSBI.greaterThan(JSBI.remainder(ratio, Q32), ZERO)\r\n            ? JSBI.add(JSBI.divide(ratio, Q32), ONE)\r\n            : JSBI.divide(ratio, Q32);\r\n    }\r\n    /**\r\n     * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX96\r\n     * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX96\r\n     * @param sqrtRatioX96 the sqrt ratio as a Q64.96 for which to compute the tick\r\n     */\r\n    static getTickAtSqrtRatio(sqrtRatioX96) {\r\n        invariant(JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO) &&\r\n            JSBI.lessThan(sqrtRatioX96, TickMath.MAX_SQRT_RATIO), 'SQRT_RATIO');\r\n        const sqrtRatioX128 = JSBI.leftShift(sqrtRatioX96, JSBI.BigInt(32));\r\n        const msb = mostSignificantBit(sqrtRatioX128);\r\n        let r;\r\n        if (JSBI.greaterThanOrEqual(JSBI.BigInt(msb), JSBI.BigInt(128))) {\r\n            r = JSBI.signedRightShift(sqrtRatioX128, JSBI.BigInt(msb - 127));\r\n        }\r\n        else {\r\n            r = JSBI.leftShift(sqrtRatioX128, JSBI.BigInt(127 - msb));\r\n        }\r\n        let log_2 = JSBI.leftShift(JSBI.subtract(JSBI.BigInt(msb), JSBI.BigInt(128)), JSBI.BigInt(64));\r\n        for (let i = 0; i < 14; i++) {\r\n            r = JSBI.signedRightShift(JSBI.multiply(r, r), JSBI.BigInt(127));\r\n            const f = JSBI.signedRightShift(r, JSBI.BigInt(128));\r\n            log_2 = JSBI.bitwiseOr(log_2, JSBI.leftShift(f, JSBI.BigInt(63 - i)));\r\n            r = JSBI.signedRightShift(r, f);\r\n        }\r\n        const log_sqrt10001 = JSBI.multiply(log_2, JSBI.BigInt('255738958999603826347141'));\r\n        const tickLow = JSBI.toNumber(JSBI.signedRightShift(JSBI.subtract(log_sqrt10001, JSBI.BigInt('3402992956809132418596140100660247210')), JSBI.BigInt(128)));\r\n        const tickHigh = JSBI.toNumber(JSBI.signedRightShift(JSBI.add(log_sqrt10001, JSBI.BigInt('291339464771989622907027621153398088495')), JSBI.BigInt(128)));\r\n        return tickLow === tickHigh\r\n            ? tickLow\r\n            : JSBI.lessThanOrEqual(TickMath.getSqrtRatioAtTick(tickHigh), sqrtRatioX96)\r\n                ? tickHigh\r\n                : tickLow;\r\n    }\r\n}\r\n/**\r\n * Cannot be constructed.\r\n */\r\n/**\r\n * The minimum tick that can be used on any pool.\r\n */\r\nTickMath.MIN_TICK = -887272;\r\n/**\r\n * The maximum tick that can be used on any pool.\r\n */\r\nTickMath.MAX_TICK = -TickMath.MIN_TICK;\r\n/**\r\n * The sqrt ratio corresponding to the minimum tick that could be used on any pool.\r\n */\r\nTickMath.MIN_SQRT_RATIO = JSBI.BigInt('4295128739');\r\n/**\r\n * The sqrt ratio corresponding to the maximum tick that could be used on any pool.\r\n */\r\nTickMath.MAX_SQRT_RATIO = JSBI.BigInt('1461446703485210103287273052203988822378723970342');\r\n//# sourceMappingURL=tickMath.js.map","references":["D:/personal_programming_work/integral-sdk-hpot/src/constants/internalConstants.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/jsbi/jsbi.d.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","D:/personal_programming_work/integral-sdk-hpot/src/constants/internalConstants.ts","D:/personal_programming_work/integral-sdk-hpot/src/utils/mostSignificantBit.ts"],"map":"{\"version\":3,\"file\":\"tickMath.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/tickMath.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/personal_programming_work/integral-sdk-hpot/utils/tickMath.d.ts","writeByteOrderMark":false,"text":"import JSBI from 'jsbi';\r\nexport declare abstract class TickMath {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    /**\r\n     * The minimum tick that can be used on any pool.\r\n     */\r\n    static MIN_TICK: number;\r\n    /**\r\n     * The maximum tick that can be used on any pool.\r\n     */\r\n    static MAX_TICK: number;\r\n    /**\r\n     * The sqrt ratio corresponding to the minimum tick that could be used on any pool.\r\n     */\r\n    static MIN_SQRT_RATIO: JSBI;\r\n    /**\r\n     * The sqrt ratio corresponding to the maximum tick that could be used on any pool.\r\n     */\r\n    static MAX_SQRT_RATIO: JSBI;\r\n    /**\r\n     * Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick\r\n     * @param tick the tick for which to compute the sqrt ratio\r\n     */\r\n    static getSqrtRatioAtTick(tick: number): JSBI;\r\n    /**\r\n     * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX96\r\n     * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX96\r\n     * @param sqrtRatioX96 the sqrt ratio as a Q64.96 for which to compute the tick\r\n     */\r\n    static getTickAtSqrtRatio(sqrtRatioX96: JSBI): number;\r\n}\r\n"}}
