{"code":"import JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { ZERO } from '../constants/internalConstants';\r\nimport { isSorted } from './isSorted';\r\nfunction tickComparator(a, b) {\r\n    return a.index - b.index;\r\n}\r\n/**\r\n * Utility methods for interacting with sorted lists of ticks\r\n */\r\nexport class TickList {\r\n    /**\r\n     * Cannot be constructed\r\n     */\r\n    static validateList(ticks, tickSpacing) {\r\n        invariant(tickSpacing > 0, 'TICK_SPACING_NONZERO');\r\n        // ensure ticks are spaced appropriately\r\n        invariant(ticks.every(({ index }) => index % tickSpacing === 0), 'TICK_SPACING');\r\n        // ensure tick liquidity deltas sum to 0\r\n        invariant(JSBI.equal(ticks.reduce((accumulator, { liquidityNet }) => JSBI.add(accumulator, liquidityNet), ZERO), ZERO), 'ZERO_NET');\r\n        invariant(isSorted(ticks, tickComparator), 'SORTED');\r\n    }\r\n    static isBelowSmallest(ticks, tick) {\r\n        invariant(ticks.length > 0, 'LENGTH');\r\n        return tick < ticks[0].index;\r\n    }\r\n    static isAtOrAboveLargest(ticks, tick) {\r\n        invariant(ticks.length > 0, 'LENGTH');\r\n        return tick >= ticks[ticks.length - 1].index;\r\n    }\r\n    static getTick(ticks, index) {\r\n        const tick = ticks[this.binarySearch(ticks, index)];\r\n        invariant(tick.index === index, 'NOT_CONTAINED');\r\n        return tick;\r\n    }\r\n    static nextInitializedTick(ticks, tick, lte) {\r\n        if (lte) {\r\n            invariant(!TickList.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST');\r\n            if (TickList.isAtOrAboveLargest(ticks, tick)) {\r\n                return ticks[ticks.length - 1];\r\n            }\r\n            const index = this.binarySearch(ticks, tick);\r\n            return ticks[index];\r\n        }\r\n        else {\r\n            invariant(!this.isAtOrAboveLargest(ticks, tick), 'AT_OR_ABOVE_LARGEST');\r\n            if (this.isBelowSmallest(ticks, tick)) {\r\n                return ticks[0];\r\n            }\r\n            const index = this.binarySearch(ticks, tick);\r\n            return ticks[index + 1];\r\n        }\r\n    }\r\n    static nextInitializedTickWithinOneWord(ticks, tick, lte, tickSpacing) {\r\n        const compressed = Math.floor(tick / tickSpacing); // matches rounding in the code\r\n        if (lte) {\r\n            const wordPos = compressed >> 8;\r\n            const minimum = (wordPos << 8) * tickSpacing;\r\n            if (TickList.isBelowSmallest(ticks, tick)) {\r\n                return [minimum, false];\r\n            }\r\n            const index = TickList.nextInitializedTick(ticks, tick, lte).index;\r\n            const nextInitializedTick = Math.max(minimum, index);\r\n            return [nextInitializedTick, nextInitializedTick === index];\r\n        }\r\n        else {\r\n            const wordPos = (compressed + 1) >> 8;\r\n            const maximum = ((wordPos + 1) << 8) * tickSpacing - 1;\r\n            if (this.isAtOrAboveLargest(ticks, tick)) {\r\n                return [maximum, false];\r\n            }\r\n            const index = this.nextInitializedTick(ticks, tick, lte).index;\r\n            const nextInitializedTick = Math.min(maximum, index);\r\n            return [nextInitializedTick, nextInitializedTick === index];\r\n        }\r\n    }\r\n    /**\r\n     * Finds the largest tick in the list of ticks that is less than or equal to tick\r\n     * @param ticks list of ticks\r\n     * @param tick tick to find the largest tick that is less than or equal to tick\r\n     * @private\r\n     */\r\n    static binarySearch(ticks, tick) {\r\n        invariant(!this.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST');\r\n        let l = 0;\r\n        let r = ticks.length - 1;\r\n        let i;\r\n        while (true) {\r\n            i = Math.floor((l + r) / 2);\r\n            if (ticks[i].index <= tick &&\r\n                (i === ticks.length - 1 || ticks[i + 1].index > tick)) {\r\n                return i;\r\n            }\r\n            if (ticks[i].index < tick) {\r\n                l = i + 1;\r\n            }\r\n            else {\r\n                r = i - 1;\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=tickList.js.map","references":["D:/personal_programming_work/integral-sdk-hpot/node_modules/jsbi/jsbi.d.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","D:/personal_programming_work/integral-sdk-hpot/src/constants/internalConstants.ts","D:/personal_programming_work/integral-sdk-hpot/src/utils/isSorted.ts","D:/personal_programming_work/integral-sdk-hpot/src/entities/tick.ts"],"map":"{\"version\":3,\"file\":\"tickList.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/tickList.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/personal_programming_work/integral-sdk-hpot/utils/tickList.d.ts","writeByteOrderMark":false,"text":"import { Tick } from '../entities/tick';\r\n/**\r\n * Utility methods for interacting with sorted lists of ticks\r\n */\r\nexport declare abstract class TickList {\r\n    /**\r\n     * Cannot be constructed\r\n     */\r\n    static validateList(ticks: Tick[], tickSpacing: number): void;\r\n    static isBelowSmallest(ticks: readonly Tick[], tick: number): boolean;\r\n    static isAtOrAboveLargest(ticks: readonly Tick[], tick: number): boolean;\r\n    static getTick(ticks: readonly Tick[], index: number): Tick;\r\n    static nextInitializedTick(ticks: readonly Tick[], tick: number, lte: boolean): Tick;\r\n    static nextInitializedTickWithinOneWord(ticks: readonly Tick[], tick: number, lte: boolean, tickSpacing: number): [number, boolean];\r\n    /**\r\n     * Finds the largest tick in the list of ticks that is less than or equal to tick\r\n     * @param ticks list of ticks\r\n     * @param tick tick to find the largest tick that is less than or equal to tick\r\n     * @private\r\n     */\r\n    private static binarySearch;\r\n}\r\n"}}
