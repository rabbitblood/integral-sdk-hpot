{"code":"import JSBI from 'jsbi';\r\nimport { NEGATIVE_ONE, ZERO } from '../constants/internalConstants';\r\nimport { FullMath } from './fullMath';\r\nimport { SqrtPriceMath } from './sqrtPriceMath';\r\nconst MAX_FEE = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(6));\r\nexport class SwapMath {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    static computeSwapStep(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, amountRemaining, feePips) {\r\n        const returnValues = {};\r\n        const zeroForOne = JSBI.greaterThanOrEqual(sqrtRatioCurrentX96, sqrtRatioTargetX96);\r\n        const exactIn = JSBI.greaterThanOrEqual(amountRemaining, ZERO);\r\n        if (exactIn) {\r\n            const amountRemainingLessFee = JSBI.divide(JSBI.multiply(amountRemaining, JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))), MAX_FEE);\r\n            returnValues.amountIn = zeroForOne\r\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\r\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\r\n            if (JSBI.greaterThanOrEqual(amountRemainingLessFee, returnValues.amountIn)) {\r\n                returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96;\r\n            }\r\n            else {\r\n                returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(sqrtRatioCurrentX96, liquidity, amountRemainingLessFee, zeroForOne);\r\n            }\r\n        }\r\n        else {\r\n            returnValues.amountOut = zeroForOne\r\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\r\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\r\n            if (JSBI.greaterThanOrEqual(JSBI.multiply(amountRemaining, NEGATIVE_ONE), returnValues.amountOut)) {\r\n                returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96;\r\n            }\r\n            else {\r\n                returnValues.sqrtRatioNextX96 =\r\n                    SqrtPriceMath.getNextSqrtPriceFromOutput(sqrtRatioCurrentX96, liquidity, JSBI.multiply(amountRemaining, NEGATIVE_ONE), zeroForOne);\r\n            }\r\n        }\r\n        const max = JSBI.equal(sqrtRatioTargetX96, returnValues.sqrtRatioNextX96);\r\n        if (zeroForOne) {\r\n            returnValues.amountIn =\r\n                max && exactIn\r\n                    ? returnValues.amountIn\r\n                    : SqrtPriceMath.getAmount0Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\r\n            returnValues.amountOut =\r\n                max && !exactIn\r\n                    ? returnValues.amountOut\r\n                    : SqrtPriceMath.getAmount1Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\r\n        }\r\n        else {\r\n            returnValues.amountIn =\r\n                max && exactIn\r\n                    ? returnValues.amountIn\r\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, true);\r\n            returnValues.amountOut =\r\n                max && !exactIn\r\n                    ? returnValues.amountOut\r\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, false);\r\n        }\r\n        if (!exactIn &&\r\n            JSBI.greaterThan(returnValues.amountOut, JSBI.multiply(amountRemaining, NEGATIVE_ONE))) {\r\n            returnValues.amountOut = JSBI.multiply(amountRemaining, NEGATIVE_ONE);\r\n        }\r\n        if (exactIn &&\r\n            JSBI.notEqual(returnValues.sqrtRatioNextX96, sqrtRatioTargetX96)) {\r\n            // we didn't reach the target, so take the remainder of the maximum input as fee\r\n            returnValues.feeAmount = JSBI.subtract(amountRemaining, returnValues.amountIn);\r\n        }\r\n        else {\r\n            returnValues.feeAmount = FullMath.mulDivRoundingUp(returnValues.amountIn, JSBI.BigInt(feePips), JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips)));\r\n        }\r\n        return [\r\n            returnValues.sqrtRatioNextX96,\r\n            returnValues.amountIn,\r\n            returnValues.amountOut,\r\n            returnValues.feeAmount,\r\n        ];\r\n    }\r\n}\r\n//# sourceMappingURL=swapMath.js.map","references":["D:/personal_programming_work/integral-sdk-hpot/node_modules/jsbi/jsbi.d.ts","D:/personal_programming_work/integral-sdk-hpot/src/constants/internalConstants.ts","D:/personal_programming_work/integral-sdk-hpot/src/utils/fullMath.ts","D:/personal_programming_work/integral-sdk-hpot/src/utils/sqrtPriceMath.ts"],"map":"{\"version\":3,\"file\":\"swapMath.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/swapMath.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/personal_programming_work/integral-sdk-hpot/utils/swapMath.d.ts","writeByteOrderMark":false,"text":"import JSBI from 'jsbi';\r\nexport declare abstract class SwapMath {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    static computeSwapStep(sqrtRatioCurrentX96: JSBI, sqrtRatioTargetX96: JSBI, liquidity: JSBI, amountRemaining: JSBI, feePips: number): [JSBI, JSBI, JSBI, JSBI];\r\n}\r\n"}}
