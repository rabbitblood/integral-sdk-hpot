{"code":"import JSBI from 'jsbi';\r\nimport { Q96 } from '../constants/internalConstants';\r\n/**\r\n * Returns an imprecise maximum amount of liquidity received for a given amount of token 0.\r\n * This function is available to accommodate LiquidityAmounts#getLiquidityForAmount0 in the v3 periphery,\r\n * which could be more precise by at least 32 bits by dividing by Q64 instead of Q96 in the intermediate step,\r\n * and shifting the subtracted ratio left by 32 bits. This imprecise calculation will likely be replaced in a future\r\n * v3 router contract.\r\n * @param sqrtRatioAX96 The price at the lower boundary\r\n * @param sqrtRatioBX96 The price at the upper boundary\r\n * @param amount0 The token0 amount\r\n * @returns liquidity for amount0, imprecise\r\n */\r\nfunction maxLiquidityForAmount0Imprecise(sqrtRatioAX96, sqrtRatioBX96, amount0) {\r\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n        [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n    }\r\n    const intermediate = JSBI.divide(JSBI.multiply(sqrtRatioAX96, sqrtRatioBX96), Q96);\r\n    return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount0), intermediate), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96));\r\n}\r\n/**\r\n * Returns a precise maximum amount of liquidity received for a given amount of token 0 by dividing by Q64 instead of Q96 in the intermediate step,\r\n * and shifting the subtracted ratio left by 32 bits.\r\n * @param sqrtRatioAX96 The price at the lower boundary\r\n * @param sqrtRatioBX96 The price at the upper boundary\r\n * @param amount0 The token0 amount\r\n * @returns liquidity for amount0, precise\r\n */\r\nfunction maxLiquidityForAmount0Precise(sqrtRatioAX96, sqrtRatioBX96, amount0) {\r\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n        [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n    }\r\n    const numerator = JSBI.multiply(JSBI.multiply(JSBI.BigInt(amount0), sqrtRatioAX96), sqrtRatioBX96);\r\n    const denominator = JSBI.multiply(Q96, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96));\r\n    return JSBI.divide(numerator, denominator);\r\n}\r\n/**\r\n * Computes the maximum amount of liquidity received for a given amount of token1\r\n * @param sqrtRatioAX96 The price at the lower tick boundary\r\n * @param sqrtRatioBX96 The price at the upper tick boundary\r\n * @param amount1 The token1 amount\r\n * @returns liquidity for amount1\r\n */\r\nfunction maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1) {\r\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n        [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n    }\r\n    return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount1), Q96), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96));\r\n}\r\n/**\r\n * Computes the maximum amount of liquidity received for a given amount of token0, token1,\r\n * and the prices at the tick boundaries.\r\n * @param sqrtRatioCurrentX96 the current price\r\n * @param sqrtRatioAX96 price at lower boundary\r\n * @param sqrtRatioBX96 price at upper boundary\r\n * @param amount0 token0 amount\r\n * @param amount1 token1 amount\r\n * @param useFullPrecision if false, liquidity will be maximized according to what the router can calculate,\r\n * not what core can theoretically support\r\n */\r\nexport function maxLiquidityForAmounts(sqrtRatioCurrentX96, sqrtRatioAX96, sqrtRatioBX96, amount0, amount1, useFullPrecision) {\r\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\r\n        [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\r\n    }\r\n    const maxLiquidityForAmount0 = useFullPrecision\r\n        ? maxLiquidityForAmount0Precise\r\n        : maxLiquidityForAmount0Imprecise;\r\n    if (JSBI.lessThanOrEqual(sqrtRatioCurrentX96, sqrtRatioAX96)) {\r\n        return maxLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\r\n    }\r\n    else if (JSBI.lessThan(sqrtRatioCurrentX96, sqrtRatioBX96)) {\r\n        const liquidity0 = maxLiquidityForAmount0(sqrtRatioCurrentX96, sqrtRatioBX96, amount0);\r\n        const liquidity1 = maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioCurrentX96, amount1);\r\n        return JSBI.lessThan(liquidity0, liquidity1) ? liquidity0 : liquidity1;\r\n    }\r\n    else {\r\n        return maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\r\n    }\r\n}\r\n//# sourceMappingURL=maxLiquidityForAmounts.js.map","references":["D:/personal_programming_work/integral-sdk-hpot/src/types/BigIntish.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/jsbi/jsbi.d.ts","D:/personal_programming_work/integral-sdk-hpot/src/constants/internalConstants.ts"],"map":"{\"version\":3,\"file\":\"maxLiquidityForAmounts.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/maxLiquidityForAmounts.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/personal_programming_work/integral-sdk-hpot/utils/maxLiquidityForAmounts.d.ts","writeByteOrderMark":false,"text":"import { BigintIsh } from '../types/BigIntish';\r\nimport JSBI from 'jsbi';\r\n/**\r\n * Computes the maximum amount of liquidity received for a given amount of token0, token1,\r\n * and the prices at the tick boundaries.\r\n * @param sqrtRatioCurrentX96 the current price\r\n * @param sqrtRatioAX96 price at lower boundary\r\n * @param sqrtRatioBX96 price at upper boundary\r\n * @param amount0 token0 amount\r\n * @param amount1 token1 amount\r\n * @param useFullPrecision if false, liquidity will be maximized according to what the router can calculate,\r\n * not what core can theoretically support\r\n */\r\nexport declare function maxLiquidityForAmounts(sqrtRatioCurrentX96: JSBI, sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount0: BigintIsh, amount1: BigintIsh, useFullPrecision: boolean): JSBI;\r\n"}}
