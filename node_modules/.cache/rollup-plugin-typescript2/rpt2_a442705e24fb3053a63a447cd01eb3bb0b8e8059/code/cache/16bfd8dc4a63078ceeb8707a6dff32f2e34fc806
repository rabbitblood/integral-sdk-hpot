{"code":"import { CurrencyAmount } from './CurrencyAmount';\r\nimport { Fraction } from './Fraction';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nexport class Price extends Fraction {\r\n    /**\r\n     * Construct a price, either with the base and quote currency amount, or the\r\n     * @param args\r\n     */\r\n    constructor(...args) {\r\n        let baseCurrency, quoteCurrency, denominator, numerator;\r\n        if (args.length === 4) {\r\n            [baseCurrency, quoteCurrency, denominator, numerator] = args;\r\n        }\r\n        else {\r\n            const result = args[0].quoteAmount.divide(args[0].baseAmount);\r\n            [baseCurrency, quoteCurrency, denominator, numerator] = [\r\n                args[0].baseAmount.currency,\r\n                args[0].quoteAmount.currency,\r\n                result.denominator,\r\n                result.numerator,\r\n            ];\r\n        }\r\n        super(numerator, denominator);\r\n        this.baseCurrency = baseCurrency;\r\n        this.quoteCurrency = quoteCurrency;\r\n        this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));\r\n    }\r\n    /**\r\n     * Flip the price, switching the base and quote currency\r\n     */\r\n    invert() {\r\n        return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\r\n    }\r\n    /**\r\n     * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n     * @param other the other price\r\n     */\r\n    multiply(other) {\r\n        invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN');\r\n        const fraction = super.multiply(other);\r\n        return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\r\n    }\r\n    /**\r\n     * Return the amount of quote currency corresponding to a given amount of the base currency\r\n     * @param currencyAmount the amount of base currency to quote against the price\r\n     */\r\n    quote(currencyAmount) {\r\n        invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN');\r\n        const result = super.multiply(currencyAmount);\r\n        return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);\r\n    }\r\n    /**\r\n     * Get the value scaled by decimals for formatting\r\n     * @private\r\n     */\r\n    get adjustedForDecimals() {\r\n        return super.multiply(this.scalar);\r\n    }\r\n    toSignificant(significantDigits = 6, format, rounding) {\r\n        return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\r\n    }\r\n    toFixed(decimalPlaces = 4, format, rounding) {\r\n        return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\r\n    }\r\n}\r\n//# sourceMappingURL=Price.js.map","references":["D:/personal_programming_work/integral-sdk-hpot/src/types/BigIntish.ts","D:/personal_programming_work/integral-sdk-hpot/src/entities/Currency.ts","D:/personal_programming_work/integral-sdk-hpot/src/entities/CurrencyAmount.ts","D:/personal_programming_work/integral-sdk-hpot/src/entities/Fraction.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/jsbi/jsbi.d.ts","D:/personal_programming_work/integral-sdk-hpot/src/enums/rounding.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/tiny-invariant/dist/tiny-invariant.d.ts"],"map":"{\"version\":3,\"file\":\"Price.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/entities/Price.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/personal_programming_work/integral-sdk-hpot/entities/Price.d.ts","writeByteOrderMark":false,"text":"import { BigintIsh } from '../types/BigIntish';\r\nimport { Currency } from './Currency';\r\nimport { CurrencyAmount } from './CurrencyAmount';\r\nimport { Fraction } from './Fraction';\r\nimport { Rounding } from '../enums/rounding';\r\nexport declare class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n    readonly baseCurrency: TBase;\r\n    readonly quoteCurrency: TQuote;\r\n    readonly scalar: Fraction;\r\n    /**\r\n     * Construct a price, either with the base and quote currency amount, or the\r\n     * @param args\r\n     */\r\n    constructor(...args: [TBase, TQuote, BigintIsh, BigintIsh] | [{\r\n        baseAmount: CurrencyAmount<TBase>;\r\n        quoteAmount: CurrencyAmount<TQuote>;\r\n    }]);\r\n    /**\r\n     * Flip the price, switching the base and quote currency\r\n     */\r\n    invert(): Price<TQuote, TBase>;\r\n    /**\r\n     * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n     * @param other the other price\r\n     */\r\n    multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote>;\r\n    /**\r\n     * Return the amount of quote currency corresponding to a given amount of the base currency\r\n     * @param currencyAmount the amount of base currency to quote against the price\r\n     */\r\n    quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote>;\r\n    /**\r\n     * Get the value scaled by decimals for formatting\r\n     * @private\r\n     */\r\n    private get adjustedForDecimals();\r\n    toSignificant(significantDigits?: number, format?: object, rounding?: Rounding): string;\r\n    toFixed(decimalPlaces?: number, format?: object, rounding?: Rounding): string;\r\n}\r\n"}}
