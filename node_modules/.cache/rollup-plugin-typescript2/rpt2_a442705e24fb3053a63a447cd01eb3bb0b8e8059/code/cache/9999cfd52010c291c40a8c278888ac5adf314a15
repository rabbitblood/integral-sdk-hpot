{"code":"import { Fraction } from './Fraction';\r\nimport JSBI from 'jsbi';\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100));\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction) {\r\n    return new Percent(fraction.numerator, fraction.denominator);\r\n}\r\nexport class Percent extends Fraction {\r\n    constructor(numerator, denominator = JSBI.BigInt(1)) {\r\n        super(numerator, denominator);\r\n        /**\r\n         * This boolean prevents a fraction from being interpreted as a Percent\r\n         */\r\n        this.isPercent = true;\r\n    }\r\n    add(other) {\r\n        return toPercent(super.add(other));\r\n    }\r\n    subtract(other) {\r\n        return toPercent(super.subtract(other));\r\n    }\r\n    multiply(other) {\r\n        return toPercent(super.multiply(other));\r\n    }\r\n    divide(other) {\r\n        return toPercent(super.divide(other));\r\n    }\r\n    toSignificant(significantDigits = 5, format, rounding) {\r\n        return super\r\n            .multiply(ONE_HUNDRED)\r\n            .toSignificant(significantDigits, format, rounding);\r\n    }\r\n    toFixed(decimalPlaces = 2, format, rounding) {\r\n        return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\r\n    }\r\n}\r\n//# sourceMappingURL=Percent.js.map","references":["D:/personal_programming_work/integral-sdk-hpot/src/types/BigIntish.ts","D:/personal_programming_work/integral-sdk-hpot/src/entities/Fraction.ts","D:/personal_programming_work/integral-sdk-hpot/node_modules/jsbi/jsbi.d.ts","D:/personal_programming_work/integral-sdk-hpot/src/enums/rounding.ts"],"map":"{\"version\":3,\"file\":\"Percent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/entities/Percent.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,IAAI,MAAM,MAAM,CAAC;AAGxB,MAAM,WAAW,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AAEnD;;;GAGG;AACH,SAAS,SAAS,CAAC,QAAkB;IACnC,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;AAC/D,CAAC;AAED,MAAM,OAAO,OAAQ,SAAQ,QAAQ;IAMnC,YACE,SAAoB,EACpB,cAAyB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAEvC,KAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;QAT/B;;WAEG;QACa,cAAS,GAAS,IAAI,CAAC;IAOvC,CAAC;IAED,GAAG,CAAC,KAA2B;QAC7B,OAAO,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IACrC,CAAC;IAED,QAAQ,CAAC,KAA2B;QAClC,OAAO,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,QAAQ,CAAC,KAA2B;QAClC,OAAO,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,KAA2B;QAChC,OAAO,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IACxC,CAAC;IAEM,aAAa,CAClB,oBAA4B,CAAC,EAC7B,MAAe,EACf,QAAmB;QAEnB,OAAO,KAAK;aACT,QAAQ,CAAC,WAAW,CAAC;aACrB,aAAa,CAAC,iBAAiB,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IACxD,CAAC;IAEM,OAAO,CACZ,gBAAwB,CAAC,EACzB,MAAe,EACf,QAAmB;QAEnB,OAAO,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC9E,CAAC;CACF\"}","dts":{"name":"D:/personal_programming_work/integral-sdk-hpot/entities/Percent.d.ts","writeByteOrderMark":false,"text":"import { BigintIsh } from '../types/BigIntish';\r\nimport { Fraction } from './Fraction';\r\nimport { Rounding } from '../enums/rounding';\r\nexport declare class Percent extends Fraction {\r\n    /**\r\n     * This boolean prevents a fraction from being interpreted as a Percent\r\n     */\r\n    readonly isPercent: true;\r\n    constructor(numerator: BigintIsh, denominator?: BigintIsh);\r\n    add(other: Fraction | BigintIsh): Percent;\r\n    subtract(other: Fraction | BigintIsh): Percent;\r\n    multiply(other: Fraction | BigintIsh): Percent;\r\n    divide(other: Fraction | BigintIsh): Percent;\r\n    toSignificant(significantDigits?: number, format?: object, rounding?: Rounding): string;\r\n    toFixed(decimalPlaces?: number, format?: object, rounding?: Rounding): string;\r\n}\r\n"}}
