{"code":"import invariant from 'tiny-invariant';\r\nimport { TickMath } from './tickMath';\r\n/**\r\n * Returns the closest tick that is nearest a given tick and usable for the given tick spacing\r\n * @param tick the target tick\r\n * @param tickSpacing the spacing of the pool\r\n */\r\nexport function nearestUsableTick(tick, tickSpacing) {\r\n    invariant(Number.isInteger(tick) && Number.isInteger(tickSpacing), 'INTEGERS');\r\n    invariant(tickSpacing > 0, 'TICK_SPACING');\r\n    invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK, 'TICK_BOUND');\r\n    const rounded = Math.round(tick / tickSpacing) * tickSpacing;\r\n    if (rounded < TickMath.MIN_TICK)\r\n        return rounded + tickSpacing;\r\n    else if (rounded > TickMath.MAX_TICK)\r\n        return rounded - tickSpacing;\r\n    else\r\n        return rounded;\r\n}\r\n//# sourceMappingURL=nearestUsableTick.js.map","references":["D:/personal_programming_work/integral-sdk-hpot/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","D:/personal_programming_work/integral-sdk-hpot/src/utils/tickMath.ts"],"map":"{\"version\":3,\"file\":\"nearestUsableTick.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/nearestUsableTick.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,SAAS,MAAM,gBAAgB,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAAC,IAAY,EAAE,WAAmB;IACjE,SAAS,CACP,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,EACvD,UAAU,CACX,CAAC;IACF,SAAS,CAAC,WAAW,GAAG,CAAC,EAAE,cAAc,CAAC,CAAC;IAC3C,SAAS,CACP,IAAI,IAAI,QAAQ,CAAC,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,QAAQ,EACtD,YAAY,CACb,CAAC;IACF,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,WAAW,CAAC,GAAG,WAAW,CAAC;IAC7D,IAAI,OAAO,GAAG,QAAQ,CAAC,QAAQ;QAAE,OAAO,OAAO,GAAG,WAAW,CAAC;SACzD,IAAI,OAAO,GAAG,QAAQ,CAAC,QAAQ;QAAE,OAAO,OAAO,GAAG,WAAW,CAAC;;QAC9D,OAAO,OAAO,CAAC;AACtB,CAAC\"}"}
